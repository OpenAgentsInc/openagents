name: Authentication Testing

on:
  push:
    branches: [main, develop, feature/end-to-end-auth-testing-1221]
    paths:
      - 'apps/desktop/**'
      - 'apps/mobile/**'
      - 'packages/convex/**'
      - '.github/workflows/auth-testing.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/desktop/**'
      - 'apps/mobile/**'
      - 'packages/convex/**'

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.2.16'

jobs:
  desktop-auth-tests:
    name: Desktop Authentication Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            apps/desktop/src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/bun.lockb') }}

      - name: Install dependencies
        run: bun install

      - name: Install desktop dependencies
        run: |
          cd apps/desktop
          bun install

      - name: Install system dependencies for Tauri
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Build Rust backend
        run: |
          cd apps/desktop/src-tauri
          cargo build

      - name: Run TypeScript compilation check
        run: |
          cd apps/desktop
          bun run build

      - name: Run desktop auth unit tests
        run: |
          cd apps/desktop
          bun run test:auth

      - name: Install Playwright browsers
        run: |
          cd apps/desktop
          npx playwright install chromium

      - name: Run E2E authentication tests
        run: |
          cd apps/desktop
          bun run test:e2e
        env:
          CI: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: desktop-playwright-report
          path: apps/desktop/playwright-report/
          retention-days: 7

  mobile-auth-tests:
    name: Mobile Authentication Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/mobile/node_modules
          key: ${{ runner.os }}-mobile-node-${{ hashFiles('**/bun.lockb') }}

      - name: Install dependencies
        run: bun install

      - name: Install mobile dependencies
        run: |
          cd apps/mobile
          bun install

      - name: Run TypeScript compilation check
        run: |
          cd apps/mobile
          bun run compile

      - name: Run mobile auth unit tests
        run: |
          cd apps/mobile
          bun run test
        continue-on-error: true # Mobile tests may need additional configuration

  convex-auth-tests:
    name: Convex Backend Auth Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/convex/node_modules
          key: ${{ runner.os }}-convex-node-${{ hashFiles('**/bun.lockb') }}

      - name: Install dependencies
        run: bun install

      - name: Install Convex dependencies
        run: |
          cd packages/convex
          bun install

      - name: Run Convex TypeScript check
        run: |
          cd packages/convex
          npx convex typecheck

      - name: Validate Convex schema
        run: |
          cd packages/convex
          npx convex dev --dry-run
        env:
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}
        continue-on-error: true # May not have deploy key in all environments

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Run security audit
        run: bun audit
        continue-on-error: true

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for potential hardcoded secrets..."
          # Look for potential API keys, tokens, etc.
          if grep -r -E "(api[_-]?key|secret|token|password)" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" apps/ packages/ | grep -v "test" | grep -v "__tests__" | grep -v ".spec." | grep -v "mock"; then
            echo "⚠️ Potential hardcoded secrets found. Please review:"
            grep -r -E "(api[_-]?key|secret|token|password)" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" apps/ packages/ | grep -v "test" | grep -v "__tests__" | grep -v ".spec." | grep -v "mock" || true
          else
            echo "✅ No obvious hardcoded secrets found"
          fi