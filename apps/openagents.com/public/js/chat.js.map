{"version":3,"file":"chat.js","sources":["../../src/client/chat.ts"],"sourcesContent":["/**\n * Chat functionality module\n * Handles chat UI interactions, message streaming, and conversation management\n */\n\ninterface ChatClient {\n  createConversation: (title: string) => Promise<string>\n  addMessage: (conversationId: string, role: string, content: string) => Promise<void>\n  getConversations: () => Promise<Array<any>>\n  updateConversationTitle: (conversationId: string, title: string) => Promise<void>\n}\n\n// Global state\nlet isGenerating = false\nlet currentStreamReader: ReadableStreamDefaultReader<Uint8Array> | null = null\nlet currentConversationId: string | null = null\n\n// Create chat client\nconst chatClient: ChatClient = {\n  createConversation: async (title: string) => {\n    const response = await fetch(\"/api/conversations\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ title })\n    })\n    const data = await response.json()\n    return data.id\n  },\n\n  addMessage: async (conversationId: string, role: string, content: string) => {\n    await fetch(`/api/conversations/${conversationId}/messages`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ role, content })\n    })\n  },\n\n  getConversations: async () => {\n    const response = await fetch(\"/api/conversations\")\n    return response.json()\n  },\n\n  updateConversationTitle: async (conversationId: string, title: string) => {\n    await fetch(`/api/conversations/${conversationId}`, {\n      method: \"PATCH\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ title })\n    })\n  }\n}\n\n// Utility functions\nfunction escapeHtml(text: string): string {\n  const div = document.createElement(\"div\")\n  div.textContent = text\n  return div.innerHTML\n}\n\nexport async function loadConversations() {\n  try {\n    const conversations = await chatClient.getConversations()\n    const threadContainer = document.getElementById(\"thread-list-container\")\n\n    if (!threadContainer || conversations.length === 0) return\n\n    const recentHtml = `\n      <div class=\"mt-2\">\n        <div class=\"px-3 py-1 mb-0.5\">\n          <span class=\"text-xs font-medium text-[rgba(255,255,255,0.5)] uppercase\">Recent</span>\n        </div>\n        <ul class=\"flex flex-col gap-0.5\">\n          ${\n      conversations.map((conv) => `\n            <li>\n              <a href=\"/chat/${conv.id}\" class=\"block px-3 py-1.5 text-sm rounded-md transition-colors ${\n        conv.id === currentConversationId\n          ? \"bg-[rgba(255,255,255,0.1)] text-[#D7D8E5]\"\n          : \"text-[rgba(255,255,255,0.7)] hover:bg-[rgba(255,255,255,0.05)] hover:text-[#D7D8E5]\"\n      }\">\n                <span>${escapeHtml(conv.title)}</span>\n              </a>\n            </li>\n          `).join(\"\")\n    }\n        </ul>\n      </div>\n    `\n\n    threadContainer.innerHTML = recentHtml\n  } catch (error) {\n    console.error(\"Failed to load conversations:\", error)\n  }\n}\n\nexport async function sendMessage(message: string) {\n  if (isGenerating || !message.trim()) return\n\n  const input = document.getElementById(\"chat-input\") as HTMLTextAreaElement\n  const submitButton = document.getElementById(\"submit-button\") as HTMLButtonElement\n\n  if (!input || !submitButton) return\n\n  // Clear input and update UI state\n  input.value = \"\"\n  input.style.height = \"auto\"\n  isGenerating = true\n  submitButton.disabled = true\n  input.disabled = true\n\n  // Create conversation if needed\n  if (!currentConversationId) {\n    try {\n      const title = message.slice(0, 50) + (message.length > 50 ? \"...\" : \"\")\n      currentConversationId = await chatClient.createConversation(title)\n\n      // Update URL without reload\n      window.history.replaceState({}, \"\", `/chat/${currentConversationId}`)\n\n      // Reload conversations to show new one\n      await loadConversations()\n    } catch (error) {\n      console.error(\"Failed to create conversation:\", error)\n      resetInputState()\n      return\n    }\n  }\n\n  // Add user message to UI\n  addMessageToUI(\"user\", message)\n\n  // Save user message\n  try {\n    await chatClient.addMessage(currentConversationId, \"user\", message)\n  } catch (error) {\n    console.error(\"Failed to save message:\", error)\n  }\n\n  // Stream assistant response\n  await streamAssistantResponse(message)\n}\n\nfunction addMessageToUI(role: \"user\" | \"assistant\", content: string) {\n  const messagesContainer = document.getElementById(\"messages-container\")\n  const messagesDiv = messagesContainer?.querySelector(\"div\")\n\n  if (!messagesDiv) return\n\n  // Format timestamp\n  const timestamp = new Date().toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })\n  const messageHtml = `\n    <div class=\"message\">\n      <div class=\"message-block ${role}\">\n        <div class=\"message-header\">\n          <span class=\"message-role ${role}\">${role === \"user\" ? \"You\" : \"Assistant\"}</span>\n          <span class=\"message-time\">${timestamp}</span>\n        </div>\n        <div class=\"message-body\">${role === \"user\" ? escapeHtml(content) : content}</div>\n      </div>\n    </div>\n  `\n\n  messagesDiv.insertAdjacentHTML(\"beforeend\", messageHtml)\n  if (messagesContainer) {\n    messagesContainer.scrollTop = messagesContainer.scrollHeight\n  }\n}\n\nasync function streamAssistantResponse(message: string) {\n  // Get selected model\n  const modelData = (window as any).getSelectedModel?.() || { id: \"llama-4-scout-17b\", provider: \"cloudflare\" }\n\n  // Prepare request body\n  const requestBody: any = {\n    message,\n    conversationId: currentConversationId,\n    model: modelData.id\n  }\n\n  // Add API key if needed\n  if (modelData.provider === \"openrouter\") {\n    const apiKey = localStorage.getItem(\"openrouterApiKey\")\n    if (apiKey) {\n      requestBody.openrouterApiKey = apiKey\n    }\n  }\n\n  try {\n    const endpoint = modelData.provider === \"cloudflare\" ? \"/api/cloudflare/chat\" : \"/api/openrouter/chat\"\n    const response = await fetch(endpoint, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(requestBody)\n    })\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`)\n    }\n\n    // Create assistant message container\n    addMessageToUI(\"assistant\", \"<div class=\\\"dot-flashing\\\"></div>\")\n\n    const messagesContainer = document.getElementById(\"messages-container\")\n    const allMessages = messagesContainer?.querySelectorAll(\".message\")\n    const assistantMessage = allMessages?.[allMessages.length - 1]\n    const messageBody = assistantMessage?.querySelector(\".message-body\")\n\n    if (!response.body || !messageBody) {\n      throw new Error(\"No response body or message container\")\n    }\n\n    // Stream the response\n    const reader = response.body.getReader()\n    currentStreamReader = reader\n    const decoder = new TextDecoder()\n    let buffer = \"\"\n    let fullContent = \"\"\n\n    while (true) {\n      const { done, value } = await reader.read()\n\n      if (done) break\n\n      buffer += decoder.decode(value, { stream: true })\n      const lines = buffer.split(\"\\n\")\n      buffer = lines.pop() || \"\"\n\n      for (const line of lines) {\n        if (line.startsWith(\"data: \")) {\n          const data = line.slice(6)\n          if (data === \"[DONE]\") continue\n\n          try {\n            const parsed = JSON.parse(data)\n            // Handle OpenAI-compatible SSE format\n            const content = parsed.choices?.[0]?.delta?.content\n            if (content) {\n              fullContent += content\n              // Convert markdown to HTML for display\n              const htmlContent = await convertMarkdown(fullContent)\n              messageBody.innerHTML = htmlContent\n              messagesContainer!.scrollTop = messagesContainer!.scrollHeight\n            }\n          } catch (e) {\n            console.error(\"Failed to parse SSE data:\", e)\n          }\n        }\n      }\n    }\n\n    // Save assistant message\n    if (fullContent && currentConversationId) {\n      try {\n        await chatClient.addMessage(currentConversationId, \"assistant\", fullContent)\n      } catch (error) {\n        console.error(\"Failed to save assistant message:\", error)\n      }\n    }\n  } catch (error) {\n    console.error(\"Chat error:\", error)\n    const messagesContainer = document.getElementById(\"messages-container\")\n    const allMessages = messagesContainer?.querySelectorAll(\".message\")\n    const lastMessage = allMessages?.[allMessages.length - 1]\n    const messageBody = lastMessage?.querySelector(\".message-body\")\n    if (messageBody) {\n      messageBody.innerHTML = \"<div class=\\\"error\\\">Failed to get response. Please try again.</div>\"\n    }\n  } finally {\n    currentStreamReader = null\n    resetInputState()\n  }\n}\n\nasync function convertMarkdown(markdown: string): Promise<string> {\n  // For now, just escape HTML and convert basic markdown\n  // In production, you might want to use a proper markdown parser\n  let html = escapeHtml(markdown)\n\n  // Convert code blocks\n  html = html.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, (_, lang, code) => {\n    return `<pre><code class=\"language-${lang || \"plaintext\"}\">${code.trim()}</code></pre>`\n  })\n\n  // Convert inline code\n  html = html.replace(/`([^`]+)`/g, \"<code>$1</code>\")\n\n  // Convert bold\n  html = html.replace(/\\*\\*([^*]+)\\*\\*/g, \"<strong>$1</strong>\")\n\n  // Convert italic\n  html = html.replace(/\\*([^*]+)\\*/g, \"<em>$1</em>\")\n\n  // Convert line breaks\n  html = html.replace(/\\n/g, \"<br>\")\n\n  return html\n}\n\nfunction resetInputState() {\n  const input = document.getElementById(\"chat-input\") as HTMLTextAreaElement\n  const submitButton = document.getElementById(\"submit-button\") as HTMLButtonElement\n\n  if (input && submitButton) {\n    isGenerating = false\n    submitButton.disabled = false\n    input.disabled = false\n    input.focus()\n  }\n}\n\n// Initialize chat when module loads\nexport function initializeChat() {\n  // Set conversation ID from window if available\n  currentConversationId = (window as any).CONVERSATION_ID || null\n\n  // Load conversations\n  loadConversations()\n\n  // Set up form submission\n  const form = document.querySelector(\".chat-form\") as HTMLFormElement\n  if (form) {\n    form.addEventListener(\"submit\", async (e) => {\n      e.preventDefault()\n      const input = document.getElementById(\"chat-input\") as HTMLTextAreaElement\n      if (input?.value.trim()) {\n        await sendMessage(input.value.trim())\n      }\n    })\n  }\n\n  // Set up input auto-resize\n  const input = document.getElementById(\"chat-input\") as HTMLTextAreaElement\n  if (input) {\n    input.addEventListener(\"input\", () => {\n      input.style.height = \"auto\"\n      input.style.height = input.scrollHeight + \"px\"\n\n      // Enable/disable submit button\n      const submitButton = document.getElementById(\"submit-button\") as HTMLButtonElement\n      if (submitButton) {\n        submitButton.disabled = !input.value.trim() || isGenerating\n      }\n    })\n\n    // Handle Enter key\n    input.addEventListener(\"keydown\", async (e) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault()\n        if (input.value.trim() && !isGenerating) {\n          await sendMessage(input.value.trim())\n        }\n      }\n    })\n  }\n\n  // Stop generation on button click\n  const stopButton = document.getElementById(\"stop-button\")\n  if (stopButton) {\n    stopButton.addEventListener(\"click\", () => {\n      if (currentStreamReader) {\n        currentStreamReader.cancel()\n        currentStreamReader = null\n        resetInputState()\n      }\n    })\n  }\n} // Export necessary functions for global access\n\n;(window as any).sendMessage = sendMessage\n\n// Functions are already exported above\n"],"names":["isGenerating","currentStreamReader","currentConversationId","chatClient","title","conversationId","role","content","escapeHtml","text","div","loadConversations","conversations","threadContainer","recentHtml","conv","error","sendMessage","message","input","submitButton","resetInputState","addMessageToUI","streamAssistantResponse","messagesContainer","messagesDiv","timestamp","messageHtml","modelData","requestBody","apiKey","endpoint","response","allMessages","messageBody","reader","decoder","buffer","fullContent","done","value","lines","line","data","htmlContent","convertMarkdown","e","markdown","html","_","lang","code"],"mappings":"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"}