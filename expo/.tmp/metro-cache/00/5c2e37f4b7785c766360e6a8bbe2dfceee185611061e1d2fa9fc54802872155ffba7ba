{"dependencies":[{"name":"../utils/guards","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":78},"end":{"line":5,"column":43,"index":121}}],"key":"fXhx13II1Tic/rmDriluPBXDxzo=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"parseBoxShadowString\", {\n    enumerable: true,\n    get: function () {\n      return parseBoxShadowString;\n    }\n  });\n  var _utilsGuards = require(_dependencyMap[0]);\n  var LENGTH_MAPPINGS = ['offsetX', 'offsetY', 'blurRadius', 'spreadDistance'];\n  var SHADOW_PARTS_REGEX = /(?:[^\\s()]+|\\([^()]*\\))+/g;\n  var SHADOW_SPLIT_REGEX = /(?:[^,()]+|\\([^)]*\\))+(?=\\s*,|$)/g;\n  var _worklet_14418662517436_init_data = {\n    code: \"function parseBoxShadowString_reactNativeReanimated_parsersTs1(value){const{SHADOW_SPLIT_REGEX,SHADOW_PARTS_REGEX,isLength,LENGTH_MAPPINGS}=this.__closure;if(value==='none'){return[];}const shadows=value.match(SHADOW_SPLIT_REGEX)||[];return shadows.map(function(shadow){const result={offsetX:0,offsetY:0};let foundLengthsCount=0;const parts=shadow.match(SHADOW_PARTS_REGEX)||[];parts.forEach(function(part){if(isLength(part)){result[LENGTH_MAPPINGS[foundLengthsCount++]]=part;}else if(part==='inset'){result.inset=true;}else{result.color=part.trim();}});return result;});}\"\n  };\n  var parseBoxShadowString = function parseBoxShadowString_reactNativeReanimated_parsersTs1Factory(_ref) {\n    var _worklet_14418662517436_init_data = _ref._worklet_14418662517436_init_data,\n      SHADOW_SPLIT_REGEX = _ref.SHADOW_SPLIT_REGEX,\n      SHADOW_PARTS_REGEX = _ref.SHADOW_PARTS_REGEX,\n      isLength = _ref.isLength,\n      LENGTH_MAPPINGS = _ref.LENGTH_MAPPINGS;\n    var parseBoxShadowString = function (value) {\n      if (value === 'none') {\n        return [];\n      }\n      var shadows = value.match(SHADOW_SPLIT_REGEX) || [];\n      return shadows.map(shadow => {\n        var result = {\n          offsetX: 0,\n          offsetY: 0\n        };\n        var foundLengthsCount = 0;\n        var parts = shadow.match(SHADOW_PARTS_REGEX) || [];\n        parts.forEach(part => {\n          if (isLength(part)) {\n            result[LENGTH_MAPPINGS[foundLengthsCount++]] = part;\n          } else if (part === 'inset') {\n            result.inset = true;\n          } else {\n            result.color = part.trim();\n          }\n        });\n        return result;\n      });\n    };\n    parseBoxShadowString.__closure = {\n      SHADOW_SPLIT_REGEX,\n      SHADOW_PARTS_REGEX,\n      isLength,\n      LENGTH_MAPPINGS\n    };\n    parseBoxShadowString.__workletHash = 14418662517436;\n    parseBoxShadowString.__initData = _worklet_14418662517436_init_data;\n    return parseBoxShadowString;\n  }({\n    _worklet_14418662517436_init_data,\n    SHADOW_SPLIT_REGEX,\n    SHADOW_PARTS_REGEX,\n    isLength: _utilsGuards.isLength,\n    LENGTH_MAPPINGS\n  });\n});","lineCount":66,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,17,0,"Object"],[7,8,17,0],[7,9,17,0,"defineProperty"],[7,23,17,0],[7,24,17,0,"exports"],[7,31,17,0],[8,4,17,0,"enumerable"],[8,14,17,0],[9,4,17,0,"get"],[9,7,17,0],[9,18,17,0,"get"],[9,19,17,0],[10,6,17,0],[10,13,17,0,"parseBoxShadowString"],[10,33,17,0],[11,4,17,0],[12,2,17,0],[13,2,5,0],[13,6,5,0,"_utilsGuards"],[13,18,5,0],[13,21,5,0,"require"],[13,28,5,0],[13,29,5,0,"_dependencyMap"],[13,43,5,0],[14,2,7,0],[14,6,7,6,"LENGTH_MAPPINGS"],[14,21,7,21],[14,24,7,24],[14,25,8,2],[14,34,8,11],[14,36,9,2],[14,45,9,11],[14,47,10,2],[14,59,10,14],[14,61,11,2],[14,77,11,18],[14,78,12,10],[15,2,14,0],[15,6,14,6,"SHADOW_PARTS_REGEX"],[15,24,14,24],[15,27,14,27],[15,54,14,54],[16,2,15,0],[16,6,15,6,"SHADOW_SPLIT_REGEX"],[16,24,15,24],[16,27,15,27],[16,62,15,62],[17,2,15,63],[17,6,15,63,"_worklet_14418662517436_init_data"],[17,39,15,63],[18,4,15,63,"code"],[18,8,15,63],[19,2,15,63],[20,2,15,63],[20,6,15,63,"parseBoxShadowString"],[20,26,15,63],[20,29,17,7],[20,38,17,7,"parseBoxShadowString_reactNativeReanimated_parsersTs1Factory"],[20,99,17,7,"_ref"],[20,103,17,7],[21,4,17,7],[21,8,17,7,"_worklet_14418662517436_init_data"],[21,41,17,7],[21,44,17,7,"_ref"],[21,48,17,7],[21,49,17,7,"_worklet_14418662517436_init_data"],[21,82,17,7],[22,6,22,30,"SHADOW_SPLIT_REGEX"],[22,24,22,48],[22,27,22,48,"_ref"],[22,31,22,48],[22,32,22,30,"SHADOW_SPLIT_REGEX"],[22,50,22,48],[23,6,31,31,"SHADOW_PARTS_REGEX"],[23,24,31,49],[23,27,31,49,"_ref"],[23,31,31,49],[23,32,31,31,"SHADOW_PARTS_REGEX"],[23,50,31,49],[24,6,34,10,"isLength"],[24,14,34,18],[24,17,34,18,"_ref"],[24,21,34,18],[24,22,34,10,"isLength"],[24,30,34,18],[25,6,35,15,"LENGTH_MAPPINGS"],[25,21,35,30],[25,24,35,30,"_ref"],[25,28,35,30],[25,29,35,15,"LENGTH_MAPPINGS"],[25,44,35,30],[26,4,35,30],[26,8,35,30,"parseBoxShadowString"],[26,28,35,30],[26,40,35,30,"parseBoxShadowString"],[26,41,17,37,"value"],[26,46,17,50],[26,48,17,52],[27,6,18,2],[27,10,18,6,"value"],[27,15,18,11],[27,20,18,16],[27,26,18,22],[27,28,18,24],[28,8,19,4],[28,15,19,11],[28,17,19,13],[29,6,20,2],[30,6,22,2],[30,10,22,8,"shadows"],[30,17,22,15],[30,20,22,18,"value"],[30,25,22,23],[30,26,22,24,"match"],[30,31,22,29],[30,32,22,30,"SHADOW_SPLIT_REGEX"],[30,50,22,48],[30,51,22,49],[30,55,22,53],[30,57,22,55],[31,6,24,2],[31,13,24,9,"shadows"],[31,20,24,16],[31,21,24,17,"map"],[31,24,24,20],[31,25,24,38,"shadow"],[31,31,24,44],[31,35,24,49],[32,8,25,4],[32,12,25,10,"result"],[32,18,25,32],[32,21,25,35],[33,10,26,6,"offsetX"],[33,17,26,13],[33,19,26,15],[33,20,26,16],[34,10,27,6,"offsetY"],[34,17,27,13],[34,19,27,15],[35,8,28,4],[35,9,28,5],[36,8,30,4],[36,12,30,8,"foundLengthsCount"],[36,29,30,25],[36,32,30,28],[36,33,30,29],[37,8,31,4],[37,12,31,10,"parts"],[37,17,31,15],[37,20,31,18,"shadow"],[37,26,31,24],[37,27,31,25,"match"],[37,32,31,30],[37,33,31,31,"SHADOW_PARTS_REGEX"],[37,51,31,49],[37,52,31,50],[37,56,31,54],[37,58,31,56],[38,8,33,4,"parts"],[38,13,33,9],[38,14,33,10,"forEach"],[38,21,33,17],[38,22,33,19,"part"],[38,26,33,23],[38,30,33,28],[39,10,34,6],[39,14,34,10,"isLength"],[39,22,34,18],[39,23,34,19,"part"],[39,27,34,23],[39,28,34,24],[39,30,34,26],[40,12,35,8,"result"],[40,18,35,14],[40,19,35,15,"LENGTH_MAPPINGS"],[40,34,35,30],[40,35,35,31,"foundLengthsCount"],[40,52,35,48],[40,54,35,50],[40,55,35,51],[40,56,35,52],[40,59,35,55,"part"],[40,63,35,59],[41,10,36,6],[41,11,36,7],[41,17,36,13],[41,21,36,17,"part"],[41,25,36,21],[41,30,36,26],[41,37,36,33],[41,39,36,35],[42,12,37,8,"result"],[42,18,37,14],[42,19,37,15,"inset"],[42,24,37,20],[42,27,37,23],[42,31,37,27],[43,10,38,6],[43,11,38,7],[43,17,38,13],[44,12,39,8,"result"],[44,18,39,14],[44,19,39,15,"color"],[44,24,39,20],[44,27,39,23,"part"],[44,31,39,27],[44,32,39,28,"trim"],[44,36,39,32],[44,37,39,33],[44,38,39,34],[45,10,40,6],[46,8,41,4],[46,9,41,5],[46,10,41,6],[47,8,43,4],[47,15,43,11,"result"],[47,21,43,17],[48,6,44,2],[48,7,44,3],[48,8,44,4],[49,4,45,0],[49,5,45,1],[50,4,45,1,"parseBoxShadowString"],[50,24,45,1],[50,25,45,1,"__closure"],[50,34,45,1],[51,6,22,30,"SHADOW_SPLIT_REGEX"],[51,24,22,48],[52,6,31,31,"SHADOW_PARTS_REGEX"],[52,24,31,49],[53,6,34,10,"isLength"],[53,14,34,18],[54,6,35,15,"LENGTH_MAPPINGS"],[55,4,35,30],[56,4,35,30,"parseBoxShadowString"],[56,24,35,30],[56,25,35,30,"__workletHash"],[56,38,35,30],[57,4,35,30,"parseBoxShadowString"],[57,24,35,30],[57,25,35,30,"__initData"],[57,35,35,30],[57,38,35,30,"_worklet_14418662517436_init_data"],[57,71,35,30],[58,4,35,30],[58,11,35,30,"parseBoxShadowString"],[58,31,35,30],[59,2,35,30],[59,3,17,7],[60,4,17,7,"_worklet_14418662517436_init_data"],[60,37,17,7],[61,4,22,30,"SHADOW_SPLIT_REGEX"],[61,22,22,48],[62,4,31,31,"SHADOW_PARTS_REGEX"],[62,22,31,49],[63,4,34,10,"isLength"],[63,12,34,18],[63,14,34,10,"isLength"],[63,26,34,18],[63,27,34,18,"isLength"],[63,35,34,18],[64,4,35,15,"LENGTH_MAPPINGS"],[65,2,35,30],[66,0,35,30],[66,3]],"functionMap":{"names":["<global>","parseBoxShadowString","shadows.map$argument_0","parts.forEach$argument_0"],"mappings":"AAA;OCgB;qCCO;kBCS;KDQ;GDG;CDC"},"hasCjsExports":false},"type":"js/module"}]}