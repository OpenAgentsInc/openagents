{"dependencies":[{"name":"../common/utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":14,"index":39},"end":{"line":5,"column":40,"index":65}}],"key":"s68H+Qrc8so5XeN472FI/1YNbEY=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // Lists\n\n  'use strict';\n\n  var isSpace = require(_dependencyMap[0]).isSpace;\n\n  // Search `[-+*][\\n ]`, returns next pos after marker on success\n  // or -1 on fail.\n  function skipBulletListMarker(state, startLine) {\n    var marker, pos, max, ch;\n    pos = state.bMarks[startLine] + state.tShift[startLine];\n    max = state.eMarks[startLine];\n    marker = state.src.charCodeAt(pos++);\n    // Check bullet\n    if (marker !== 0x2A /* * */ && marker !== 0x2D /* - */ && marker !== 0x2B /* + */) {\n      return -1;\n    }\n    if (pos < max) {\n      ch = state.src.charCodeAt(pos);\n      if (!isSpace(ch)) {\n        // \" -test \" - is not a list item\n        return -1;\n      }\n    }\n    return pos;\n  }\n\n  // Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n  // or -1 on fail.\n  function skipOrderedListMarker(state, startLine) {\n    var ch,\n      start = state.bMarks[startLine] + state.tShift[startLine],\n      pos = start,\n      max = state.eMarks[startLine];\n\n    // List marker should have at least 2 chars (digit + dot)\n    if (pos + 1 >= max) {\n      return -1;\n    }\n    ch = state.src.charCodeAt(pos++);\n    if (ch < 0x30 /* 0 */ || ch > 0x39 /* 9 */) {\n      return -1;\n    }\n    for (;;) {\n      // EOL -> fail\n      if (pos >= max) {\n        return -1;\n      }\n      ch = state.src.charCodeAt(pos++);\n      if (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) {\n        // List marker should have no more than 9 digits\n        // (prevents integer overflow in browsers)\n        if (pos - start >= 10) {\n          return -1;\n        }\n        continue;\n      }\n\n      // found valid marker\n      if (ch === 0x29 /* ) */ || ch === 0x2e /* . */) {\n        break;\n      }\n      return -1;\n    }\n    if (pos < max) {\n      ch = state.src.charCodeAt(pos);\n      if (!isSpace(ch)) {\n        // \" 1.test \" - is not a list item\n        return -1;\n      }\n    }\n    return pos;\n  }\n  function markTightParagraphs(state, idx) {\n    var i,\n      l,\n      level = state.level + 2;\n    for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n      if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n        state.tokens[i + 2].hidden = true;\n        state.tokens[i].hidden = true;\n        i += 2;\n      }\n    }\n  }\n  module.exports = function list(state, startLine, endLine, silent) {\n    var ch,\n      contentStart,\n      i,\n      indent,\n      indentAfterMarker,\n      initial,\n      isOrdered,\n      itemLines,\n      l,\n      listLines,\n      listTokIdx,\n      markerCharCode,\n      markerValue,\n      max,\n      nextLine,\n      offset,\n      oldListIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      oldTight,\n      pos,\n      posAfterMarker,\n      prevEmptyEnd,\n      start,\n      terminate,\n      terminatorRules,\n      token,\n      isTerminatingParagraph = false,\n      tight = true;\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) {\n      return false;\n    }\n\n    // Special case:\n    //  - item 1\n    //   - item 2\n    //    - item 3\n    //     - item 4\n    //      - this one is a paragraph continuation\n    if (state.listIndent >= 0 && state.sCount[startLine] - state.listIndent >= 4 && state.sCount[startLine] < state.blkIndent) {\n      return false;\n    }\n\n    // limit conditions when list can interrupt\n    // a paragraph (validation mode only)\n    if (silent && state.parentType === 'paragraph') {\n      // Next list item should still terminate previous list item;\n      //\n      // This code can fail if plugins use blkIndent as well as lists,\n      // but I hope the spec gets fixed long before that happens.\n      //\n      if (state.tShift[startLine] >= state.blkIndent) {\n        isTerminatingParagraph = true;\n      }\n    }\n\n    // Detect list type and position after marker\n    if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n      isOrdered = true;\n      start = state.bMarks[startLine] + state.tShift[startLine];\n      markerValue = Number(state.src.substr(start, posAfterMarker - start - 1));\n\n      // If we're starting a new ordered list right after\n      // a paragraph, it should start with 1.\n      if (isTerminatingParagraph && markerValue !== 1) return false;\n    } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n      isOrdered = false;\n    } else {\n      return false;\n    }\n\n    // If we're starting a new unordered list right after\n    // a paragraph, first line should not be empty.\n    if (isTerminatingParagraph) {\n      if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;\n    }\n\n    // We should terminate list on style change. Remember first one to compare.\n    markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\n    // For validation mode we can terminate immediately\n    if (silent) {\n      return true;\n    }\n\n    // Start list\n    listTokIdx = state.tokens.length;\n    if (isOrdered) {\n      token = state.push('ordered_list_open', 'ol', 1);\n      if (markerValue !== 1) {\n        token.attrs = [['start', markerValue]];\n      }\n    } else {\n      token = state.push('bullet_list_open', 'ul', 1);\n    }\n    token.map = listLines = [startLine, 0];\n    token.markup = String.fromCharCode(markerCharCode);\n\n    //\n    // Iterate list items\n    //\n\n    nextLine = startLine;\n    prevEmptyEnd = false;\n    terminatorRules = state.md.block.ruler.getRules('list');\n    oldParentType = state.parentType;\n    state.parentType = 'list';\n    while (nextLine < endLine) {\n      pos = posAfterMarker;\n      max = state.eMarks[nextLine];\n      initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n        if (ch === 0x09) {\n          offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n        } else if (ch === 0x20) {\n          offset++;\n        } else {\n          break;\n        }\n        pos++;\n      }\n      contentStart = pos;\n      if (contentStart >= max) {\n        // trimming space in \"-    \\n  3\" case, indent is 1 here\n        indentAfterMarker = 1;\n      } else {\n        indentAfterMarker = offset - initial;\n      }\n\n      // If we have more than 4 spaces, the indent is 1\n      // (the rest is just indented code block)\n      if (indentAfterMarker > 4) {\n        indentAfterMarker = 1;\n      }\n\n      // \"  -  test\"\n      //  ^^^^^ - calculating total length of this thing\n      indent = initial + indentAfterMarker;\n\n      // Run subparser & write tokens\n      token = state.push('list_item_open', 'li', 1);\n      token.markup = String.fromCharCode(markerCharCode);\n      token.map = itemLines = [startLine, 0];\n\n      // change current state, then restore it after parser subcall\n      oldTight = state.tight;\n      oldTShift = state.tShift[startLine];\n      oldSCount = state.sCount[startLine];\n\n      //  - example list\n      // ^ listIndent position will be here\n      //   ^ blkIndent position will be here\n      //\n      oldListIndent = state.listIndent;\n      state.listIndent = state.blkIndent;\n      state.blkIndent = indent;\n      state.tight = true;\n      state.tShift[startLine] = contentStart - state.bMarks[startLine];\n      state.sCount[startLine] = offset;\n      if (contentStart >= max && state.isEmpty(startLine + 1)) {\n        // workaround for this case\n        // (list item is empty, list terminates before \"foo\"):\n        // ~~~~~~~~\n        //   -\n        //\n        //     foo\n        // ~~~~~~~~\n        state.line = Math.min(state.line + 2, endLine);\n      } else {\n        state.md.block.tokenize(state, startLine, endLine, true);\n      }\n\n      // If any of list item is tight, mark list as tight\n      if (!state.tight || prevEmptyEnd) {\n        tight = false;\n      }\n      // Item become loose if finish with empty line,\n      // but we should filter last element, because it means list finish\n      prevEmptyEnd = state.line - startLine > 1 && state.isEmpty(state.line - 1);\n      state.blkIndent = state.listIndent;\n      state.listIndent = oldListIndent;\n      state.tShift[startLine] = oldTShift;\n      state.sCount[startLine] = oldSCount;\n      state.tight = oldTight;\n      token = state.push('list_item_close', 'li', -1);\n      token.markup = String.fromCharCode(markerCharCode);\n      nextLine = startLine = state.line;\n      itemLines[1] = nextLine;\n      contentStart = state.bMarks[startLine];\n      if (nextLine >= endLine) {\n        break;\n      }\n\n      //\n      // Try to check if list is terminated or continued.\n      //\n      if (state.sCount[nextLine] < state.blkIndent) {\n        break;\n      }\n\n      // if it's indented more than 3 spaces, it should be a code block\n      if (state.sCount[startLine] - state.blkIndent >= 4) {\n        break;\n      }\n\n      // fail if terminating block found\n      terminate = false;\n      for (i = 0, l = terminatorRules.length; i < l; i++) {\n        if (terminatorRules[i](state, nextLine, endLine, true)) {\n          terminate = true;\n          break;\n        }\n      }\n      if (terminate) {\n        break;\n      }\n\n      // fail if list has another type\n      if (isOrdered) {\n        posAfterMarker = skipOrderedListMarker(state, nextLine);\n        if (posAfterMarker < 0) {\n          break;\n        }\n      } else {\n        posAfterMarker = skipBulletListMarker(state, nextLine);\n        if (posAfterMarker < 0) {\n          break;\n        }\n      }\n      if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {\n        break;\n      }\n    }\n\n    // Finalize list\n    if (isOrdered) {\n      token = state.push('ordered_list_close', 'ol', -1);\n    } else {\n      token = state.push('bullet_list_close', 'ul', -1);\n    }\n    token.markup = String.fromCharCode(markerCharCode);\n    listLines[1] = nextLine;\n    state.line = nextLine;\n    state.parentType = oldParentType;\n\n    // mark paragraphs tight if needed\n    if (tight) {\n      markTightParagraphs(state, listTokIdx);\n    }\n    return true;\n  };\n});","lineCount":343,"map":[[2,2,1,0],[4,2,3,0],[4,14,3,12],[6,2,5,0],[6,6,5,4,"isSpace"],[6,13,5,11],[6,16,5,14,"require"],[6,23,5,21],[6,24,5,21,"_dependencyMap"],[6,38,5,21],[6,41,5,39],[6,42,5,40],[6,43,5,41,"isSpace"],[6,50,5,48],[8,2,8,0],[9,2,9,0],[10,2,10,0],[10,11,10,9,"skipBulletListMarker"],[10,31,10,29,"skipBulletListMarker"],[10,32,10,30,"state"],[10,37,10,35],[10,39,10,37,"startLine"],[10,48,10,46],[10,50,10,48],[11,4,11,2],[11,8,11,6,"marker"],[11,14,11,12],[11,16,11,14,"pos"],[11,19,11,17],[11,21,11,19,"max"],[11,24,11,22],[11,26,11,24,"ch"],[11,28,11,26],[12,4,13,2,"pos"],[12,7,13,5],[12,10,13,8,"state"],[12,15,13,13],[12,16,13,14,"bMarks"],[12,22,13,20],[12,23,13,21,"startLine"],[12,32,13,30],[12,33,13,31],[12,36,13,34,"state"],[12,41,13,39],[12,42,13,40,"tShift"],[12,48,13,46],[12,49,13,47,"startLine"],[12,58,13,56],[12,59,13,57],[13,4,14,2,"max"],[13,7,14,5],[13,10,14,8,"state"],[13,15,14,13],[13,16,14,14,"eMarks"],[13,22,14,20],[13,23,14,21,"startLine"],[13,32,14,30],[13,33,14,31],[14,4,16,2,"marker"],[14,10,16,8],[14,13,16,11,"state"],[14,18,16,16],[14,19,16,17,"src"],[14,22,16,20],[14,23,16,21,"charCodeAt"],[14,33,16,31],[14,34,16,32,"pos"],[14,37,16,35],[14,39,16,37],[14,40,16,38],[15,4,17,2],[16,4,18,2],[16,8,18,6,"marker"],[16,14,18,12],[16,19,18,17],[16,23,18,21],[16,35,19,6,"marker"],[16,41,19,12],[16,46,19,17],[16,50,19,21],[16,62,20,6,"marker"],[16,68,20,12],[16,73,20,17],[16,77,20,21],[16,87,20,30],[17,6,21,4],[18,4,22,2],[19,4,24,2],[19,8,24,6,"pos"],[19,11,24,9],[19,14,24,12,"max"],[19,17,24,15],[19,19,24,17],[20,6,25,4,"ch"],[20,8,25,6],[20,11,25,9,"state"],[20,16,25,14],[20,17,25,15,"src"],[20,20,25,18],[20,21,25,19,"charCodeAt"],[20,31,25,29],[20,32,25,30,"pos"],[20,35,25,33],[20,36,25,34],[21,6,27,4],[21,10,27,8],[21,11,27,9,"isSpace"],[21,18,27,16],[21,19,27,17,"ch"],[21,21,27,19],[21,22,27,20],[21,24,27,22],[22,8,28,6],[23,8,29,6],[24,6,30,4],[25,4,31,2],[26,4,33,2],[26,11,33,9,"pos"],[26,14,33,12],[27,2,34,0],[29,2,36,0],[30,2,37,0],[31,2,38,0],[31,11,38,9,"skipOrderedListMarker"],[31,32,38,30,"skipOrderedListMarker"],[31,33,38,31,"state"],[31,38,38,36],[31,40,38,38,"startLine"],[31,49,38,47],[31,51,38,49],[32,4,39,2],[32,8,39,6,"ch"],[32,10,39,8],[33,6,40,6,"start"],[33,11,40,11],[33,14,40,14,"state"],[33,19,40,19],[33,20,40,20,"bMarks"],[33,26,40,26],[33,27,40,27,"startLine"],[33,36,40,36],[33,37,40,37],[33,40,40,40,"state"],[33,45,40,45],[33,46,40,46,"tShift"],[33,52,40,52],[33,53,40,53,"startLine"],[33,62,40,62],[33,63,40,63],[34,6,41,6,"pos"],[34,9,41,9],[34,12,41,12,"start"],[34,17,41,17],[35,6,42,6,"max"],[35,9,42,9],[35,12,42,12,"state"],[35,17,42,17],[35,18,42,18,"eMarks"],[35,24,42,24],[35,25,42,25,"startLine"],[35,34,42,34],[35,35,42,35],[37,4,44,2],[38,4,45,2],[38,8,45,6,"pos"],[38,11,45,9],[38,14,45,12],[38,15,45,13],[38,19,45,17,"max"],[38,22,45,20],[38,24,45,22],[39,6,45,24],[40,4,45,35],[41,4,47,2,"ch"],[41,6,47,4],[41,9,47,7,"state"],[41,14,47,12],[41,15,47,13,"src"],[41,18,47,16],[41,19,47,17,"charCodeAt"],[41,29,47,27],[41,30,47,28,"pos"],[41,33,47,31],[41,35,47,33],[41,36,47,34],[42,4,49,2],[42,8,49,6,"ch"],[42,10,49,8],[42,13,49,11],[42,17,49,15],[42,29,49,26,"ch"],[42,31,49,28],[42,34,49,31],[42,38,49,35],[42,48,49,44],[43,6,49,46],[44,4,49,57],[45,4,51,2],[45,13,51,11],[46,6,52,4],[47,6,53,4],[47,10,53,8,"pos"],[47,13,53,11],[47,17,53,15,"max"],[47,20,53,18],[47,22,53,20],[48,8,53,22],[49,6,53,33],[50,6,55,4,"ch"],[50,8,55,6],[50,11,55,9,"state"],[50,16,55,14],[50,17,55,15,"src"],[50,20,55,18],[50,21,55,19,"charCodeAt"],[50,31,55,29],[50,32,55,30,"pos"],[50,35,55,33],[50,37,55,35],[50,38,55,36],[51,6,57,4],[51,10,57,8,"ch"],[51,12,57,10],[51,16,57,14],[51,20,57,18],[51,32,57,29,"ch"],[51,34,57,31],[51,38,57,35],[51,42,57,39],[51,52,57,48],[52,8,59,6],[53,8,60,6],[54,8,61,6],[54,12,61,10,"pos"],[54,15,61,13],[54,18,61,16,"start"],[54,23,61,21],[54,27,61,25],[54,29,61,27],[54,31,61,29],[55,10,61,31],[56,8,61,42],[57,8,63,6],[58,6,64,4],[60,6,66,4],[61,6,67,4],[61,10,67,8,"ch"],[61,12,67,10],[61,17,67,15],[61,21,67,19],[61,33,67,30,"ch"],[61,35,67,32],[61,40,67,37],[61,44,67,41],[61,54,67,50],[62,8,68,6],[63,6,69,4],[64,6,71,4],[65,4,72,2],[66,4,75,2],[66,8,75,6,"pos"],[66,11,75,9],[66,14,75,12,"max"],[66,17,75,15],[66,19,75,17],[67,6,76,4,"ch"],[67,8,76,6],[67,11,76,9,"state"],[67,16,76,14],[67,17,76,15,"src"],[67,20,76,18],[67,21,76,19,"charCodeAt"],[67,31,76,29],[67,32,76,30,"pos"],[67,35,76,33],[67,36,76,34],[68,6,78,4],[68,10,78,8],[68,11,78,9,"isSpace"],[68,18,78,16],[68,19,78,17,"ch"],[68,21,78,19],[68,22,78,20],[68,24,78,22],[69,8,79,6],[70,8,80,6],[71,6,81,4],[72,4,82,2],[73,4,83,2],[73,11,83,9,"pos"],[73,14,83,12],[74,2,84,0],[75,2,86,0],[75,11,86,9,"markTightParagraphs"],[75,30,86,28,"markTightParagraphs"],[75,31,86,29,"state"],[75,36,86,34],[75,38,86,36,"idx"],[75,41,86,39],[75,43,86,41],[76,4,87,2],[76,8,87,6,"i"],[76,9,87,7],[77,6,87,9,"l"],[77,7,87,10],[78,6,88,6,"level"],[78,11,88,11],[78,14,88,14,"state"],[78,19,88,19],[78,20,88,20,"level"],[78,25,88,25],[78,28,88,28],[78,29,88,29],[79,4,90,2],[79,9,90,7,"i"],[79,10,90,8],[79,13,90,11,"idx"],[79,16,90,14],[79,19,90,17],[79,20,90,18],[79,22,90,20,"l"],[79,23,90,21],[79,26,90,24,"state"],[79,31,90,29],[79,32,90,30,"tokens"],[79,38,90,36],[79,39,90,37,"length"],[79,45,90,43],[79,48,90,46],[79,49,90,47],[79,51,90,49,"i"],[79,52,90,50],[79,55,90,53,"l"],[79,56,90,54],[79,58,90,56,"i"],[79,59,90,57],[79,61,90,59],[79,63,90,61],[80,6,91,4],[80,10,91,8,"state"],[80,15,91,13],[80,16,91,14,"tokens"],[80,22,91,20],[80,23,91,21,"i"],[80,24,91,22],[80,25,91,23],[80,26,91,24,"level"],[80,31,91,29],[80,36,91,34,"level"],[80,41,91,39],[80,45,91,43,"state"],[80,50,91,48],[80,51,91,49,"tokens"],[80,57,91,55],[80,58,91,56,"i"],[80,59,91,57],[80,60,91,58],[80,61,91,59,"type"],[80,65,91,63],[80,70,91,68],[80,86,91,84],[80,88,91,86],[81,8,92,6,"state"],[81,13,92,11],[81,14,92,12,"tokens"],[81,20,92,18],[81,21,92,19,"i"],[81,22,92,20],[81,25,92,23],[81,26,92,24],[81,27,92,25],[81,28,92,26,"hidden"],[81,34,92,32],[81,37,92,35],[81,41,92,39],[82,8,93,6,"state"],[82,13,93,11],[82,14,93,12,"tokens"],[82,20,93,18],[82,21,93,19,"i"],[82,22,93,20],[82,23,93,21],[82,24,93,22,"hidden"],[82,30,93,28],[82,33,93,31],[82,37,93,35],[83,8,94,6,"i"],[83,9,94,7],[83,13,94,11],[83,14,94,12],[84,6,95,4],[85,4,96,2],[86,2,97,0],[87,2,100,0,"module"],[87,8,100,6],[87,9,100,7,"exports"],[87,16,100,14],[87,19,100,17],[87,28,100,26,"list"],[87,32,100,30,"list"],[87,33,100,31,"state"],[87,38,100,36],[87,40,100,38,"startLine"],[87,49,100,47],[87,51,100,49,"endLine"],[87,58,100,56],[87,60,100,58,"silent"],[87,66,100,64],[87,68,100,66],[88,4,101,2],[88,8,101,6,"ch"],[88,10,101,8],[89,6,102,6,"contentStart"],[89,18,102,18],[90,6,103,6,"i"],[90,7,103,7],[91,6,104,6,"indent"],[91,12,104,12],[92,6,105,6,"indentAfterMarker"],[92,23,105,23],[93,6,106,6,"initial"],[93,13,106,13],[94,6,107,6,"isOrdered"],[94,15,107,15],[95,6,108,6,"itemLines"],[95,15,108,15],[96,6,109,6,"l"],[96,7,109,7],[97,6,110,6,"listLines"],[97,15,110,15],[98,6,111,6,"listTokIdx"],[98,16,111,16],[99,6,112,6,"markerCharCode"],[99,20,112,20],[100,6,113,6,"markerValue"],[100,17,113,17],[101,6,114,6,"max"],[101,9,114,9],[102,6,115,6,"nextLine"],[102,14,115,14],[103,6,116,6,"offset"],[103,12,116,12],[104,6,117,6,"oldListIndent"],[104,19,117,19],[105,6,118,6,"oldParentType"],[105,19,118,19],[106,6,119,6,"oldSCount"],[106,15,119,15],[107,6,120,6,"oldTShift"],[107,15,120,15],[108,6,121,6,"oldTight"],[108,14,121,14],[109,6,122,6,"pos"],[109,9,122,9],[110,6,123,6,"posAfterMarker"],[110,20,123,20],[111,6,124,6,"prevEmptyEnd"],[111,18,124,18],[112,6,125,6,"start"],[112,11,125,11],[113,6,126,6,"terminate"],[113,15,126,15],[114,6,127,6,"terminatorRules"],[114,21,127,21],[115,6,128,6,"token"],[115,11,128,11],[116,6,129,6,"isTerminatingParagraph"],[116,28,129,28],[116,31,129,31],[116,36,129,36],[117,6,130,6,"tight"],[117,11,130,11],[117,14,130,14],[117,18,130,18],[119,4,132,2],[120,4,133,2],[120,8,133,6,"state"],[120,13,133,11],[120,14,133,12,"sCount"],[120,20,133,18],[120,21,133,19,"startLine"],[120,30,133,28],[120,31,133,29],[120,34,133,32,"state"],[120,39,133,37],[120,40,133,38,"blkIndent"],[120,49,133,47],[120,53,133,51],[120,54,133,52],[120,56,133,54],[121,6,133,56],[121,13,133,63],[121,18,133,68],[122,4,133,70],[124,4,135,2],[125,4,136,2],[126,4,137,2],[127,4,138,2],[128,4,139,2],[129,4,140,2],[130,4,141,2],[130,8,141,6,"state"],[130,13,141,11],[130,14,141,12,"listIndent"],[130,24,141,22],[130,28,141,26],[130,29,141,27],[130,33,142,6,"state"],[130,38,142,11],[130,39,142,12,"sCount"],[130,45,142,18],[130,46,142,19,"startLine"],[130,55,142,28],[130,56,142,29],[130,59,142,32,"state"],[130,64,142,37],[130,65,142,38,"listIndent"],[130,75,142,48],[130,79,142,52],[130,80,142,53],[130,84,143,6,"state"],[130,89,143,11],[130,90,143,12,"sCount"],[130,96,143,18],[130,97,143,19,"startLine"],[130,106,143,28],[130,107,143,29],[130,110,143,32,"state"],[130,115,143,37],[130,116,143,38,"blkIndent"],[130,125,143,47],[130,127,143,49],[131,6,144,4],[131,13,144,11],[131,18,144,16],[132,4,145,2],[134,4,147,2],[135,4,148,2],[136,4,149,2],[136,8,149,6,"silent"],[136,14,149,12],[136,18,149,16,"state"],[136,23,149,21],[136,24,149,22,"parentType"],[136,34,149,32],[136,39,149,37],[136,50,149,48],[136,52,149,50],[137,6,150,4],[138,6,151,4],[139,6,152,4],[140,6,153,4],[141,6,154,4],[142,6,155,4],[142,10,155,8,"state"],[142,15,155,13],[142,16,155,14,"tShift"],[142,22,155,20],[142,23,155,21,"startLine"],[142,32,155,30],[142,33,155,31],[142,37,155,35,"state"],[142,42,155,40],[142,43,155,41,"blkIndent"],[142,52,155,50],[142,54,155,52],[143,8,156,6,"isTerminatingParagraph"],[143,30,156,28],[143,33,156,31],[143,37,156,35],[144,6,157,4],[145,4,158,2],[147,4,160,2],[148,4,161,2],[148,8,161,6],[148,9,161,7,"posAfterMarker"],[148,23,161,21],[148,26,161,24,"skipOrderedListMarker"],[148,47,161,45],[148,48,161,46,"state"],[148,53,161,51],[148,55,161,53,"startLine"],[148,64,161,62],[148,65,161,63],[148,70,161,68],[148,71,161,69],[148,73,161,71],[149,6,162,4,"isOrdered"],[149,15,162,13],[149,18,162,16],[149,22,162,20],[150,6,163,4,"start"],[150,11,163,9],[150,14,163,12,"state"],[150,19,163,17],[150,20,163,18,"bMarks"],[150,26,163,24],[150,27,163,25,"startLine"],[150,36,163,34],[150,37,163,35],[150,40,163,38,"state"],[150,45,163,43],[150,46,163,44,"tShift"],[150,52,163,50],[150,53,163,51,"startLine"],[150,62,163,60],[150,63,163,61],[151,6,164,4,"markerValue"],[151,17,164,15],[151,20,164,18,"Number"],[151,26,164,24],[151,27,164,25,"state"],[151,32,164,30],[151,33,164,31,"src"],[151,36,164,34],[151,37,164,35,"substr"],[151,43,164,41],[151,44,164,42,"start"],[151,49,164,47],[151,51,164,49,"posAfterMarker"],[151,65,164,63],[151,68,164,66,"start"],[151,73,164,71],[151,76,164,74],[151,77,164,75],[151,78,164,76],[151,79,164,77],[153,6,166,4],[154,6,167,4],[155,6,168,4],[155,10,168,8,"isTerminatingParagraph"],[155,32,168,30],[155,36,168,34,"markerValue"],[155,47,168,45],[155,52,168,50],[155,53,168,51],[155,55,168,53],[155,62,168,60],[155,67,168,65],[156,4,170,2],[156,5,170,3],[156,11,170,9],[156,15,170,13],[156,16,170,14,"posAfterMarker"],[156,30,170,28],[156,33,170,31,"skipBulletListMarker"],[156,53,170,51],[156,54,170,52,"state"],[156,59,170,57],[156,61,170,59,"startLine"],[156,70,170,68],[156,71,170,69],[156,76,170,74],[156,77,170,75],[156,79,170,77],[157,6,171,4,"isOrdered"],[157,15,171,13],[157,18,171,16],[157,23,171,21],[158,4,173,2],[158,5,173,3],[158,11,173,9],[159,6,174,4],[159,13,174,11],[159,18,174,16],[160,4,175,2],[162,4,177,2],[163,4,178,2],[164,4,179,2],[164,8,179,6,"isTerminatingParagraph"],[164,30,179,28],[164,32,179,30],[165,6,180,4],[165,10,180,8,"state"],[165,15,180,13],[165,16,180,14,"skipSpaces"],[165,26,180,24],[165,27,180,25,"posAfterMarker"],[165,41,180,39],[165,42,180,40],[165,46,180,44,"state"],[165,51,180,49],[165,52,180,50,"eMarks"],[165,58,180,56],[165,59,180,57,"startLine"],[165,68,180,66],[165,69,180,67],[165,71,180,69],[165,78,180,76],[165,83,180,81],[166,4,181,2],[168,4,183,2],[169,4,184,2,"markerCharCode"],[169,18,184,16],[169,21,184,19,"state"],[169,26,184,24],[169,27,184,25,"src"],[169,30,184,28],[169,31,184,29,"charCodeAt"],[169,41,184,39],[169,42,184,40,"posAfterMarker"],[169,56,184,54],[169,59,184,57],[169,60,184,58],[169,61,184,59],[171,4,186,2],[172,4,187,2],[172,8,187,6,"silent"],[172,14,187,12],[172,16,187,14],[173,6,187,16],[173,13,187,23],[173,17,187,27],[174,4,187,29],[176,4,189,2],[177,4,190,2,"listTokIdx"],[177,14,190,12],[177,17,190,15,"state"],[177,22,190,20],[177,23,190,21,"tokens"],[177,29,190,27],[177,30,190,28,"length"],[177,36,190,34],[178,4,192,2],[178,8,192,6,"isOrdered"],[178,17,192,15],[178,19,192,17],[179,6,193,4,"token"],[179,11,193,9],[179,14,193,18,"state"],[179,19,193,23],[179,20,193,24,"push"],[179,24,193,28],[179,25,193,29],[179,44,193,48],[179,46,193,50],[179,50,193,54],[179,52,193,56],[179,53,193,57],[179,54,193,58],[180,6,194,4],[180,10,194,8,"markerValue"],[180,21,194,19],[180,26,194,24],[180,27,194,25],[180,29,194,27],[181,8,195,6,"token"],[181,13,195,11],[181,14,195,12,"attrs"],[181,19,195,17],[181,22,195,20],[181,23,195,22],[181,24,195,24],[181,31,195,31],[181,33,195,33,"markerValue"],[181,44,195,44],[181,45,195,46],[181,46,195,48],[182,6,196,4],[183,4,198,2],[183,5,198,3],[183,11,198,9],[184,6,199,4,"token"],[184,11,199,9],[184,14,199,18,"state"],[184,19,199,23],[184,20,199,24,"push"],[184,24,199,28],[184,25,199,29],[184,43,199,47],[184,45,199,49],[184,49,199,53],[184,51,199,55],[184,52,199,56],[184,53,199,57],[185,4,200,2],[186,4,202,2,"token"],[186,9,202,7],[186,10,202,8,"map"],[186,13,202,11],[186,16,202,17,"listLines"],[186,25,202,26],[186,28,202,29],[186,29,202,31,"startLine"],[186,38,202,40],[186,40,202,42],[186,41,202,43],[186,42,202,45],[187,4,203,2,"token"],[187,9,203,7],[187,10,203,8,"markup"],[187,16,203,14],[187,19,203,17,"String"],[187,25,203,23],[187,26,203,24,"fromCharCode"],[187,38,203,36],[187,39,203,37,"markerCharCode"],[187,53,203,51],[187,54,203,52],[189,4,205,2],[190,4,206,2],[191,4,207,2],[193,4,209,2,"nextLine"],[193,12,209,10],[193,15,209,13,"startLine"],[193,24,209,22],[194,4,210,2,"prevEmptyEnd"],[194,16,210,14],[194,19,210,17],[194,24,210,22],[195,4,211,2,"terminatorRules"],[195,19,211,17],[195,22,211,20,"state"],[195,27,211,25],[195,28,211,26,"md"],[195,30,211,28],[195,31,211,29,"block"],[195,36,211,34],[195,37,211,35,"ruler"],[195,42,211,40],[195,43,211,41,"getRules"],[195,51,211,49],[195,52,211,50],[195,58,211,56],[195,59,211,57],[196,4,213,2,"oldParentType"],[196,17,213,15],[196,20,213,18,"state"],[196,25,213,23],[196,26,213,24,"parentType"],[196,36,213,34],[197,4,214,2,"state"],[197,9,214,7],[197,10,214,8,"parentType"],[197,20,214,18],[197,23,214,21],[197,29,214,27],[198,4,216,2],[198,11,216,9,"nextLine"],[198,19,216,17],[198,22,216,20,"endLine"],[198,29,216,27],[198,31,216,29],[199,6,217,4,"pos"],[199,9,217,7],[199,12,217,10,"posAfterMarker"],[199,26,217,24],[200,6,218,4,"max"],[200,9,218,7],[200,12,218,10,"state"],[200,17,218,15],[200,18,218,16,"eMarks"],[200,24,218,22],[200,25,218,23,"nextLine"],[200,33,218,31],[200,34,218,32],[201,6,220,4,"initial"],[201,13,220,11],[201,16,220,14,"offset"],[201,22,220,20],[201,25,220,23,"state"],[201,30,220,28],[201,31,220,29,"sCount"],[201,37,220,35],[201,38,220,36,"nextLine"],[201,46,220,44],[201,47,220,45],[201,50,220,48,"posAfterMarker"],[201,64,220,62],[201,68,220,66,"state"],[201,73,220,71],[201,74,220,72,"bMarks"],[201,80,220,78],[201,81,220,79,"startLine"],[201,90,220,88],[201,91,220,89],[201,94,220,92,"state"],[201,99,220,97],[201,100,220,98,"tShift"],[201,106,220,104],[201,107,220,105,"startLine"],[201,116,220,114],[201,117,220,115],[201,118,220,116],[202,6,222,4],[202,13,222,11,"pos"],[202,16,222,14],[202,19,222,17,"max"],[202,22,222,20],[202,24,222,22],[203,8,223,6,"ch"],[203,10,223,8],[203,13,223,11,"state"],[203,18,223,16],[203,19,223,17,"src"],[203,22,223,20],[203,23,223,21,"charCodeAt"],[203,33,223,31],[203,34,223,32,"pos"],[203,37,223,35],[203,38,223,36],[204,8,225,6],[204,12,225,10,"ch"],[204,14,225,12],[204,19,225,17],[204,23,225,21],[204,25,225,23],[205,10,226,8,"offset"],[205,16,226,14],[205,20,226,18],[205,21,226,19],[205,24,226,22],[205,25,226,23,"offset"],[205,31,226,29],[205,34,226,32,"state"],[205,39,226,37],[205,40,226,38,"bsCount"],[205,47,226,45],[205,48,226,46,"nextLine"],[205,56,226,54],[205,57,226,55],[205,61,226,59],[205,62,226,60],[206,8,227,6],[206,9,227,7],[206,15,227,13],[206,19,227,17,"ch"],[206,21,227,19],[206,26,227,24],[206,30,227,28],[206,32,227,30],[207,10,228,8,"offset"],[207,16,228,14],[207,18,228,16],[208,8,229,6],[208,9,229,7],[208,15,229,13],[209,10,230,8],[210,8,231,6],[211,8,233,6,"pos"],[211,11,233,9],[211,13,233,11],[212,6,234,4],[213,6,236,4,"contentStart"],[213,18,236,16],[213,21,236,19,"pos"],[213,24,236,22],[214,6,238,4],[214,10,238,8,"contentStart"],[214,22,238,20],[214,26,238,24,"max"],[214,29,238,27],[214,31,238,29],[215,8,239,6],[216,8,240,6,"indentAfterMarker"],[216,25,240,23],[216,28,240,26],[216,29,240,27],[217,6,241,4],[217,7,241,5],[217,13,241,11],[218,8,242,6,"indentAfterMarker"],[218,25,242,23],[218,28,242,26,"offset"],[218,34,242,32],[218,37,242,35,"initial"],[218,44,242,42],[219,6,243,4],[221,6,245,4],[222,6,246,4],[223,6,247,4],[223,10,247,8,"indentAfterMarker"],[223,27,247,25],[223,30,247,28],[223,31,247,29],[223,33,247,31],[224,8,247,33,"indentAfterMarker"],[224,25,247,50],[224,28,247,53],[224,29,247,54],[225,6,247,56],[227,6,249,4],[228,6,250,4],[229,6,251,4,"indent"],[229,12,251,10],[229,15,251,13,"initial"],[229,22,251,20],[229,25,251,23,"indentAfterMarker"],[229,42,251,40],[231,6,253,4],[232,6,254,4,"token"],[232,11,254,9],[232,14,254,19,"state"],[232,19,254,24],[232,20,254,25,"push"],[232,24,254,29],[232,25,254,30],[232,41,254,46],[232,43,254,48],[232,47,254,52],[232,49,254,54],[232,50,254,55],[232,51,254,56],[233,6,255,4,"token"],[233,11,255,9],[233,12,255,10,"markup"],[233,18,255,16],[233,21,255,19,"String"],[233,27,255,25],[233,28,255,26,"fromCharCode"],[233,40,255,38],[233,41,255,39,"markerCharCode"],[233,55,255,53],[233,56,255,54],[234,6,256,4,"token"],[234,11,256,9],[234,12,256,10,"map"],[234,15,256,13],[234,18,256,19,"itemLines"],[234,27,256,28],[234,30,256,31],[234,31,256,33,"startLine"],[234,40,256,42],[234,42,256,44],[234,43,256,45],[234,44,256,47],[236,6,258,4],[237,6,259,4,"oldTight"],[237,14,259,12],[237,17,259,15,"state"],[237,22,259,20],[237,23,259,21,"tight"],[237,28,259,26],[238,6,260,4,"oldTShift"],[238,15,260,13],[238,18,260,16,"state"],[238,23,260,21],[238,24,260,22,"tShift"],[238,30,260,28],[238,31,260,29,"startLine"],[238,40,260,38],[238,41,260,39],[239,6,261,4,"oldSCount"],[239,15,261,13],[239,18,261,16,"state"],[239,23,261,21],[239,24,261,22,"sCount"],[239,30,261,28],[239,31,261,29,"startLine"],[239,40,261,38],[239,41,261,39],[241,6,263,4],[242,6,264,4],[243,6,265,4],[244,6,266,4],[245,6,267,4,"oldListIndent"],[245,19,267,17],[245,22,267,20,"state"],[245,27,267,25],[245,28,267,26,"listIndent"],[245,38,267,36],[246,6,268,4,"state"],[246,11,268,9],[246,12,268,10,"listIndent"],[246,22,268,20],[246,25,268,23,"state"],[246,30,268,28],[246,31,268,29,"blkIndent"],[246,40,268,38],[247,6,269,4,"state"],[247,11,269,9],[247,12,269,10,"blkIndent"],[247,21,269,19],[247,24,269,22,"indent"],[247,30,269,28],[248,6,271,4,"state"],[248,11,271,9],[248,12,271,10,"tight"],[248,17,271,15],[248,20,271,18],[248,24,271,22],[249,6,272,4,"state"],[249,11,272,9],[249,12,272,10,"tShift"],[249,18,272,16],[249,19,272,17,"startLine"],[249,28,272,26],[249,29,272,27],[249,32,272,30,"contentStart"],[249,44,272,42],[249,47,272,45,"state"],[249,52,272,50],[249,53,272,51,"bMarks"],[249,59,272,57],[249,60,272,58,"startLine"],[249,69,272,67],[249,70,272,68],[250,6,273,4,"state"],[250,11,273,9],[250,12,273,10,"sCount"],[250,18,273,16],[250,19,273,17,"startLine"],[250,28,273,26],[250,29,273,27],[250,32,273,30,"offset"],[250,38,273,36],[251,6,275,4],[251,10,275,8,"contentStart"],[251,22,275,20],[251,26,275,24,"max"],[251,29,275,27],[251,33,275,31,"state"],[251,38,275,36],[251,39,275,37,"isEmpty"],[251,46,275,44],[251,47,275,45,"startLine"],[251,56,275,54],[251,59,275,57],[251,60,275,58],[251,61,275,59],[251,63,275,61],[252,8,276,6],[253,8,277,6],[254,8,278,6],[255,8,279,6],[256,8,280,6],[257,8,281,6],[258,8,282,6],[259,8,283,6,"state"],[259,13,283,11],[259,14,283,12,"line"],[259,18,283,16],[259,21,283,19,"Math"],[259,25,283,23],[259,26,283,24,"min"],[259,29,283,27],[259,30,283,28,"state"],[259,35,283,33],[259,36,283,34,"line"],[259,40,283,38],[259,43,283,41],[259,44,283,42],[259,46,283,44,"endLine"],[259,53,283,51],[259,54,283,52],[260,6,284,4],[260,7,284,5],[260,13,284,11],[261,8,285,6,"state"],[261,13,285,11],[261,14,285,12,"md"],[261,16,285,14],[261,17,285,15,"block"],[261,22,285,20],[261,23,285,21,"tokenize"],[261,31,285,29],[261,32,285,30,"state"],[261,37,285,35],[261,39,285,37,"startLine"],[261,48,285,46],[261,50,285,48,"endLine"],[261,57,285,55],[261,59,285,57],[261,63,285,61],[261,64,285,62],[262,6,286,4],[264,6,288,4],[265,6,289,4],[265,10,289,8],[265,11,289,9,"state"],[265,16,289,14],[265,17,289,15,"tight"],[265,22,289,20],[265,26,289,24,"prevEmptyEnd"],[265,38,289,36],[265,40,289,38],[266,8,290,6,"tight"],[266,13,290,11],[266,16,290,14],[266,21,290,19],[267,6,291,4],[268,6,292,4],[269,6,293,4],[270,6,294,4,"prevEmptyEnd"],[270,18,294,16],[270,21,294,20,"state"],[270,26,294,25],[270,27,294,26,"line"],[270,31,294,30],[270,34,294,33,"startLine"],[270,43,294,42],[270,46,294,46],[270,47,294,47],[270,51,294,51,"state"],[270,56,294,56],[270,57,294,57,"isEmpty"],[270,64,294,64],[270,65,294,65,"state"],[270,70,294,70],[270,71,294,71,"line"],[270,75,294,75],[270,78,294,78],[270,79,294,79],[270,80,294,80],[271,6,296,4,"state"],[271,11,296,9],[271,12,296,10,"blkIndent"],[271,21,296,19],[271,24,296,22,"state"],[271,29,296,27],[271,30,296,28,"listIndent"],[271,40,296,38],[272,6,297,4,"state"],[272,11,297,9],[272,12,297,10,"listIndent"],[272,22,297,20],[272,25,297,23,"oldListIndent"],[272,38,297,36],[273,6,298,4,"state"],[273,11,298,9],[273,12,298,10,"tShift"],[273,18,298,16],[273,19,298,17,"startLine"],[273,28,298,26],[273,29,298,27],[273,32,298,30,"oldTShift"],[273,41,298,39],[274,6,299,4,"state"],[274,11,299,9],[274,12,299,10,"sCount"],[274,18,299,16],[274,19,299,17,"startLine"],[274,28,299,26],[274,29,299,27],[274,32,299,30,"oldSCount"],[274,41,299,39],[275,6,300,4,"state"],[275,11,300,9],[275,12,300,10,"tight"],[275,17,300,15],[275,20,300,18,"oldTight"],[275,28,300,26],[276,6,302,4,"token"],[276,11,302,9],[276,14,302,19,"state"],[276,19,302,24],[276,20,302,25,"push"],[276,24,302,29],[276,25,302,30],[276,42,302,47],[276,44,302,49],[276,48,302,53],[276,52,302,57],[276,53,302,58],[277,6,303,4,"token"],[277,11,303,9],[277,12,303,10,"markup"],[277,18,303,16],[277,21,303,19,"String"],[277,27,303,25],[277,28,303,26,"fromCharCode"],[277,40,303,38],[277,41,303,39,"markerCharCode"],[277,55,303,53],[277,56,303,54],[278,6,305,4,"nextLine"],[278,14,305,12],[278,17,305,15,"startLine"],[278,26,305,24],[278,29,305,27,"state"],[278,34,305,32],[278,35,305,33,"line"],[278,39,305,37],[279,6,306,4,"itemLines"],[279,15,306,13],[279,16,306,14],[279,17,306,15],[279,18,306,16],[279,21,306,19,"nextLine"],[279,29,306,27],[280,6,307,4,"contentStart"],[280,18,307,16],[280,21,307,19,"state"],[280,26,307,24],[280,27,307,25,"bMarks"],[280,33,307,31],[280,34,307,32,"startLine"],[280,43,307,41],[280,44,307,42],[281,6,309,4],[281,10,309,8,"nextLine"],[281,18,309,16],[281,22,309,20,"endLine"],[281,29,309,27],[281,31,309,29],[282,8,309,31],[283,6,309,38],[285,6,311,4],[286,6,312,4],[287,6,313,4],[288,6,314,4],[288,10,314,8,"state"],[288,15,314,13],[288,16,314,14,"sCount"],[288,22,314,20],[288,23,314,21,"nextLine"],[288,31,314,29],[288,32,314,30],[288,35,314,33,"state"],[288,40,314,38],[288,41,314,39,"blkIndent"],[288,50,314,48],[288,52,314,50],[289,8,314,52],[290,6,314,59],[292,6,316,4],[293,6,317,4],[293,10,317,8,"state"],[293,15,317,13],[293,16,317,14,"sCount"],[293,22,317,20],[293,23,317,21,"startLine"],[293,32,317,30],[293,33,317,31],[293,36,317,34,"state"],[293,41,317,39],[293,42,317,40,"blkIndent"],[293,51,317,49],[293,55,317,53],[293,56,317,54],[293,58,317,56],[294,8,317,58],[295,6,317,65],[297,6,319,4],[298,6,320,4,"terminate"],[298,15,320,13],[298,18,320,16],[298,23,320,21],[299,6,321,4],[299,11,321,9,"i"],[299,12,321,10],[299,15,321,13],[299,16,321,14],[299,18,321,16,"l"],[299,19,321,17],[299,22,321,20,"terminatorRules"],[299,37,321,35],[299,38,321,36,"length"],[299,44,321,42],[299,46,321,44,"i"],[299,47,321,45],[299,50,321,48,"l"],[299,51,321,49],[299,53,321,51,"i"],[299,54,321,52],[299,56,321,54],[299,58,321,56],[300,8,322,6],[300,12,322,10,"terminatorRules"],[300,27,322,25],[300,28,322,26,"i"],[300,29,322,27],[300,30,322,28],[300,31,322,29,"state"],[300,36,322,34],[300,38,322,36,"nextLine"],[300,46,322,44],[300,48,322,46,"endLine"],[300,55,322,53],[300,57,322,55],[300,61,322,59],[300,62,322,60],[300,64,322,62],[301,10,323,8,"terminate"],[301,19,323,17],[301,22,323,20],[301,26,323,24],[302,10,324,8],[303,8,325,6],[304,6,326,4],[305,6,327,4],[305,10,327,8,"terminate"],[305,19,327,17],[305,21,327,19],[306,8,327,21],[307,6,327,28],[309,6,329,4],[310,6,330,4],[310,10,330,8,"isOrdered"],[310,19,330,17],[310,21,330,19],[311,8,331,6,"posAfterMarker"],[311,22,331,20],[311,25,331,23,"skipOrderedListMarker"],[311,46,331,44],[311,47,331,45,"state"],[311,52,331,50],[311,54,331,52,"nextLine"],[311,62,331,60],[311,63,331,61],[312,8,332,6],[312,12,332,10,"posAfterMarker"],[312,26,332,24],[312,29,332,27],[312,30,332,28],[312,32,332,30],[313,10,332,32],[314,8,332,39],[315,6,333,4],[315,7,333,5],[315,13,333,11],[316,8,334,6,"posAfterMarker"],[316,22,334,20],[316,25,334,23,"skipBulletListMarker"],[316,45,334,43],[316,46,334,44,"state"],[316,51,334,49],[316,53,334,51,"nextLine"],[316,61,334,59],[316,62,334,60],[317,8,335,6],[317,12,335,10,"posAfterMarker"],[317,26,335,24],[317,29,335,27],[317,30,335,28],[317,32,335,30],[318,10,335,32],[319,8,335,39],[320,6,336,4],[321,6,338,4],[321,10,338,8,"markerCharCode"],[321,24,338,22],[321,29,338,27,"state"],[321,34,338,32],[321,35,338,33,"src"],[321,38,338,36],[321,39,338,37,"charCodeAt"],[321,49,338,47],[321,50,338,48,"posAfterMarker"],[321,64,338,62],[321,67,338,65],[321,68,338,66],[321,69,338,67],[321,71,338,69],[322,8,338,71],[323,6,338,78],[324,4,339,2],[326,4,341,2],[327,4,342,2],[327,8,342,6,"isOrdered"],[327,17,342,15],[327,19,342,17],[328,6,343,4,"token"],[328,11,343,9],[328,14,343,12,"state"],[328,19,343,17],[328,20,343,18,"push"],[328,24,343,22],[328,25,343,23],[328,45,343,43],[328,47,343,45],[328,51,343,49],[328,55,343,53],[328,56,343,54],[329,4,344,2],[329,5,344,3],[329,11,344,9],[330,6,345,4,"token"],[330,11,345,9],[330,14,345,12,"state"],[330,19,345,17],[330,20,345,18,"push"],[330,24,345,22],[330,25,345,23],[330,44,345,42],[330,46,345,44],[330,50,345,48],[330,54,345,52],[330,55,345,53],[331,4,346,2],[332,4,347,2,"token"],[332,9,347,7],[332,10,347,8,"markup"],[332,16,347,14],[332,19,347,17,"String"],[332,25,347,23],[332,26,347,24,"fromCharCode"],[332,38,347,36],[332,39,347,37,"markerCharCode"],[332,53,347,51],[332,54,347,52],[333,4,349,2,"listLines"],[333,13,349,11],[333,14,349,12],[333,15,349,13],[333,16,349,14],[333,19,349,17,"nextLine"],[333,27,349,25],[334,4,350,2,"state"],[334,9,350,7],[334,10,350,8,"line"],[334,14,350,12],[334,17,350,15,"nextLine"],[334,25,350,23],[335,4,352,2,"state"],[335,9,352,7],[335,10,352,8,"parentType"],[335,20,352,18],[335,23,352,21,"oldParentType"],[335,36,352,34],[337,4,354,2],[338,4,355,2],[338,8,355,6,"tight"],[338,13,355,11],[338,15,355,13],[339,6,356,4,"markTightParagraphs"],[339,25,356,23],[339,26,356,24,"state"],[339,31,356,29],[339,33,356,31,"listTokIdx"],[339,43,356,41],[339,44,356,42],[340,4,357,2],[341,4,359,2],[341,11,359,9],[341,15,359,13],[342,2,360,0],[342,3,360,1],[343,0,360,2],[343,3]],"functionMap":{"names":["<global>","skipBulletListMarker","skipOrderedListMarker","markTightParagraphs","list"],"mappings":"AAA;ACS;CDwB;AEI;CF8C;AGE;CHW;iBIG;CJoQ"},"hasCjsExports":true},"type":"js/module"}]}