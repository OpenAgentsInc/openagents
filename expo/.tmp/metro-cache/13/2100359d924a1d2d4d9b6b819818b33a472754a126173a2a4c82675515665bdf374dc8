{"dependencies":[{"name":"./getRoutesCore","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":24,"index":235},"end":{"line":6,"column":50,"index":261}},{"start":{"line":98,"column":22,"index":4117},"end":{"line":98,"column":48,"index":4143}}],"key":"gOO2v0sl1XvYI6QH2o9IVEEjbmQ=","exportNames":["*"],"imports":2}},{"name":"./views/Navigator","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":27,"column":33,"index":1282},"end":{"line":27,"column":61,"index":1310}}],"key":"PBpeZlMTHxnI1L+/mUlv77sLyo4=","exportNames":["*"],"imports":1}},{"name":"./views/Sitemap","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":41,"column":59,"index":1874},"end":{"line":41,"column":85,"index":1900}}],"key":"G8ud5EPcJ8MF2dMhl1o+nfNHuTs=","exportNames":["*"],"imports":1}},{"name":"./views/Unmatched","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":56,"column":42,"index":2480},"end":{"line":56,"column":70,"index":2508}}],"key":"i1x8xpZw0K+kAMz1gUdMaXw0H74=","exportNames":["*"],"imports":1}},{"name":"./getRoutesRedirects","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":71,"column":31,"index":3113},"end":{"line":71,"column":62,"index":3144}}],"key":"E6xJvmMQ8Tg9oU66GfkFALUrP4w=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.extrapolateGroups = exports.generateDynamic = undefined;\n  exports.getRoutes = getRoutes;\n  exports.getExactRoutes = getExactRoutes;\n  var getRoutesCore_1 = require(_dependencyMap[0]);\n  /**\n   * Given a Metro context module, return an array of nested routes.\n   *\n   * This is a two step process:\n   *  1. Convert the RequireContext keys (file paths) into a directory tree.\n   *      - This should extrapolate array syntax into multiple routes\n   *      - Routes are given a specificity score\n   *  2. Flatten the directory tree into routes\n   *      - Routes in directories without _layout files are hoisted to the nearest _layout\n   *      - The name of the route is relative to the nearest _layout\n   *      - If multiple routes have the same name, the most specific route is used\n   */\n  function getRoutes(contextModule) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return (0, getRoutesCore_1.getRoutes)(contextModule, {\n      getSystemRoute(_ref) {\n        var route = _ref.route,\n          type = _ref.type,\n          defaults = _ref.defaults,\n          redirectConfig = _ref.redirectConfig,\n          rewriteConfig = _ref.rewriteConfig;\n        if (route === '' && type === 'layout') {\n          // Root layout when no layout is defined.\n          return {\n            type: 'layout',\n            loadRoute: () => ({\n              default: require(_dependencyMap[1]).DefaultNavigator\n            }),\n            // Generate a fake file name for the directory\n            contextKey: 'expo-router/build/views/Navigator.js',\n            route: '',\n            generated: true,\n            dynamic: null,\n            children: []\n          };\n        } else if (route === '_sitemap' && type === 'route') {\n          return {\n            loadRoute() {\n              var _require = require(_dependencyMap[2]),\n                Sitemap = _require.Sitemap,\n                getNavOptions = _require.getNavOptions;\n              return {\n                default: Sitemap,\n                getNavOptions\n              };\n            },\n            route: '_sitemap',\n            type: 'route',\n            contextKey: 'expo-router/build/views/Sitemap.js',\n            generated: true,\n            internal: true,\n            dynamic: null,\n            children: []\n          };\n        } else if (route === '+not-found' && type === 'route') {\n          return {\n            loadRoute() {\n              return {\n                default: require(_dependencyMap[3]).Unmatched\n              };\n            },\n            type: 'route',\n            route: '+not-found',\n            contextKey: 'expo-router/build/views/Unmatched.js',\n            generated: true,\n            internal: true,\n            dynamic: [{\n              name: '+not-found',\n              deep: true,\n              notFound: true\n            }],\n            children: []\n          };\n        } else if (type === 'redirect' && redirectConfig && defaults) {\n          return {\n            ...defaults,\n            loadRoute() {\n              return require(_dependencyMap[4]).getRedirectModule(redirectConfig);\n            }\n          };\n        } else if (type === 'rewrite' && rewriteConfig && defaults) {\n          // Rewrite routes only work in a server context and have no equivalent on native or\n          // static exports\n          return {\n            ...defaults,\n            loadRoute() {\n              return {\n                default: contextModule(rewriteConfig.destinationContextKey).default\n              };\n            }\n          };\n        }\n        throw new Error(`Unknown system route: ${route} and type: ${type} and redirectConfig: ${redirectConfig} and rewriteConfig: ${rewriteConfig}`);\n      },\n      ...options\n    });\n  }\n  function getExactRoutes(contextModule) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return getRoutes(contextModule, {\n      ...options,\n      skipGenerated: true\n    });\n  }\n  var getRoutesCore_2 = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"generateDynamic\", {\n    enumerable: true,\n    get: function () {\n      return getRoutesCore_2.generateDynamic;\n    }\n  });\n  Object.defineProperty(exports, \"extrapolateGroups\", {\n    enumerable: true,\n    get: function () {\n      return getRoutesCore_2.extrapolateGroups;\n    }\n  });\n});","lineCount":128,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"extrapolateGroups"],[7,27,3,25],[7,30,3,28,"exports"],[7,37,3,35],[7,38,3,36,"generateDynamic"],[7,53,3,51],[7,56,3,51,"undefined"],[7,65,3,60],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"getRoutes"],[8,19,4,17],[8,22,4,20,"getRoutes"],[8,31,4,29],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"getExactRoutes"],[9,24,5,22],[9,27,5,25,"getExactRoutes"],[9,41,5,39],[10,2,6,0],[10,6,6,6,"getRoutesCore_1"],[10,21,6,21],[10,24,6,24,"require"],[10,31,6,31],[10,32,6,31,"_dependencyMap"],[10,46,6,31],[10,49,6,49],[10,50,6,50],[11,2,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,2,19,0],[23,11,19,9,"getRoutes"],[23,20,19,18,"getRoutes"],[23,21,19,19,"contextModule"],[23,34,19,32],[23,36,19,48],[24,4,19,48],[24,8,19,34,"options"],[24,15,19,41],[24,18,19,41,"arguments"],[24,27,19,41],[24,28,19,41,"length"],[24,34,19,41],[24,42,19,41,"arguments"],[24,51,19,41],[24,59,19,41,"undefined"],[24,68,19,41],[24,71,19,41,"arguments"],[24,80,19,41],[24,86,19,44],[24,87,19,45],[24,88,19,46],[25,4,20,4],[25,11,20,11],[25,12,20,12],[25,13,20,13],[25,15,20,15,"getRoutesCore_1"],[25,30,20,30],[25,31,20,31,"getRoutes"],[25,40,20,40],[25,42,20,42,"contextModule"],[25,55,20,55],[25,57,20,57],[26,6,21,8,"getSystemRoute"],[26,20,21,22,"getSystemRoute"],[26,21,21,22,"_ref"],[26,25,21,22],[26,27,21,81],[27,8,21,81],[27,12,21,25,"route"],[27,17,21,30],[27,20,21,30,"_ref"],[27,24,21,30],[27,25,21,25,"route"],[27,30,21,30],[28,10,21,32,"type"],[28,14,21,36],[28,17,21,36,"_ref"],[28,21,21,36],[28,22,21,32,"type"],[28,26,21,36],[29,10,21,38,"defaults"],[29,18,21,46],[29,21,21,46,"_ref"],[29,25,21,46],[29,26,21,38,"defaults"],[29,34,21,46],[30,10,21,48,"redirectConfig"],[30,24,21,62],[30,27,21,62,"_ref"],[30,31,21,62],[30,32,21,48,"redirectConfig"],[30,46,21,62],[31,10,21,64,"rewriteConfig"],[31,23,21,77],[31,26,21,77,"_ref"],[31,30,21,77],[31,31,21,64,"rewriteConfig"],[31,44,21,77],[32,8,22,12],[32,12,22,16,"route"],[32,17,22,21],[32,22,22,26],[32,24,22,28],[32,28,22,32,"type"],[32,32,22,36],[32,37,22,41],[32,45,22,49],[32,47,22,51],[33,10,23,16],[34,10,24,16],[34,17,24,23],[35,12,25,20,"type"],[35,16,25,24],[35,18,25,26],[35,26,25,34],[36,12,26,20,"loadRoute"],[36,21,26,29],[36,23,26,31,"loadRoute"],[36,24,26,31],[36,30,26,38],[37,14,27,24,"default"],[37,21,27,31],[37,23,27,33,"require"],[37,30,27,40],[37,31,27,40,"_dependencyMap"],[37,45,27,40],[37,48,27,60],[37,49,27,61],[37,50,28,29,"DefaultNavigator"],[38,12,29,20],[38,13,29,21],[38,14,29,22],[39,12,30,20],[40,12,31,20,"contextKey"],[40,22,31,30],[40,24,31,32],[40,62,31,70],[41,12,32,20,"route"],[41,17,32,25],[41,19,32,27],[41,21,32,29],[42,12,33,20,"generated"],[42,21,33,29],[42,23,33,31],[42,27,33,35],[43,12,34,20,"dynamic"],[43,19,34,27],[43,21,34,29],[43,25,34,33],[44,12,35,20,"children"],[44,20,35,28],[44,22,35,30],[45,10,36,16],[45,11,36,17],[46,8,37,12],[46,9,37,13],[46,15,38,17],[46,19,38,21,"route"],[46,24,38,26],[46,29,38,31],[46,39,38,41],[46,43,38,45,"type"],[46,47,38,49],[46,52,38,54],[46,59,38,61],[46,61,38,63],[47,10,39,16],[47,17,39,23],[48,12,40,20,"loadRoute"],[48,21,40,29,"loadRoute"],[48,22,40,29],[48,24,40,32],[49,14,41,24],[49,18,41,24,"_require"],[49,26,41,24],[49,29,41,59,"require"],[49,36,41,66],[49,37,41,66,"_dependencyMap"],[49,51,41,66],[49,54,41,84],[49,55,41,85],[50,16,41,32,"Sitemap"],[50,23,41,39],[50,26,41,39,"_require"],[50,34,41,39],[50,35,41,32,"Sitemap"],[50,42,41,39],[51,16,41,41,"getNavOptions"],[51,29,41,54],[51,32,41,54,"_require"],[51,40,41,54],[51,41,41,41,"getNavOptions"],[51,54,41,54],[52,14,42,24],[52,21,42,31],[53,16,42,33,"default"],[53,23,42,40],[53,25,42,42,"Sitemap"],[53,32,42,49],[54,16,42,51,"getNavOptions"],[55,14,42,65],[55,15,42,66],[56,12,43,20],[56,13,43,21],[57,12,44,20,"route"],[57,17,44,25],[57,19,44,27],[57,29,44,37],[58,12,45,20,"type"],[58,16,45,24],[58,18,45,26],[58,25,45,33],[59,12,46,20,"contextKey"],[59,22,46,30],[59,24,46,32],[59,60,46,68],[60,12,47,20,"generated"],[60,21,47,29],[60,23,47,31],[60,27,47,35],[61,12,48,20,"internal"],[61,20,48,28],[61,22,48,30],[61,26,48,34],[62,12,49,20,"dynamic"],[62,19,49,27],[62,21,49,29],[62,25,49,33],[63,12,50,20,"children"],[63,20,50,28],[63,22,50,30],[64,10,51,16],[64,11,51,17],[65,8,52,12],[65,9,52,13],[65,15,53,17],[65,19,53,21,"route"],[65,24,53,26],[65,29,53,31],[65,41,53,43],[65,45,53,47,"type"],[65,49,53,51],[65,54,53,56],[65,61,53,63],[65,63,53,65],[66,10,54,16],[66,17,54,23],[67,12,55,20,"loadRoute"],[67,21,55,29,"loadRoute"],[67,22,55,29],[67,24,55,32],[68,14,56,24],[68,21,56,31],[69,16,56,33,"default"],[69,23,56,40],[69,25,56,42,"require"],[69,32,56,49],[69,33,56,49,"_dependencyMap"],[69,47,56,49],[69,50,56,69],[69,51,56,70],[69,52,56,71,"Unmatched"],[70,14,56,81],[70,15,56,82],[71,12,57,20],[71,13,57,21],[72,12,58,20,"type"],[72,16,58,24],[72,18,58,26],[72,25,58,33],[73,12,59,20,"route"],[73,17,59,25],[73,19,59,27],[73,31,59,39],[74,12,60,20,"contextKey"],[74,22,60,30],[74,24,60,32],[74,62,60,70],[75,12,61,20,"generated"],[75,21,61,29],[75,23,61,31],[75,27,61,35],[76,12,62,20,"internal"],[76,20,62,28],[76,22,62,30],[76,26,62,34],[77,12,63,20,"dynamic"],[77,19,63,27],[77,21,63,29],[77,22,63,30],[78,14,63,32,"name"],[78,18,63,36],[78,20,63,38],[78,32,63,50],[79,14,63,52,"deep"],[79,18,63,56],[79,20,63,58],[79,24,63,62],[80,14,63,64,"notFound"],[80,22,63,72],[80,24,63,74],[81,12,63,79],[81,13,63,80],[81,14,63,81],[82,12,64,20,"children"],[82,20,64,28],[82,22,64,30],[83,10,65,16],[83,11,65,17],[84,8,66,12],[84,9,66,13],[84,15,67,17],[84,19,67,21,"type"],[84,23,67,25],[84,28,67,30],[84,38,67,40],[84,42,67,44,"redirectConfig"],[84,56,67,58],[84,60,67,62,"defaults"],[84,68,67,70],[84,70,67,72],[85,10,68,16],[85,17,68,23],[86,12,69,20],[86,15,69,23,"defaults"],[86,23,69,31],[87,12,70,20,"loadRoute"],[87,21,70,29,"loadRoute"],[87,22,70,29],[87,24,70,32],[88,14,71,24],[88,21,71,31,"require"],[88,28,71,38],[88,29,71,38,"_dependencyMap"],[88,43,71,38],[88,46,71,61],[88,47,71,62],[88,48,71,63,"getRedirectModule"],[88,65,71,80],[88,66,71,81,"redirectConfig"],[88,80,71,95],[88,81,71,96],[89,12,72,20],[90,10,73,16],[90,11,73,17],[91,8,74,12],[91,9,74,13],[91,15,75,17],[91,19,75,21,"type"],[91,23,75,25],[91,28,75,30],[91,37,75,39],[91,41,75,43,"rewriteConfig"],[91,54,75,56],[91,58,75,60,"defaults"],[91,66,75,68],[91,68,75,70],[92,10,76,16],[93,10,77,16],[94,10,78,16],[94,17,78,23],[95,12,79,20],[95,15,79,23,"defaults"],[95,23,79,31],[96,12,80,20,"loadRoute"],[96,21,80,29,"loadRoute"],[96,22,80,29],[96,24,80,32],[97,14,81,24],[97,21,81,31],[98,16,82,28,"default"],[98,23,82,35],[98,25,82,37,"contextModule"],[98,38,82,50],[98,39,82,51,"rewriteConfig"],[98,52,82,64],[98,53,82,65,"destinationContextKey"],[98,74,82,86],[98,75,82,87],[98,76,82,88,"default"],[99,14,83,24],[99,15,83,25],[100,12,84,20],[101,10,85,16],[101,11,85,17],[102,8,86,12],[103,8,87,12],[103,14,87,18],[103,18,87,22,"Error"],[103,23,87,27],[103,24,87,28],[103,49,87,53,"route"],[103,54,87,58],[103,68,87,72,"type"],[103,72,87,76],[103,96,87,100,"redirectConfig"],[103,110,87,114],[103,133,87,137,"rewriteConfig"],[103,146,87,150],[103,148,87,152],[103,149,87,153],[104,6,88,8],[104,7,88,9],[105,6,89,8],[105,9,89,11,"options"],[106,4,90,4],[106,5,90,5],[106,6,90,6],[107,2,91,0],[108,2,92,0],[108,11,92,9,"getExactRoutes"],[108,25,92,23,"getExactRoutes"],[108,26,92,24,"contextModule"],[108,39,92,37],[108,41,92,53],[109,4,92,53],[109,8,92,39,"options"],[109,15,92,46],[109,18,92,46,"arguments"],[109,27,92,46],[109,28,92,46,"length"],[109,34,92,46],[109,42,92,46,"arguments"],[109,51,92,46],[109,59,92,46,"undefined"],[109,68,92,46],[109,71,92,46,"arguments"],[109,80,92,46],[109,86,92,49],[109,87,92,50],[109,88,92,51],[110,4,93,4],[110,11,93,11,"getRoutes"],[110,20,93,20],[110,21,93,21,"contextModule"],[110,34,93,34],[110,36,93,36],[111,6,94,8],[111,9,94,11,"options"],[111,16,94,18],[112,6,95,8,"skipGenerated"],[112,19,95,21],[112,21,95,23],[113,4,96,4],[113,5,96,5],[113,6,96,6],[114,2,97,0],[115,2,98,0],[115,6,98,4,"getRoutesCore_2"],[115,21,98,19],[115,24,98,22,"require"],[115,31,98,29],[115,32,98,29,"_dependencyMap"],[115,46,98,29],[115,49,98,47],[115,50,98,48],[116,2,99,0,"Object"],[116,8,99,6],[116,9,99,7,"defineProperty"],[116,23,99,21],[116,24,99,22,"exports"],[116,31,99,29],[116,33,99,31],[116,50,99,48],[116,52,99,50],[117,4,99,52,"enumerable"],[117,14,99,62],[117,16,99,64],[117,20,99,68],[118,4,99,70,"get"],[118,7,99,73],[118,9,99,75],[118,18,99,75,"get"],[118,19,99,75],[118,21,99,87],[119,6,99,89],[119,13,99,96,"getRoutesCore_2"],[119,28,99,111],[119,29,99,112,"generateDynamic"],[119,44,99,127],[120,4,99,129],[121,2,99,131],[121,3,99,132],[121,4,99,133],[122,2,100,0,"Object"],[122,8,100,6],[122,9,100,7,"defineProperty"],[122,23,100,21],[122,24,100,22,"exports"],[122,31,100,29],[122,33,100,31],[122,52,100,50],[122,54,100,52],[123,4,100,54,"enumerable"],[123,14,100,64],[123,16,100,66],[123,20,100,70],[124,4,100,72,"get"],[124,7,100,75],[124,9,100,77],[124,18,100,77,"get"],[124,19,100,77],[124,21,100,89],[125,6,100,91],[125,13,100,98,"getRoutesCore_2"],[125,28,100,113],[125,29,100,114,"extrapolateGroups"],[125,46,100,131],[126,4,100,133],[127,2,100,135],[127,3,100,136],[127,4,100,137],[128,0,100,138],[128,3]],"functionMap":{"names":["<global>","getRoutes","getSystemRoute","loadRoute","getExactRoutes","Object.defineProperty$argument_2.get"],"mappings":"AAA;ACkB;QCE;+BCK;sBDG;oBCW;qBDG;oBCY;qBDE;oBCa;qBDE;oBCQ;qBDI;SDI;CDG;AIC;CJK;2EKE,uDL;6EKC,yDL"},"hasCjsExports":true},"type":"js/module"}]}