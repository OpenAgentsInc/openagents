{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /**\n   * Parse a path into an array of parts with information about each segment.\n   */\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.getPatternParts = getPatternParts;\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0]);\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  function getPatternParts(path) {\n    var parts = [];\n    var current = {\n      segment: ''\n    };\n    var isRegex = false;\n    var isParam = false;\n    var regexInnerParens = 0;\n\n    // One extra iteration to add the last character\n    for (var i = 0; i <= path.length; i++) {\n      var char = path[i];\n      if (char != null) {\n        current.segment += char;\n      }\n      if (char === ':') {\n        // The segment must start with a colon if it's a param\n        if (current.segment === ':') {\n          isParam = true;\n        } else if (!isRegex) {\n          throw new Error(`Encountered ':' in the middle of a segment in path: ${path}`);\n        }\n      } else if (char === '(') {\n        if (isParam) {\n          if (isRegex) {\n            // The '(' is part of the regex if we're already inside one\n            regexInnerParens++;\n          } else {\n            isRegex = true;\n          }\n        } else {\n          throw new Error(`Encountered '(' without preceding ':' in path: ${path}`);\n        }\n      } else if (char === ')') {\n        if (isParam && isRegex) {\n          if (regexInnerParens) {\n            // The ')' is part of the regex if we're already inside one\n            regexInnerParens--;\n            current.regex += char;\n          } else {\n            isRegex = false;\n            isParam = false;\n          }\n        } else {\n          throw new Error(`Encountered ')' without preceding '(' in path: ${path}`);\n        }\n      } else if (char === '?') {\n        if (current.param) {\n          isParam = false;\n          current.optional = true;\n        } else {\n          throw new Error(`Encountered '?' without preceding ':' in path: ${path}`);\n        }\n      } else if (char == null || char === '/' && !isRegex) {\n        isParam = false;\n\n        // Remove trailing slash from segment\n        current.segment = current.segment.replace(/\\/$/, '');\n        if (current.segment === '') {\n          continue;\n        }\n        if (current.param) {\n          current.param = current.param.replace(/^:/, '');\n        }\n        if (current.regex) {\n          current.regex = current.regex.replace(/^\\(/, '').replace(/\\)$/, '');\n        }\n        parts.push(current);\n        if (char == null) {\n          break;\n        }\n        current = {\n          segment: ''\n        };\n      }\n      if (isRegex) {\n        current.regex = current.regex || '';\n        current.regex += char;\n      }\n      if (isParam && !isRegex) {\n        current.param = current.param || '';\n        current.param += char;\n      }\n    }\n    if (isRegex) {\n      throw new Error(`Could not find closing ')' in path: ${path}`);\n    }\n    var params = parts.map(part => part.param).filter(Boolean);\n    for (var _ref of params.entries()) {\n      var _ref2 = (0, _slicedToArray.default)(_ref, 2);\n      var index = _ref2[0];\n      var param = _ref2[1];\n      if (params.indexOf(param) !== index) {\n        throw new Error(`Duplicate param name '${param}' found in path: ${path}`);\n      }\n    }\n    return parts;\n  }\n});","lineCount":116,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,0,4,0],[6,0,5,0],[7,2,3,0,"Object"],[7,8,3,0],[7,9,3,0,"defineProperty"],[7,23,3,0],[7,24,3,0,"exports"],[7,31,3,0],[8,4,3,0,"value"],[8,9,3,0],[9,2,3,0],[10,2,3,0],[10,11,3,0,"_interopDefault"],[10,27,3,0,"e"],[10,28,3,0],[11,4,3,0],[11,11,3,0,"e"],[11,12,3,0],[11,16,3,0,"e"],[11,17,3,0],[11,18,3,0,"__esModule"],[11,28,3,0],[11,31,3,0,"e"],[11,32,3,0],[12,6,3,0,"default"],[12,13,3,0],[12,15,3,0,"e"],[13,4,3,0],[14,2,3,0],[15,2,6,0,"exports"],[15,9,6,0],[15,10,6,0,"getPatternParts"],[15,25,6,0],[15,28,6,0,"getPatternParts"],[15,43,6,0],[16,2,100,1],[16,6,100,1,"_babelRuntimeHelpersSlicedToArray"],[16,39,100,1],[16,42,100,1,"require"],[16,49,100,1],[16,50,100,1,"_dependencyMap"],[16,64,100,1],[17,2,100,1],[17,6,100,1,"_slicedToArray"],[17,20,100,1],[17,23,100,1,"_interopDefault"],[17,38,100,1],[17,39,100,1,"_babelRuntimeHelpersSlicedToArray"],[17,72,100,1],[18,2,6,7],[18,11,6,16,"getPatternParts"],[18,26,6,31,"getPatternParts"],[18,27,6,32,"path"],[18,31,6,36],[18,33,6,38],[19,4,7,2],[19,8,7,8,"parts"],[19,13,7,13],[19,16,7,16],[19,18,7,18],[20,4,8,2],[20,8,8,6,"current"],[20,15,8,13],[20,18,8,16],[21,6,9,4,"segment"],[21,13,9,11],[21,15,9,13],[22,4,10,2],[22,5,10,3],[23,4,11,2],[23,8,11,6,"isRegex"],[23,15,11,13],[23,18,11,16],[23,23,11,21],[24,4,12,2],[24,8,12,6,"isParam"],[24,15,12,13],[24,18,12,16],[24,23,12,21],[25,4,13,2],[25,8,13,6,"regexInnerParens"],[25,24,13,22],[25,27,13,25],[25,28,13,26],[27,4,15,2],[28,4,16,2],[28,9,16,7],[28,13,16,11,"i"],[28,14,16,12],[28,17,16,15],[28,18,16,16],[28,20,16,18,"i"],[28,21,16,19],[28,25,16,23,"path"],[28,29,16,27],[28,30,16,28,"length"],[28,36,16,34],[28,38,16,36,"i"],[28,39,16,37],[28,41,16,39],[28,43,16,41],[29,6,17,4],[29,10,17,10,"char"],[29,14,17,14],[29,17,17,17,"path"],[29,21,17,21],[29,22,17,22,"i"],[29,23,17,23],[29,24,17,24],[30,6,18,4],[30,10,18,8,"char"],[30,14,18,12],[30,18,18,16],[30,22,18,20],[30,24,18,22],[31,8,19,6,"current"],[31,15,19,13],[31,16,19,14,"segment"],[31,23,19,21],[31,27,19,25,"char"],[31,31,19,29],[32,6,20,4],[33,6,21,4],[33,10,21,8,"char"],[33,14,21,12],[33,19,21,17],[33,22,21,20],[33,24,21,22],[34,8,22,6],[35,8,23,6],[35,12,23,10,"current"],[35,19,23,17],[35,20,23,18,"segment"],[35,27,23,25],[35,32,23,30],[35,35,23,33],[35,37,23,35],[36,10,24,8,"isParam"],[36,17,24,15],[36,20,24,18],[36,24,24,22],[37,8,25,6],[37,9,25,7],[37,15,25,13],[37,19,25,17],[37,20,25,18,"isRegex"],[37,27,25,25],[37,29,25,27],[38,10,26,8],[38,16,26,14],[38,20,26,18,"Error"],[38,25,26,23],[38,26,26,24],[38,81,26,79,"path"],[38,85,26,83],[38,87,26,85],[38,88,26,86],[39,8,27,6],[40,6,28,4],[40,7,28,5],[40,13,28,11],[40,17,28,15,"char"],[40,21,28,19],[40,26,28,24],[40,29,28,27],[40,31,28,29],[41,8,29,6],[41,12,29,10,"isParam"],[41,19,29,17],[41,21,29,19],[42,10,30,8],[42,14,30,12,"isRegex"],[42,21,30,19],[42,23,30,21],[43,12,31,10],[44,12,32,10,"regexInnerParens"],[44,28,32,26],[44,30,32,28],[45,10,33,8],[45,11,33,9],[45,17,33,15],[46,12,34,10,"isRegex"],[46,19,34,17],[46,22,34,20],[46,26,34,24],[47,10,35,8],[48,8,36,6],[48,9,36,7],[48,15,36,13],[49,10,37,8],[49,16,37,14],[49,20,37,18,"Error"],[49,25,37,23],[49,26,37,24],[49,76,37,74,"path"],[49,80,37,78],[49,82,37,80],[49,83,37,81],[50,8,38,6],[51,6,39,4],[51,7,39,5],[51,13,39,11],[51,17,39,15,"char"],[51,21,39,19],[51,26,39,24],[51,29,39,27],[51,31,39,29],[52,8,40,6],[52,12,40,10,"isParam"],[52,19,40,17],[52,23,40,21,"isRegex"],[52,30,40,28],[52,32,40,30],[53,10,41,8],[53,14,41,12,"regexInnerParens"],[53,30,41,28],[53,32,41,30],[54,12,42,10],[55,12,43,10,"regexInnerParens"],[55,28,43,26],[55,30,43,28],[56,12,44,10,"current"],[56,19,44,17],[56,20,44,18,"regex"],[56,25,44,23],[56,29,44,27,"char"],[56,33,44,31],[57,10,45,8],[57,11,45,9],[57,17,45,15],[58,12,46,10,"isRegex"],[58,19,46,17],[58,22,46,20],[58,27,46,25],[59,12,47,10,"isParam"],[59,19,47,17],[59,22,47,20],[59,27,47,25],[60,10,48,8],[61,8,49,6],[61,9,49,7],[61,15,49,13],[62,10,50,8],[62,16,50,14],[62,20,50,18,"Error"],[62,25,50,23],[62,26,50,24],[62,76,50,74,"path"],[62,80,50,78],[62,82,50,80],[62,83,50,81],[63,8,51,6],[64,6,52,4],[64,7,52,5],[64,13,52,11],[64,17,52,15,"char"],[64,21,52,19],[64,26,52,24],[64,29,52,27],[64,31,52,29],[65,8,53,6],[65,12,53,10,"current"],[65,19,53,17],[65,20,53,18,"param"],[65,25,53,23],[65,27,53,25],[66,10,54,8,"isParam"],[66,17,54,15],[66,20,54,18],[66,25,54,23],[67,10,55,8,"current"],[67,17,55,15],[67,18,55,16,"optional"],[67,26,55,24],[67,29,55,27],[67,33,55,31],[68,8,56,6],[68,9,56,7],[68,15,56,13],[69,10,57,8],[69,16,57,14],[69,20,57,18,"Error"],[69,25,57,23],[69,26,57,24],[69,76,57,74,"path"],[69,80,57,78],[69,82,57,80],[69,83,57,81],[70,8,58,6],[71,6,59,4],[71,7,59,5],[71,13,59,11],[71,17,59,15,"char"],[71,21,59,19],[71,25,59,23],[71,29,59,27],[71,33,59,31,"char"],[71,37,59,35],[71,42,59,40],[71,45,59,43],[71,49,59,47],[71,50,59,48,"isRegex"],[71,57,59,55],[71,59,59,57],[72,8,60,6,"isParam"],[72,15,60,13],[72,18,60,16],[72,23,60,21],[74,8,62,6],[75,8,63,6,"current"],[75,15,63,13],[75,16,63,14,"segment"],[75,23,63,21],[75,26,63,24,"current"],[75,33,63,31],[75,34,63,32,"segment"],[75,41,63,39],[75,42,63,40,"replace"],[75,49,63,47],[75,50,63,48],[75,55,63,53],[75,57,63,55],[75,59,63,57],[75,60,63,58],[76,8,64,6],[76,12,64,10,"current"],[76,19,64,17],[76,20,64,18,"segment"],[76,27,64,25],[76,32,64,30],[76,34,64,32],[76,36,64,34],[77,10,65,8],[78,8,66,6],[79,8,67,6],[79,12,67,10,"current"],[79,19,67,17],[79,20,67,18,"param"],[79,25,67,23],[79,27,67,25],[80,10,68,8,"current"],[80,17,68,15],[80,18,68,16,"param"],[80,23,68,21],[80,26,68,24,"current"],[80,33,68,31],[80,34,68,32,"param"],[80,39,68,37],[80,40,68,38,"replace"],[80,47,68,45],[80,48,68,46],[80,52,68,50],[80,54,68,52],[80,56,68,54],[80,57,68,55],[81,8,69,6],[82,8,70,6],[82,12,70,10,"current"],[82,19,70,17],[82,20,70,18,"regex"],[82,25,70,23],[82,27,70,25],[83,10,71,8,"current"],[83,17,71,15],[83,18,71,16,"regex"],[83,23,71,21],[83,26,71,24,"current"],[83,33,71,31],[83,34,71,32,"regex"],[83,39,71,37],[83,40,71,38,"replace"],[83,47,71,45],[83,48,71,46],[83,53,71,51],[83,55,71,53],[83,57,71,55],[83,58,71,56],[83,59,71,57,"replace"],[83,66,71,64],[83,67,71,65],[83,72,71,70],[83,74,71,72],[83,76,71,74],[83,77,71,75],[84,8,72,6],[85,8,73,6,"parts"],[85,13,73,11],[85,14,73,12,"push"],[85,18,73,16],[85,19,73,17,"current"],[85,26,73,24],[85,27,73,25],[86,8,74,6],[86,12,74,10,"char"],[86,16,74,14],[86,20,74,18],[86,24,74,22],[86,26,74,24],[87,10,75,8],[88,8,76,6],[89,8,77,6,"current"],[89,15,77,13],[89,18,77,16],[90,10,78,8,"segment"],[90,17,78,15],[90,19,78,17],[91,8,79,6],[91,9,79,7],[92,6,80,4],[93,6,81,4],[93,10,81,8,"isRegex"],[93,17,81,15],[93,19,81,17],[94,8,82,6,"current"],[94,15,82,13],[94,16,82,14,"regex"],[94,21,82,19],[94,24,82,22,"current"],[94,31,82,29],[94,32,82,30,"regex"],[94,37,82,35],[94,41,82,39],[94,43,82,41],[95,8,83,6,"current"],[95,15,83,13],[95,16,83,14,"regex"],[95,21,83,19],[95,25,83,23,"char"],[95,29,83,27],[96,6,84,4],[97,6,85,4],[97,10,85,8,"isParam"],[97,17,85,15],[97,21,85,19],[97,22,85,20,"isRegex"],[97,29,85,27],[97,31,85,29],[98,8,86,6,"current"],[98,15,86,13],[98,16,86,14,"param"],[98,21,86,19],[98,24,86,22,"current"],[98,31,86,29],[98,32,86,30,"param"],[98,37,86,35],[98,41,86,39],[98,43,86,41],[99,8,87,6,"current"],[99,15,87,13],[99,16,87,14,"param"],[99,21,87,19],[99,25,87,23,"char"],[99,29,87,27],[100,6,88,4],[101,4,89,2],[102,4,90,2],[102,8,90,6,"isRegex"],[102,15,90,13],[102,17,90,15],[103,6,91,4],[103,12,91,10],[103,16,91,14,"Error"],[103,21,91,19],[103,22,91,20],[103,61,91,59,"path"],[103,65,91,63],[103,67,91,65],[103,68,91,66],[104,4,92,2],[105,4,93,2],[105,8,93,8,"params"],[105,14,93,14],[105,17,93,17,"parts"],[105,22,93,22],[105,23,93,23,"map"],[105,26,93,26],[105,27,93,27,"part"],[105,31,93,31],[105,35,93,35,"part"],[105,39,93,39],[105,40,93,40,"param"],[105,45,93,45],[105,46,93,46],[105,47,93,47,"filter"],[105,53,93,53],[105,54,93,54,"Boolean"],[105,61,93,61],[105,62,93,62],[106,4,94,2],[106,13,94,2,"_ref"],[106,17,94,2],[106,21,94,31,"params"],[106,27,94,37],[106,28,94,38,"entries"],[106,35,94,45],[106,36,94,46],[106,37,94,47],[106,39,94,49],[107,6,94,49],[107,10,94,49,"_ref2"],[107,15,94,49],[107,22,94,49,"_slicedToArray"],[107,36,94,49],[107,37,94,49,"default"],[107,44,94,49],[107,46,94,49,"_ref"],[107,50,94,49],[108,6,94,49],[108,10,94,14,"index"],[108,15,94,19],[108,18,94,19,"_ref2"],[108,23,94,19],[109,6,94,19],[109,10,94,21,"param"],[109,15,94,26],[109,18,94,26,"_ref2"],[109,23,94,26],[110,6,95,4],[110,10,95,8,"params"],[110,16,95,14],[110,17,95,15,"indexOf"],[110,24,95,22],[110,25,95,23,"param"],[110,30,95,28],[110,31,95,29],[110,36,95,34,"index"],[110,41,95,39],[110,43,95,41],[111,8,96,6],[111,14,96,12],[111,18,96,16,"Error"],[111,23,96,21],[111,24,96,22],[111,49,96,47,"param"],[111,54,96,52],[111,74,96,72,"path"],[111,78,96,76],[111,80,96,78],[111,81,96,79],[112,6,97,4],[113,4,98,2],[114,4,99,2],[114,11,99,9,"parts"],[114,16,99,14],[115,2,100,0],[116,0,100,1],[116,3]],"functionMap":{"names":["<global>","getPatternParts","parts.map$argument_0"],"mappings":"AAA;OCK;2BCuF,kBD;CDO"},"hasCjsExports":false},"type":"js/module"}]}