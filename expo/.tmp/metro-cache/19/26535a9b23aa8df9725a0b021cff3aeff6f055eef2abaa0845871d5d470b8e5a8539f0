{"dependencies":[{"name":"../token","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":21,"index":61},"end":{"line":6,"column":40,"index":80}}],"key":"EVAg+/mtaenO5+kIpcn+ZhqLr/E=","exportNames":["*"],"imports":1}},{"name":"../common/utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":21,"index":103},"end":{"line":7,"column":47,"index":129}},{"start":{"line":8,"column":21,"index":165},"end":{"line":8,"column":47,"index":191}},{"start":{"line":9,"column":21,"index":226},"end":{"line":9,"column":47,"index":252}}],"key":"s68H+Qrc8so5XeN472FI/1YNbEY=","exportNames":["*"],"imports":3}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // Inline parser state\n\n  'use strict';\n\n  var Token = require(_dependencyMap[0]);\n  var isWhiteSpace = require(_dependencyMap[1]).isWhiteSpace;\n  var isPunctChar = require(_dependencyMap[1]).isPunctChar;\n  var isMdAsciiPunct = require(_dependencyMap[1]).isMdAsciiPunct;\n  function StateInline(src, md, env, outTokens) {\n    this.src = src;\n    this.env = env;\n    this.md = md;\n    this.tokens = outTokens;\n    this.tokens_meta = Array(outTokens.length);\n    this.pos = 0;\n    this.posMax = this.src.length;\n    this.level = 0;\n    this.pending = '';\n    this.pendingLevel = 0;\n\n    // Stores { start: end } pairs. Useful for backtrack\n    // optimization of pairs parse (emphasis, strikes).\n    this.cache = {};\n\n    // List of emphasis-like delimiters for current tag\n    this.delimiters = [];\n\n    // Stack of delimiter lists for upper level tags\n    this._prev_delimiters = [];\n  }\n\n  // Flush pending text\n  //\n  StateInline.prototype.pushPending = function () {\n    var token = new Token('text', '', 0);\n    token.content = this.pending;\n    token.level = this.pendingLevel;\n    this.tokens.push(token);\n    this.pending = '';\n    return token;\n  };\n\n  // Push new token to \"stream\".\n  // If pending text exists - flush it as text token\n  //\n  StateInline.prototype.push = function (type, tag, nesting) {\n    if (this.pending) {\n      this.pushPending();\n    }\n    var token = new Token(type, tag, nesting);\n    var token_meta = null;\n    if (nesting < 0) {\n      // closing tag\n      this.level--;\n      this.delimiters = this._prev_delimiters.pop();\n    }\n    token.level = this.level;\n    if (nesting > 0) {\n      // opening tag\n      this.level++;\n      this._prev_delimiters.push(this.delimiters);\n      this.delimiters = [];\n      token_meta = {\n        delimiters: this.delimiters\n      };\n    }\n    this.pendingLevel = this.level;\n    this.tokens.push(token);\n    this.tokens_meta.push(token_meta);\n    return token;\n  };\n\n  // Scan a sequence of emphasis-like markers, and determine whether\n  // it can start an emphasis sequence or end an emphasis sequence.\n  //\n  //  - start - position to scan from (it should point at a valid marker);\n  //  - canSplitWord - determine if these markers can be found inside a word\n  //\n  StateInline.prototype.scanDelims = function (start, canSplitWord) {\n    var pos = start,\n      lastChar,\n      nextChar,\n      count,\n      can_open,\n      can_close,\n      isLastWhiteSpace,\n      isLastPunctChar,\n      isNextWhiteSpace,\n      isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n    // treat beginning of the line as a whitespace\n    lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n    while (pos < max && this.src.charCodeAt(pos) === marker) {\n      pos++;\n    }\n    count = pos - start;\n\n    // treat end of the line as a whitespace\n    nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n    isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n    isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n    isLastWhiteSpace = isWhiteSpace(lastChar);\n    isNextWhiteSpace = isWhiteSpace(nextChar);\n    if (isNextWhiteSpace) {\n      left_flanking = false;\n    } else if (isNextPunctChar) {\n      if (!(isLastWhiteSpace || isLastPunctChar)) {\n        left_flanking = false;\n      }\n    }\n    if (isLastWhiteSpace) {\n      right_flanking = false;\n    } else if (isLastPunctChar) {\n      if (!(isNextWhiteSpace || isNextPunctChar)) {\n        right_flanking = false;\n      }\n    }\n    if (!canSplitWord) {\n      can_open = left_flanking && (!right_flanking || isLastPunctChar);\n      can_close = right_flanking && (!left_flanking || isNextPunctChar);\n    } else {\n      can_open = left_flanking;\n      can_close = right_flanking;\n    }\n    return {\n      can_open: can_open,\n      can_close: can_close,\n      length: count\n    };\n  };\n\n  // re-export Token class to use in block rules\n  StateInline.prototype.Token = Token;\n  module.exports = StateInline;\n});","lineCount":140,"map":[[2,2,1,0],[4,2,3,0],[4,14,3,12],[6,2,6,0],[6,6,6,4,"Token"],[6,11,6,9],[6,14,6,21,"require"],[6,21,6,28],[6,22,6,28,"_dependencyMap"],[6,36,6,28],[6,39,6,39],[6,40,6,40],[7,2,7,0],[7,6,7,4,"isWhiteSpace"],[7,18,7,16],[7,21,7,21,"require"],[7,28,7,28],[7,29,7,28,"_dependencyMap"],[7,43,7,28],[7,46,7,46],[7,47,7,47],[7,48,7,48,"isWhiteSpace"],[7,60,7,60],[8,2,8,0],[8,6,8,4,"isPunctChar"],[8,17,8,15],[8,20,8,21,"require"],[8,27,8,28],[8,28,8,28,"_dependencyMap"],[8,42,8,28],[8,45,8,46],[8,46,8,47],[8,47,8,48,"isPunctChar"],[8,58,8,59],[9,2,9,0],[9,6,9,4,"isMdAsciiPunct"],[9,20,9,18],[9,23,9,21,"require"],[9,30,9,28],[9,31,9,28,"_dependencyMap"],[9,45,9,28],[9,48,9,46],[9,49,9,47],[9,50,9,48,"isMdAsciiPunct"],[9,64,9,62],[10,2,12,0],[10,11,12,9,"StateInline"],[10,22,12,20,"StateInline"],[10,23,12,21,"src"],[10,26,12,24],[10,28,12,26,"md"],[10,30,12,28],[10,32,12,30,"env"],[10,35,12,33],[10,37,12,35,"outTokens"],[10,46,12,44],[10,48,12,46],[11,4,13,2],[11,8,13,6],[11,9,13,7,"src"],[11,12,13,10],[11,15,13,13,"src"],[11,18,13,16],[12,4,14,2],[12,8,14,6],[12,9,14,7,"env"],[12,12,14,10],[12,15,14,13,"env"],[12,18,14,16],[13,4,15,2],[13,8,15,6],[13,9,15,7,"md"],[13,11,15,9],[13,14,15,12,"md"],[13,16,15,14],[14,4,16,2],[14,8,16,6],[14,9,16,7,"tokens"],[14,15,16,13],[14,18,16,16,"outTokens"],[14,27,16,25],[15,4,17,2],[15,8,17,6],[15,9,17,7,"tokens_meta"],[15,20,17,18],[15,23,17,21,"Array"],[15,28,17,26],[15,29,17,27,"outTokens"],[15,38,17,36],[15,39,17,37,"length"],[15,45,17,43],[15,46,17,44],[16,4,19,2],[16,8,19,6],[16,9,19,7,"pos"],[16,12,19,10],[16,15,19,13],[16,16,19,14],[17,4,20,2],[17,8,20,6],[17,9,20,7,"posMax"],[17,15,20,13],[17,18,20,16],[17,22,20,20],[17,23,20,21,"src"],[17,26,20,24],[17,27,20,25,"length"],[17,33,20,31],[18,4,21,2],[18,8,21,6],[18,9,21,7,"level"],[18,14,21,12],[18,17,21,15],[18,18,21,16],[19,4,22,2],[19,8,22,6],[19,9,22,7,"pending"],[19,16,22,14],[19,19,22,17],[19,21,22,19],[20,4,23,2],[20,8,23,6],[20,9,23,7,"pendingLevel"],[20,21,23,19],[20,24,23,22],[20,25,23,23],[22,4,25,2],[23,4,26,2],[24,4,27,2],[24,8,27,6],[24,9,27,7,"cache"],[24,14,27,12],[24,17,27,15],[24,18,27,16],[24,19,27,17],[26,4,29,2],[27,4,30,2],[27,8,30,6],[27,9,30,7,"delimiters"],[27,19,30,17],[27,22,30,20],[27,24,30,22],[29,4,32,2],[30,4,33,2],[30,8,33,6],[30,9,33,7,"_prev_delimiters"],[30,25,33,23],[30,28,33,26],[30,30,33,28],[31,2,34,0],[33,2,37,0],[34,2,38,0],[35,2,39,0,"StateInline"],[35,13,39,11],[35,14,39,12,"prototype"],[35,23,39,21],[35,24,39,22,"pushPending"],[35,35,39,33],[35,38,39,36],[35,50,39,48],[36,4,40,2],[36,8,40,6,"token"],[36,13,40,11],[36,16,40,14],[36,20,40,18,"Token"],[36,25,40,23],[36,26,40,24],[36,32,40,30],[36,34,40,32],[36,36,40,34],[36,38,40,36],[36,39,40,37],[36,40,40,38],[37,4,41,2,"token"],[37,9,41,7],[37,10,41,8,"content"],[37,17,41,15],[37,20,41,18],[37,24,41,22],[37,25,41,23,"pending"],[37,32,41,30],[38,4,42,2,"token"],[38,9,42,7],[38,10,42,8,"level"],[38,15,42,13],[38,18,42,16],[38,22,42,20],[38,23,42,21,"pendingLevel"],[38,35,42,33],[39,4,43,2],[39,8,43,6],[39,9,43,7,"tokens"],[39,15,43,13],[39,16,43,14,"push"],[39,20,43,18],[39,21,43,19,"token"],[39,26,43,24],[39,27,43,25],[40,4,44,2],[40,8,44,6],[40,9,44,7,"pending"],[40,16,44,14],[40,19,44,17],[40,21,44,19],[41,4,45,2],[41,11,45,9,"token"],[41,16,45,14],[42,2,46,0],[42,3,46,1],[44,2,49,0],[45,2,50,0],[46,2,51,0],[47,2,52,0,"StateInline"],[47,13,52,11],[47,14,52,12,"prototype"],[47,23,52,21],[47,24,52,22,"push"],[47,28,52,26],[47,31,52,29],[47,41,52,39,"type"],[47,45,52,43],[47,47,52,45,"tag"],[47,50,52,48],[47,52,52,50,"nesting"],[47,59,52,57],[47,61,52,59],[48,4,53,2],[48,8,53,6],[48,12,53,10],[48,13,53,11,"pending"],[48,20,53,18],[48,22,53,20],[49,6,54,4],[49,10,54,8],[49,11,54,9,"pushPending"],[49,22,54,20],[49,23,54,21],[49,24,54,22],[50,4,55,2],[51,4,57,2],[51,8,57,6,"token"],[51,13,57,11],[51,16,57,14],[51,20,57,18,"Token"],[51,25,57,23],[51,26,57,24,"type"],[51,30,57,28],[51,32,57,30,"tag"],[51,35,57,33],[51,37,57,35,"nesting"],[51,44,57,42],[51,45,57,43],[52,4,58,2],[52,8,58,6,"token_meta"],[52,18,58,16],[52,21,58,19],[52,25,58,23],[53,4,60,2],[53,8,60,6,"nesting"],[53,15,60,13],[53,18,60,16],[53,19,60,17],[53,21,60,19],[54,6,61,4],[55,6,62,4],[55,10,62,8],[55,11,62,9,"level"],[55,16,62,14],[55,18,62,16],[56,6,63,4],[56,10,63,8],[56,11,63,9,"delimiters"],[56,21,63,19],[56,24,63,22],[56,28,63,26],[56,29,63,27,"_prev_delimiters"],[56,45,63,43],[56,46,63,44,"pop"],[56,49,63,47],[56,50,63,48],[56,51,63,49],[57,4,64,2],[58,4,66,2,"token"],[58,9,66,7],[58,10,66,8,"level"],[58,15,66,13],[58,18,66,16],[58,22,66,20],[58,23,66,21,"level"],[58,28,66,26],[59,4,68,2],[59,8,68,6,"nesting"],[59,15,68,13],[59,18,68,16],[59,19,68,17],[59,21,68,19],[60,6,69,4],[61,6,70,4],[61,10,70,8],[61,11,70,9,"level"],[61,16,70,14],[61,18,70,16],[62,6,71,4],[62,10,71,8],[62,11,71,9,"_prev_delimiters"],[62,27,71,25],[62,28,71,26,"push"],[62,32,71,30],[62,33,71,31],[62,37,71,35],[62,38,71,36,"delimiters"],[62,48,71,46],[62,49,71,47],[63,6,72,4],[63,10,72,8],[63,11,72,9,"delimiters"],[63,21,72,19],[63,24,72,22],[63,26,72,24],[64,6,73,4,"token_meta"],[64,16,73,14],[64,19,73,17],[65,8,73,19,"delimiters"],[65,18,73,29],[65,20,73,31],[65,24,73,35],[65,25,73,36,"delimiters"],[66,6,73,47],[66,7,73,48],[67,4,74,2],[68,4,76,2],[68,8,76,6],[68,9,76,7,"pendingLevel"],[68,21,76,19],[68,24,76,22],[68,28,76,26],[68,29,76,27,"level"],[68,34,76,32],[69,4,77,2],[69,8,77,6],[69,9,77,7,"tokens"],[69,15,77,13],[69,16,77,14,"push"],[69,20,77,18],[69,21,77,19,"token"],[69,26,77,24],[69,27,77,25],[70,4,78,2],[70,8,78,6],[70,9,78,7,"tokens_meta"],[70,20,78,18],[70,21,78,19,"push"],[70,25,78,23],[70,26,78,24,"token_meta"],[70,36,78,34],[70,37,78,35],[71,4,79,2],[71,11,79,9,"token"],[71,16,79,14],[72,2,80,0],[72,3,80,1],[74,2,83,0],[75,2,84,0],[76,2,85,0],[77,2,86,0],[78,2,87,0],[79,2,88,0],[80,2,89,0,"StateInline"],[80,13,89,11],[80,14,89,12,"prototype"],[80,23,89,21],[80,24,89,22,"scanDelims"],[80,34,89,32],[80,37,89,35],[80,47,89,45,"start"],[80,52,89,50],[80,54,89,52,"canSplitWord"],[80,66,89,64],[80,68,89,66],[81,4,90,2],[81,8,90,6,"pos"],[81,11,90,9],[81,14,90,12,"start"],[81,19,90,17],[82,6,90,19,"lastChar"],[82,14,90,27],[83,6,90,29,"nextChar"],[83,14,90,37],[84,6,90,39,"count"],[84,11,90,44],[85,6,90,46,"can_open"],[85,14,90,54],[86,6,90,56,"can_close"],[86,15,90,65],[87,6,91,6,"isLastWhiteSpace"],[87,22,91,22],[88,6,91,24,"isLastPunctChar"],[88,21,91,39],[89,6,92,6,"isNextWhiteSpace"],[89,22,92,22],[90,6,92,24,"isNextPunctChar"],[90,21,92,39],[91,6,93,6,"left_flanking"],[91,19,93,19],[91,22,93,22],[91,26,93,26],[92,6,94,6,"right_flanking"],[92,20,94,20],[92,23,94,23],[92,27,94,27],[93,6,95,6,"max"],[93,9,95,9],[93,12,95,12],[93,16,95,16],[93,17,95,17,"posMax"],[93,23,95,23],[94,6,96,6,"marker"],[94,12,96,12],[94,15,96,15],[94,19,96,19],[94,20,96,20,"src"],[94,23,96,23],[94,24,96,24,"charCodeAt"],[94,34,96,34],[94,35,96,35,"start"],[94,40,96,40],[94,41,96,41],[96,4,98,2],[97,4,99,2,"lastChar"],[97,12,99,10],[97,15,99,13,"start"],[97,20,99,18],[97,23,99,21],[97,24,99,22],[97,27,99,25],[97,31,99,29],[97,32,99,30,"src"],[97,35,99,33],[97,36,99,34,"charCodeAt"],[97,46,99,44],[97,47,99,45,"start"],[97,52,99,50],[97,55,99,53],[97,56,99,54],[97,57,99,55],[97,60,99,58],[97,64,99,62],[98,4,101,2],[98,11,101,9,"pos"],[98,14,101,12],[98,17,101,15,"max"],[98,20,101,18],[98,24,101,22],[98,28,101,26],[98,29,101,27,"src"],[98,32,101,30],[98,33,101,31,"charCodeAt"],[98,43,101,41],[98,44,101,42,"pos"],[98,47,101,45],[98,48,101,46],[98,53,101,51,"marker"],[98,59,101,57],[98,61,101,59],[99,6,101,61,"pos"],[99,9,101,64],[99,11,101,66],[100,4,101,68],[101,4,103,2,"count"],[101,9,103,7],[101,12,103,10,"pos"],[101,15,103,13],[101,18,103,16,"start"],[101,23,103,21],[103,4,105,2],[104,4,106,2,"nextChar"],[104,12,106,10],[104,15,106,13,"pos"],[104,18,106,16],[104,21,106,19,"max"],[104,24,106,22],[104,27,106,25],[104,31,106,29],[104,32,106,30,"src"],[104,35,106,33],[104,36,106,34,"charCodeAt"],[104,46,106,44],[104,47,106,45,"pos"],[104,50,106,48],[104,51,106,49],[104,54,106,52],[104,58,106,56],[105,4,108,2,"isLastPunctChar"],[105,19,108,17],[105,22,108,20,"isMdAsciiPunct"],[105,36,108,34],[105,37,108,35,"lastChar"],[105,45,108,43],[105,46,108,44],[105,50,108,48,"isPunctChar"],[105,61,108,59],[105,62,108,60,"String"],[105,68,108,66],[105,69,108,67,"fromCharCode"],[105,81,108,79],[105,82,108,80,"lastChar"],[105,90,108,88],[105,91,108,89],[105,92,108,90],[106,4,109,2,"isNextPunctChar"],[106,19,109,17],[106,22,109,20,"isMdAsciiPunct"],[106,36,109,34],[106,37,109,35,"nextChar"],[106,45,109,43],[106,46,109,44],[106,50,109,48,"isPunctChar"],[106,61,109,59],[106,62,109,60,"String"],[106,68,109,66],[106,69,109,67,"fromCharCode"],[106,81,109,79],[106,82,109,80,"nextChar"],[106,90,109,88],[106,91,109,89],[106,92,109,90],[107,4,111,2,"isLastWhiteSpace"],[107,20,111,18],[107,23,111,21,"isWhiteSpace"],[107,35,111,33],[107,36,111,34,"lastChar"],[107,44,111,42],[107,45,111,43],[108,4,112,2,"isNextWhiteSpace"],[108,20,112,18],[108,23,112,21,"isWhiteSpace"],[108,35,112,33],[108,36,112,34,"nextChar"],[108,44,112,42],[108,45,112,43],[109,4,114,2],[109,8,114,6,"isNextWhiteSpace"],[109,24,114,22],[109,26,114,24],[110,6,115,4,"left_flanking"],[110,19,115,17],[110,22,115,20],[110,27,115,25],[111,4,116,2],[111,5,116,3],[111,11,116,9],[111,15,116,13,"isNextPunctChar"],[111,30,116,28],[111,32,116,30],[112,6,117,4],[112,10,117,8],[112,12,117,10,"isLastWhiteSpace"],[112,28,117,26],[112,32,117,30,"isLastPunctChar"],[112,47,117,45],[112,48,117,46],[112,50,117,48],[113,8,118,6,"left_flanking"],[113,21,118,19],[113,24,118,22],[113,29,118,27],[114,6,119,4],[115,4,120,2],[116,4,122,2],[116,8,122,6,"isLastWhiteSpace"],[116,24,122,22],[116,26,122,24],[117,6,123,4,"right_flanking"],[117,20,123,18],[117,23,123,21],[117,28,123,26],[118,4,124,2],[118,5,124,3],[118,11,124,9],[118,15,124,13,"isLastPunctChar"],[118,30,124,28],[118,32,124,30],[119,6,125,4],[119,10,125,8],[119,12,125,10,"isNextWhiteSpace"],[119,28,125,26],[119,32,125,30,"isNextPunctChar"],[119,47,125,45],[119,48,125,46],[119,50,125,48],[120,8,126,6,"right_flanking"],[120,22,126,20],[120,25,126,23],[120,30,126,28],[121,6,127,4],[122,4,128,2],[123,4,130,2],[123,8,130,6],[123,9,130,7,"canSplitWord"],[123,21,130,19],[123,23,130,21],[124,6,131,4,"can_open"],[124,14,131,12],[124,17,131,16,"left_flanking"],[124,30,131,29],[124,35,131,35],[124,36,131,36,"right_flanking"],[124,50,131,50],[124,54,131,54,"isLastPunctChar"],[124,69,131,69],[124,70,131,70],[125,6,132,4,"can_close"],[125,15,132,13],[125,18,132,16,"right_flanking"],[125,32,132,30],[125,37,132,35],[125,38,132,36,"left_flanking"],[125,51,132,49],[125,55,132,54,"isNextPunctChar"],[125,70,132,69],[125,71,132,70],[126,4,133,2],[126,5,133,3],[126,11,133,9],[127,6,134,4,"can_open"],[127,14,134,12],[127,17,134,16,"left_flanking"],[127,30,134,29],[128,6,135,4,"can_close"],[128,15,135,13],[128,18,135,16,"right_flanking"],[128,32,135,30],[129,4,136,2],[130,4,138,2],[130,11,138,9],[131,6,139,4,"can_open"],[131,14,139,12],[131,16,139,15,"can_open"],[131,24,139,23],[132,6,140,4,"can_close"],[132,15,140,13],[132,17,140,15,"can_close"],[132,26,140,24],[133,6,141,4,"length"],[133,12,141,10],[133,14,141,15,"count"],[134,4,142,2],[134,5,142,3],[135,2,143,0],[135,3,143,1],[137,2,146,0],[138,2,147,0,"StateInline"],[138,13,147,11],[138,14,147,12,"prototype"],[138,23,147,21],[138,24,147,22,"Token"],[138,29,147,27],[138,32,147,30,"Token"],[138,37,147,35],[139,2,150,0,"module"],[139,8,150,6],[139,9,150,7,"exports"],[139,16,150,14],[139,19,150,17,"StateInline"],[139,30,150,28],[140,0,150,29],[140,3]],"functionMap":{"names":["<global>","StateInline","StateInline.prototype.pushPending","StateInline.prototype.push","StateInline.prototype.scanDelims"],"mappings":"AAA;ACW;CDsB;oCEK;CFO;6BGM;CH4B;mCIS;CJsD"},"hasCjsExports":true},"type":"js/module"}]}