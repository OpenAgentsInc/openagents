{"dependencies":[{"name":"nanoid/non-secure","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":43,"index":58}}],"key":"SN8WVal79eAEDQEpzmVqVAy5JJs=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"BaseRouter\", {\n    enumerable: true,\n    get: function () {\n      return BaseRouter;\n    }\n  });\n  var _nanoidNonSecure = require(_dependencyMap[0]);\n  /**\n   * Base router object that can be used when writing custom routers.\n   * This provides few helper methods to handle common actions such as `RESET`.\n   */\n  var BaseRouter = {\n    getStateForAction(state, action) {\n      switch (action.type) {\n        case 'SET_PARAMS':\n        case 'REPLACE_PARAMS':\n          {\n            var index = action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n            if (index === -1) {\n              return null;\n            }\n            return {\n              ...state,\n              routes: state.routes.map((r, i) => i === index ? {\n                ...r,\n                params: action.type === 'REPLACE_PARAMS' ? action.payload.params : {\n                  ...r.params,\n                  ...action.payload.params\n                }\n              } : r)\n            };\n          }\n        case 'RESET':\n          {\n            var nextState = action.payload;\n            if (nextState.routes.length === 0 || nextState.routes.some(route => !state.routeNames.includes(route.name))) {\n              return null;\n            }\n            if (nextState.stale === false) {\n              if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(name => !state.routeNames.includes(name))) {\n                return null;\n              }\n              return {\n                ...nextState,\n                routes: nextState.routes.map(route => route.key ? route : {\n                  ...route,\n                  key: `${route.name}-${(0, _nanoidNonSecure.nanoid)()}`\n                })\n              };\n            }\n            return nextState;\n          }\n        default:\n          return null;\n      }\n    },\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE' || action.type === 'NAVIGATE_DEPRECATED';\n    }\n  };\n});","lineCount":67,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,8,0,"Object"],[7,8,8,0],[7,9,8,0,"defineProperty"],[7,23,8,0],[7,24,8,0,"exports"],[7,31,8,0],[8,4,8,0,"enumerable"],[8,14,8,0],[9,4,8,0,"get"],[9,7,8,0],[9,18,8,0,"get"],[9,19,8,0],[10,6,8,0],[10,13,8,0,"BaseRouter"],[10,23,8,0],[11,4,8,0],[12,2,8,0],[13,2,3,0],[13,6,3,0,"_nanoidNonSecure"],[13,22,3,0],[13,25,3,0,"require"],[13,32,3,0],[13,33,3,0,"_dependencyMap"],[13,47,3,0],[14,2,4,0],[15,0,5,0],[16,0,6,0],[17,0,7,0],[18,2,8,7],[18,6,8,13,"BaseRouter"],[18,16,8,23],[18,19,8,26],[19,4,9,2,"getStateForAction"],[19,21,9,19,"getStateForAction"],[19,22,9,20,"state"],[19,27,9,25],[19,29,9,27,"action"],[19,35,9,33],[19,37,9,35],[20,6,10,4],[20,14,10,12,"action"],[20,20,10,18],[20,21,10,19,"type"],[20,25,10,23],[21,8,11,6],[21,13,11,11],[21,25,11,23],[22,8,12,6],[22,13,12,11],[22,29,12,27],[23,10,13,8],[24,12,14,10],[24,16,14,16,"index"],[24,21,14,21],[24,24,14,24,"action"],[24,30,14,30],[24,31,14,31,"source"],[24,37,14,37],[24,40,14,40,"state"],[24,45,14,45],[24,46,14,46,"routes"],[24,52,14,52],[24,53,14,53,"findIndex"],[24,62,14,62],[24,63,14,63,"r"],[24,64,14,64],[24,68,14,68,"r"],[24,69,14,69],[24,70,14,70,"key"],[24,73,14,73],[24,78,14,78,"action"],[24,84,14,84],[24,85,14,85,"source"],[24,91,14,91],[24,92,14,92],[24,95,14,95,"state"],[24,100,14,100],[24,101,14,101,"index"],[24,106,14,106],[25,12,15,10],[25,16,15,14,"index"],[25,21,15,19],[25,28,15,26],[25,30,15,28],[26,14,16,12],[26,21,16,19],[26,25,16,23],[27,12,17,10],[28,12,18,10],[28,19,18,17],[29,14,19,12],[29,17,19,15,"state"],[29,22,19,20],[30,14,20,12,"routes"],[30,20,20,18],[30,22,20,20,"state"],[30,27,20,25],[30,28,20,26,"routes"],[30,34,20,32],[30,35,20,33,"map"],[30,38,20,36],[30,39,20,37],[30,40,20,38,"r"],[30,41,20,39],[30,43,20,41,"i"],[30,44,20,42],[30,49,20,47,"i"],[30,50,20,48],[30,55,20,53,"index"],[30,60,20,58],[30,63,20,61],[31,16,21,14],[31,19,21,17,"r"],[31,20,21,18],[32,16,22,14,"params"],[32,22,22,20],[32,24,22,22,"action"],[32,30,22,28],[32,31,22,29,"type"],[32,35,22,33],[32,40,22,38],[32,56,22,54],[32,59,22,57,"action"],[32,65,22,63],[32,66,22,64,"payload"],[32,73,22,71],[32,74,22,72,"params"],[32,80,22,78],[32,83,22,81],[33,18,23,16],[33,21,23,19,"r"],[33,22,23,20],[33,23,23,21,"params"],[33,29,23,27],[34,18,24,16],[34,21,24,19,"action"],[34,27,24,25],[34,28,24,26,"payload"],[34,35,24,33],[34,36,24,34,"params"],[35,16,25,14],[36,14,26,12],[36,15,26,13],[36,18,26,16,"r"],[36,19,26,17],[37,12,27,10],[37,13,27,11],[38,10,28,8],[39,8,29,6],[39,13,29,11],[39,20,29,18],[40,10,30,8],[41,12,31,10],[41,16,31,16,"nextState"],[41,25,31,25],[41,28,31,28,"action"],[41,34,31,34],[41,35,31,35,"payload"],[41,42,31,42],[42,12,32,10],[42,16,32,14,"nextState"],[42,25,32,23],[42,26,32,24,"routes"],[42,32,32,30],[42,33,32,31,"length"],[42,39,32,37],[42,44,32,42],[42,45,32,43],[42,49,32,47,"nextState"],[42,58,32,56],[42,59,32,57,"routes"],[42,65,32,63],[42,66,32,64,"some"],[42,70,32,68],[42,71,32,69,"route"],[42,76,32,74],[42,80,32,78],[42,81,32,79,"state"],[42,86,32,84],[42,87,32,85,"routeNames"],[42,97,32,95],[42,98,32,96,"includes"],[42,106,32,104],[42,107,32,105,"route"],[42,112,32,110],[42,113,32,111,"name"],[42,117,32,115],[42,118,32,116],[42,119,32,117],[42,121,32,119],[43,14,33,12],[43,21,33,19],[43,25,33,23],[44,12,34,10],[45,12,35,10],[45,16,35,14,"nextState"],[45,25,35,23],[45,26,35,24,"stale"],[45,31,35,29],[45,36,35,34],[45,41,35,39],[45,43,35,41],[46,14,36,12],[46,18,36,16,"state"],[46,23,36,21],[46,24,36,22,"routeNames"],[46,34,36,32],[46,35,36,33,"length"],[46,41,36,39],[46,46,36,44,"nextState"],[46,55,36,53],[46,56,36,54,"routeNames"],[46,66,36,64],[46,67,36,65,"length"],[46,73,36,71],[46,77,36,75,"nextState"],[46,86,36,84],[46,87,36,85,"routeNames"],[46,97,36,95],[46,98,36,96,"some"],[46,102,36,100],[46,103,36,101,"name"],[46,107,36,105],[46,111,36,109],[46,112,36,110,"state"],[46,117,36,115],[46,118,36,116,"routeNames"],[46,128,36,126],[46,129,36,127,"includes"],[46,137,36,135],[46,138,36,136,"name"],[46,142,36,140],[46,143,36,141],[46,144,36,142],[46,146,36,144],[47,16,37,14],[47,23,37,21],[47,27,37,25],[48,14,38,12],[49,14,39,12],[49,21,39,19],[50,16,40,14],[50,19,40,17,"nextState"],[50,28,40,26],[51,16,41,14,"routes"],[51,22,41,20],[51,24,41,22,"nextState"],[51,33,41,31],[51,34,41,32,"routes"],[51,40,41,38],[51,41,41,39,"map"],[51,44,41,42],[51,45,41,43,"route"],[51,50,41,48],[51,54,41,52,"route"],[51,59,41,57],[51,60,41,58,"key"],[51,63,41,61],[51,66,41,64,"route"],[51,71,41,69],[51,74,41,72],[52,18,42,16],[52,21,42,19,"route"],[52,26,42,24],[53,18,43,16,"key"],[53,21,43,19],[53,23,43,21],[53,26,43,24,"route"],[53,31,43,29],[53,32,43,30,"name"],[53,36,43,34],[53,40,43,38],[53,44,43,38,"nanoid"],[53,60,43,44],[53,61,43,44,"nanoid"],[53,67,43,44],[53,69,43,45],[53,70,43,46],[54,16,44,14],[54,17,44,15],[55,14,45,12],[55,15,45,13],[56,12,46,10],[57,12,47,10],[57,19,47,17,"nextState"],[57,28,47,26],[58,10,48,8],[59,8,49,6],[60,10,50,8],[60,17,50,15],[60,21,50,19],[61,6,51,4],[62,4,52,2],[62,5,52,3],[63,4,53,2,"shouldActionChangeFocus"],[63,27,53,25,"shouldActionChangeFocus"],[63,28,53,26,"action"],[63,34,53,32],[63,36,53,34],[64,6,54,4],[64,13,54,11,"action"],[64,19,54,17],[64,20,54,18,"type"],[64,24,54,22],[64,29,54,27],[64,39,54,37],[64,43,54,41,"action"],[64,49,54,47],[64,50,54,48,"type"],[64,54,54,52],[64,59,54,57],[64,80,54,78],[65,4,55,2],[66,2,56,0],[66,3,56,1],[67,0,56,2],[67,3]],"functionMap":{"names":["<global>","getStateForAction","state.routes.findIndex$argument_0","state.routes.map$argument_0","nextState.routes.some$argument_0","nextState.routeNames.some$argument_0","nextState.routes.map$argument_0","shouldActionChangeFocus"],"mappings":"AAA;ECQ;+DCK,4BD;qCEM;iBFM;qEGM,+CH;qGII,wCJ;2CKK;eLG;GDQ;EOC;GPE"},"hasCjsExports":false},"type":"js/module"}]}