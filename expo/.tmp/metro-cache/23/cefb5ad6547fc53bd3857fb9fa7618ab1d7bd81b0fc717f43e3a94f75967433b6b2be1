{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"./types.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":4,"index":98},"end":{"line":4,"column":25,"index":119}}],"key":"v1w+pnJrgvUP3JbmDiiF/Rw8c9Q=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _slicedToArray = require(_dependencyMap[0]).default;\n  var _require = require(_dependencyMap[1]),\n    VOID = _require.VOID,\n    PRIMITIVE = _require.PRIMITIVE,\n    ARRAY = _require.ARRAY,\n    OBJECT = _require.OBJECT,\n    DATE = _require.DATE,\n    REGEXP = _require.REGEXP,\n    MAP = _require.MAP,\n    SET = _require.SET,\n    ERROR = _require.ERROR,\n    BIGINT = _require.BIGINT;\n  var env = typeof self === 'object' ? self : globalThis;\n  var deserializer = ($, _) => {\n    var as = (out, index) => {\n      $.set(index, out);\n      return out;\n    };\n    var unpair = index => {\n      if ($.has(index)) return $.get(index);\n      var _$index = _slicedToArray(_[index], 2),\n        type = _$index[0],\n        value = _$index[1];\n      switch (type) {\n        case PRIMITIVE:\n        case VOID:\n          return as(value, index);\n        case ARRAY:\n          {\n            var arr = as([], index);\n            for (var _index of value) arr.push(unpair(_index));\n            return arr;\n          }\n        case OBJECT:\n          {\n            var object = as({}, index);\n            for (var _ref of value) {\n              var _ref2 = _slicedToArray(_ref, 2);\n              var key = _ref2[0];\n              var _index2 = _ref2[1];\n              object[unpair(key)] = unpair(_index2);\n            }\n            return object;\n          }\n        case DATE:\n          return as(new Date(value), index);\n        case REGEXP:\n          {\n            var source = value.source,\n              flags = value.flags;\n            return as(new RegExp(source, flags), index);\n          }\n        case MAP:\n          {\n            var map = as(new Map(), index);\n            for (var _ref3 of value) {\n              var _ref4 = _slicedToArray(_ref3, 2);\n              var _key = _ref4[0];\n              var _index3 = _ref4[1];\n              map.set(unpair(_key), unpair(_index3));\n            }\n            return map;\n          }\n        case SET:\n          {\n            var set = as(new Set(), index);\n            for (var _index4 of value) set.add(unpair(_index4));\n            return set;\n          }\n        case ERROR:\n          {\n            var name = value.name,\n              message = value.message;\n            return as(new env[name](message), index);\n          }\n        case BIGINT:\n          return as(BigInt(value), index);\n        case 'BigInt':\n          return as(Object(BigInt(value)), index);\n        case 'ArrayBuffer':\n          return as(new Uint8Array(value).buffer, value);\n        case 'DataView':\n          {\n            var _Uint8Array = new Uint8Array(value),\n              buffer = _Uint8Array.buffer;\n            return as(new DataView(buffer), value);\n          }\n      }\n      return as(new env[type](value), index);\n    };\n    return unpair;\n  };\n\n  /**\n   * @typedef {Array<string,any>} Record a type representation\n   */\n\n  /**\n   * Returns a deserialized value from a serialized array of Records.\n   * @param {Record[]} serialized a previously serialized value.\n   * @returns {any}\n   */\n  var deserialize = serialized => deserializer(new Map(), serialized)(0);\n  exports.deserialize = deserialize;\n});","lineCount":108,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[4,50,1,13,"default"],[4,57,1,13],[5,2,2,0],[5,6,2,0,"_require"],[5,14,2,0],[5,17,4,4,"require"],[5,24,4,11],[5,25,4,11,"_dependencyMap"],[5,39,4,11],[5,42,4,24],[5,43,4,25],[6,4,3,2,"VOID"],[6,8,3,6],[6,11,3,6,"_require"],[6,19,3,6],[6,20,3,2,"VOID"],[6,24,3,6],[7,4,3,8,"PRIMITIVE"],[7,13,3,17],[7,16,3,17,"_require"],[7,24,3,17],[7,25,3,8,"PRIMITIVE"],[7,34,3,17],[8,4,3,19,"ARRAY"],[8,9,3,24],[8,12,3,24,"_require"],[8,20,3,24],[8,21,3,19,"ARRAY"],[8,26,3,24],[9,4,3,26,"OBJECT"],[9,10,3,32],[9,13,3,32,"_require"],[9,21,3,32],[9,22,3,26,"OBJECT"],[9,28,3,32],[10,4,3,34,"DATE"],[10,8,3,38],[10,11,3,38,"_require"],[10,19,3,38],[10,20,3,34,"DATE"],[10,24,3,38],[11,4,3,40,"REGEXP"],[11,10,3,46],[11,13,3,46,"_require"],[11,21,3,46],[11,22,3,40,"REGEXP"],[11,28,3,46],[12,4,3,48,"MAP"],[12,7,3,51],[12,10,3,51,"_require"],[12,18,3,51],[12,19,3,48,"MAP"],[12,22,3,51],[13,4,3,53,"SET"],[13,7,3,56],[13,10,3,56,"_require"],[13,18,3,56],[13,19,3,53,"SET"],[13,22,3,56],[14,4,3,58,"ERROR"],[14,9,3,63],[14,12,3,63,"_require"],[14,20,3,63],[14,21,3,58,"ERROR"],[14,26,3,63],[15,4,3,65,"BIGINT"],[15,10,3,71],[15,13,3,71,"_require"],[15,21,3,71],[15,22,3,65,"BIGINT"],[15,28,3,71],[16,2,6,0],[16,6,6,6,"env"],[16,9,6,9],[16,12,6,12],[16,19,6,19,"self"],[16,23,6,23],[16,28,6,28],[16,36,6,36],[16,39,6,39,"self"],[16,43,6,43],[16,46,6,46,"globalThis"],[16,56,6,56],[17,2,8,0],[17,6,8,6,"deserializer"],[17,18,8,18],[17,21,8,21,"deserializer"],[17,22,8,22,"$"],[17,23,8,23],[17,25,8,25,"_"],[17,26,8,26],[17,31,8,31],[18,4,9,2],[18,8,9,8,"as"],[18,10,9,10],[18,13,9,13,"as"],[18,14,9,14,"out"],[18,17,9,17],[18,19,9,19,"index"],[18,24,9,24],[18,29,9,29],[19,6,10,4,"$"],[19,7,10,5],[19,8,10,6,"set"],[19,11,10,9],[19,12,10,10,"index"],[19,17,10,15],[19,19,10,17,"out"],[19,22,10,20],[19,23,10,21],[20,6,11,4],[20,13,11,11,"out"],[20,16,11,14],[21,4,12,2],[21,5,12,3],[22,4,14,2],[22,8,14,8,"unpair"],[22,14,14,14],[22,17,14,17,"index"],[22,22,14,22],[22,26,14,26],[23,6,15,4],[23,10,15,8,"$"],[23,11,15,9],[23,12,15,10,"has"],[23,15,15,13],[23,16,15,14,"index"],[23,21,15,19],[23,22,15,20],[23,24,16,6],[23,31,16,13,"$"],[23,32,16,14],[23,33,16,15,"get"],[23,36,16,18],[23,37,16,19,"index"],[23,42,16,24],[23,43,16,25],[24,6,18,4],[24,10,18,4,"_$index"],[24,17,18,4],[24,20,18,4,"_slicedToArray"],[24,34,18,4],[24,35,18,26,"_"],[24,36,18,27],[24,37,18,28,"index"],[24,42,18,33],[24,43,18,34],[25,8,18,11,"type"],[25,12,18,15],[25,15,18,15,"_$index"],[25,22,18,15],[26,8,18,17,"value"],[26,13,18,22],[26,16,18,22,"_$index"],[26,23,18,22],[27,6,19,4],[27,14,19,12,"type"],[27,18,19,16],[28,8,20,6],[28,13,20,11,"PRIMITIVE"],[28,22,20,20],[29,8,21,6],[29,13,21,11,"VOID"],[29,17,21,15],[30,10,22,8],[30,17,22,15,"as"],[30,19,22,17],[30,20,22,18,"value"],[30,25,22,23],[30,27,22,25,"index"],[30,32,22,30],[30,33,22,31],[31,8,23,6],[31,13,23,11,"ARRAY"],[31,18,23,16],[32,10,23,18],[33,12,24,8],[33,16,24,14,"arr"],[33,19,24,17],[33,22,24,20,"as"],[33,24,24,22],[33,25,24,23],[33,27,24,25],[33,29,24,27,"index"],[33,34,24,32],[33,35,24,33],[34,12,25,8],[34,17,25,13],[34,21,25,19,"index"],[34,27,25,24],[34,31,25,28,"value"],[34,36,25,33],[34,38,26,10,"arr"],[34,41,26,13],[34,42,26,14,"push"],[34,46,26,18],[34,47,26,19,"unpair"],[34,53,26,25],[34,54,26,26,"index"],[34,60,26,31],[34,61,26,32],[34,62,26,33],[35,12,27,8],[35,19,27,15,"arr"],[35,22,27,18],[36,10,28,6],[37,8,29,6],[37,13,29,11,"OBJECT"],[37,19,29,17],[38,10,29,19],[39,12,30,8],[39,16,30,14,"object"],[39,22,30,20],[39,25,30,23,"as"],[39,27,30,25],[39,28,30,26],[39,29,30,27],[39,30,30,28],[39,32,30,30,"index"],[39,37,30,35],[39,38,30,36],[40,12,31,8],[40,21,31,8,"_ref"],[40,25,31,8],[40,29,31,35,"value"],[40,34,31,40],[41,14,31,40],[41,18,31,40,"_ref2"],[41,23,31,40],[41,26,31,40,"_slicedToArray"],[41,40,31,40],[41,41,31,40,"_ref"],[41,45,31,40],[42,14,31,40],[42,18,31,20,"key"],[42,21,31,23],[42,24,31,23,"_ref2"],[42,29,31,23],[43,14,31,23],[43,18,31,25,"index"],[43,25,31,30],[43,28,31,30,"_ref2"],[43,33,31,30],[44,14,32,10,"object"],[44,20,32,16],[44,21,32,17,"unpair"],[44,27,32,23],[44,28,32,24,"key"],[44,31,32,27],[44,32,32,28],[44,33,32,29],[44,36,32,32,"unpair"],[44,42,32,38],[44,43,32,39,"index"],[44,50,32,44],[44,51,32,45],[45,12,32,46],[46,12,33,8],[46,19,33,15,"object"],[46,25,33,21],[47,10,34,6],[48,8,35,6],[48,13,35,11,"DATE"],[48,17,35,15],[49,10,36,8],[49,17,36,15,"as"],[49,19,36,17],[49,20,36,18],[49,24,36,22,"Date"],[49,28,36,26],[49,29,36,27,"value"],[49,34,36,32],[49,35,36,33],[49,37,36,35,"index"],[49,42,36,40],[49,43,36,41],[50,8,37,6],[50,13,37,11,"REGEXP"],[50,19,37,17],[51,10,37,19],[52,12,38,8],[52,16,38,15,"source"],[52,22,38,21],[52,25,38,32,"value"],[52,30,38,37],[52,31,38,15,"source"],[52,37,38,21],[53,14,38,23,"flags"],[53,19,38,28],[53,22,38,32,"value"],[53,27,38,37],[53,28,38,23,"flags"],[53,33,38,28],[54,12,39,8],[54,19,39,15,"as"],[54,21,39,17],[54,22,39,18],[54,26,39,22,"RegExp"],[54,32,39,28],[54,33,39,29,"source"],[54,39,39,35],[54,41,39,37,"flags"],[54,46,39,42],[54,47,39,43],[54,49,39,45,"index"],[54,54,39,50],[54,55,39,51],[55,10,40,6],[56,8,41,6],[56,13,41,11,"MAP"],[56,16,41,14],[57,10,41,16],[58,12,42,8],[58,16,42,14,"map"],[58,19,42,17],[58,22,42,20,"as"],[58,24,42,22],[58,25,42,23],[58,29,42,27,"Map"],[58,32,42,30],[58,33,42,29],[58,34,42,30],[58,36,42,32,"index"],[58,41,42,37],[58,42,42,38],[59,12,43,8],[59,21,43,8,"_ref3"],[59,26,43,8],[59,30,43,35,"value"],[59,35,43,40],[60,14,43,40],[60,18,43,40,"_ref4"],[60,23,43,40],[60,26,43,40,"_slicedToArray"],[60,40,43,40],[60,41,43,40,"_ref3"],[60,46,43,40],[61,14,43,40],[61,18,43,20,"key"],[61,22,43,23],[61,25,43,23,"_ref4"],[61,30,43,23],[62,14,43,23],[62,18,43,25,"index"],[62,25,43,30],[62,28,43,30,"_ref4"],[62,33,43,30],[63,14,44,10,"map"],[63,17,44,13],[63,18,44,14,"set"],[63,21,44,17],[63,22,44,18,"unpair"],[63,28,44,24],[63,29,44,25,"key"],[63,33,44,28],[63,34,44,29],[63,36,44,31,"unpair"],[63,42,44,37],[63,43,44,38,"index"],[63,50,44,43],[63,51,44,44],[63,52,44,45],[64,12,44,46],[65,12,45,8],[65,19,45,15,"map"],[65,22,45,18],[66,10,46,6],[67,8,47,6],[67,13,47,11,"SET"],[67,16,47,14],[68,10,47,16],[69,12,48,8],[69,16,48,14,"set"],[69,19,48,17],[69,22,48,20,"as"],[69,24,48,22],[69,25,48,23],[69,29,48,27,"Set"],[69,32,48,30],[69,33,48,29],[69,34,48,30],[69,36,48,32,"index"],[69,41,48,37],[69,42,48,38],[70,12,49,8],[70,17,49,13],[70,21,49,19,"index"],[70,28,49,24],[70,32,49,28,"value"],[70,37,49,33],[70,39,50,10,"set"],[70,42,50,13],[70,43,50,14,"add"],[70,46,50,17],[70,47,50,18,"unpair"],[70,53,50,24],[70,54,50,25,"index"],[70,61,50,30],[70,62,50,31],[70,63,50,32],[71,12,51,8],[71,19,51,15,"set"],[71,22,51,18],[72,10,52,6],[73,8,53,6],[73,13,53,11,"ERROR"],[73,18,53,16],[74,10,53,18],[75,12,54,8],[75,16,54,15,"name"],[75,20,54,19],[75,23,54,32,"value"],[75,28,54,37],[75,29,54,15,"name"],[75,33,54,19],[76,14,54,21,"message"],[76,21,54,28],[76,24,54,32,"value"],[76,29,54,37],[76,30,54,21,"message"],[76,37,54,28],[77,12,55,8],[77,19,55,15,"as"],[77,21,55,17],[77,22,55,18],[77,26,55,22,"env"],[77,29,55,25],[77,30,55,26,"name"],[77,34,55,30],[77,35,55,31],[77,36,55,32,"message"],[77,43,55,39],[77,44,55,40],[77,46,55,42,"index"],[77,51,55,47],[77,52,55,48],[78,10,56,6],[79,8,57,6],[79,13,57,11,"BIGINT"],[79,19,57,17],[80,10,58,8],[80,17,58,15,"as"],[80,19,58,17],[80,20,58,18,"BigInt"],[80,26,58,24],[80,27,58,25,"value"],[80,32,58,30],[80,33,58,31],[80,35,58,33,"index"],[80,40,58,38],[80,41,58,39],[81,8,59,6],[81,13,59,11],[81,21,59,19],[82,10,60,8],[82,17,60,15,"as"],[82,19,60,17],[82,20,60,18,"Object"],[82,26,60,24],[82,27,60,25,"BigInt"],[82,33,60,31],[82,34,60,32,"value"],[82,39,60,37],[82,40,60,38],[82,41,60,39],[82,43,60,41,"index"],[82,48,60,46],[82,49,60,47],[83,8,61,6],[83,13,61,11],[83,26,61,24],[84,10,62,8],[84,17,62,15,"as"],[84,19,62,17],[84,20,62,18],[84,24,62,22,"Uint8Array"],[84,34,62,32],[84,35,62,33,"value"],[84,40,62,38],[84,41,62,39],[84,42,62,40,"buffer"],[84,48,62,46],[84,50,62,48,"value"],[84,55,62,53],[84,56,62,54],[85,8,63,6],[85,13,63,11],[85,23,63,21],[86,10,63,23],[87,12,64,8],[87,16,64,8,"_Uint8Array"],[87,27,64,8],[87,30,64,27],[87,34,64,31,"Uint8Array"],[87,44,64,41],[87,45,64,42,"value"],[87,50,64,47],[87,51,64,48],[88,14,64,16,"buffer"],[88,20,64,22],[88,23,64,22,"_Uint8Array"],[88,34,64,22],[88,35,64,16,"buffer"],[88,41,64,22],[89,12,65,8],[89,19,65,15,"as"],[89,21,65,17],[89,22,65,18],[89,26,65,22,"DataView"],[89,34,65,30],[89,35,65,31,"buffer"],[89,41,65,37],[89,42,65,38],[89,44,65,40,"value"],[89,49,65,45],[89,50,65,46],[90,10,66,6],[91,6,67,4],[92,6,68,4],[92,13,68,11,"as"],[92,15,68,13],[92,16,68,14],[92,20,68,18,"env"],[92,23,68,21],[92,24,68,22,"type"],[92,28,68,26],[92,29,68,27],[92,30,68,28,"value"],[92,35,68,33],[92,36,68,34],[92,38,68,36,"index"],[92,43,68,41],[92,44,68,42],[93,4,69,2],[93,5,69,3],[94,4,71,2],[94,11,71,9,"unpair"],[94,17,71,15],[95,2,72,0],[95,3,72,1],[97,2,74,0],[98,0,75,0],[99,0,76,0],[101,2,78,0],[102,0,79,0],[103,0,80,0],[104,0,81,0],[105,0,82,0],[106,2,83,0],[106,6,83,6,"deserialize"],[106,17,83,17],[106,20,83,20,"serialized"],[106,30,83,30],[106,34,83,34,"deserializer"],[106,46,83,46],[106,47,83,47],[106,51,83,51,"Map"],[106,54,83,54],[106,55,83,53],[106,56,83,54],[106,58,83,56,"serialized"],[106,68,83,66],[106,69,83,67],[106,70,83,68],[106,71,83,69],[106,72,83,70],[107,2,84,0,"exports"],[107,9,84,7],[107,10,84,8,"deserialize"],[107,21,84,19],[107,24,84,22,"deserialize"],[107,35,84,33],[108,0,84,34],[108,3]],"functionMap":{"names":["<global>","deserializer","as","unpair","deserialize"],"mappings":"AAA;qBCO;aCC;GDG;iBEE;GFuD;CDG;oBIW,kDJ"},"hasCjsExports":true},"type":"js/module"}]}