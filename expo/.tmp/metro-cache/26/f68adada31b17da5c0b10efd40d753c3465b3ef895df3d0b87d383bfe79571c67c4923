{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // fences (``` lang, ~~~ lang)\n\n  'use strict';\n\n  module.exports = function fence(state, startLine, endLine, silent) {\n    var marker,\n      len,\n      params,\n      nextLine,\n      mem,\n      token,\n      markup,\n      haveEndMarker = false,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) {\n      return false;\n    }\n    if (pos + 3 > max) {\n      return false;\n    }\n    marker = state.src.charCodeAt(pos);\n    if (marker !== 0x7E /* ~ */ && marker !== 0x60 /* ` */) {\n      return false;\n    }\n\n    // scan marker length\n    mem = pos;\n    pos = state.skipChars(pos, marker);\n    len = pos - mem;\n    if (len < 3) {\n      return false;\n    }\n    markup = state.src.slice(mem, pos);\n    params = state.src.slice(pos, max);\n    if (marker === 0x60 /* ` */) {\n      if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n        return false;\n      }\n    }\n\n    // Since start is found, we can report success here in validation mode\n    if (silent) {\n      return true;\n    }\n\n    // search end of block\n    nextLine = startLine;\n    for (;;) {\n      nextLine++;\n      if (nextLine >= endLine) {\n        // unclosed block should be autoclosed by end of document.\n        // also block seems to be autoclosed by end of parent\n        break;\n      }\n      pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n        // non-empty line with negative indent should stop the list:\n        // - ```\n        //  test\n        break;\n      }\n      if (state.src.charCodeAt(pos) !== marker) {\n        continue;\n      }\n      if (state.sCount[nextLine] - state.blkIndent >= 4) {\n        // closing fence should be indented less than 4 spaces\n        continue;\n      }\n      pos = state.skipChars(pos, marker);\n\n      // closing code fence must be at least as long as the opening one\n      if (pos - mem < len) {\n        continue;\n      }\n\n      // make sure tail has spaces only\n      pos = state.skipSpaces(pos);\n      if (pos < max) {\n        continue;\n      }\n      haveEndMarker = true;\n      // found!\n      break;\n    }\n\n    // If a fence has heading spaces, they should be removed from its inner block\n    len = state.sCount[startLine];\n    state.line = nextLine + (haveEndMarker ? 1 : 0);\n    token = state.push('fence', 'code', 0);\n    token.info = params;\n    token.content = state.getLines(startLine + 1, nextLine, len, true);\n    token.markup = markup;\n    token.map = [startLine, state.line];\n    return true;\n  };\n});","lineCount":101,"map":[[2,2,1,0],[4,2,3,0],[4,14,3,12],[6,2,6,0,"module"],[6,8,6,6],[6,9,6,7,"exports"],[6,16,6,14],[6,19,6,17],[6,28,6,26,"fence"],[6,33,6,31,"fence"],[6,34,6,32,"state"],[6,39,6,37],[6,41,6,39,"startLine"],[6,50,6,48],[6,52,6,50,"endLine"],[6,59,6,57],[6,61,6,59,"silent"],[6,67,6,65],[6,69,6,67],[7,4,7,2],[7,8,7,6,"marker"],[7,14,7,12],[8,6,7,14,"len"],[8,9,7,17],[9,6,7,19,"params"],[9,12,7,25],[10,6,7,27,"nextLine"],[10,14,7,35],[11,6,7,37,"mem"],[11,9,7,40],[12,6,7,42,"token"],[12,11,7,47],[13,6,7,49,"markup"],[13,12,7,55],[14,6,8,6,"haveEndMarker"],[14,19,8,19],[14,22,8,22],[14,27,8,27],[15,6,9,6,"pos"],[15,9,9,9],[15,12,9,12,"state"],[15,17,9,17],[15,18,9,18,"bMarks"],[15,24,9,24],[15,25,9,25,"startLine"],[15,34,9,34],[15,35,9,35],[15,38,9,38,"state"],[15,43,9,43],[15,44,9,44,"tShift"],[15,50,9,50],[15,51,9,51,"startLine"],[15,60,9,60],[15,61,9,61],[16,6,10,6,"max"],[16,9,10,9],[16,12,10,12,"state"],[16,17,10,17],[16,18,10,18,"eMarks"],[16,24,10,24],[16,25,10,25,"startLine"],[16,34,10,34],[16,35,10,35],[18,4,12,2],[19,4,13,2],[19,8,13,6,"state"],[19,13,13,11],[19,14,13,12,"sCount"],[19,20,13,18],[19,21,13,19,"startLine"],[19,30,13,28],[19,31,13,29],[19,34,13,32,"state"],[19,39,13,37],[19,40,13,38,"blkIndent"],[19,49,13,47],[19,53,13,51],[19,54,13,52],[19,56,13,54],[20,6,13,56],[20,13,13,63],[20,18,13,68],[21,4,13,70],[22,4,15,2],[22,8,15,6,"pos"],[22,11,15,9],[22,14,15,12],[22,15,15,13],[22,18,15,16,"max"],[22,21,15,19],[22,23,15,21],[23,6,15,23],[23,13,15,30],[23,18,15,35],[24,4,15,37],[25,4,17,2,"marker"],[25,10,17,8],[25,13,17,11,"state"],[25,18,17,16],[25,19,17,17,"src"],[25,22,17,20],[25,23,17,21,"charCodeAt"],[25,33,17,31],[25,34,17,32,"pos"],[25,37,17,35],[25,38,17,36],[26,4,19,2],[26,8,19,6,"marker"],[26,14,19,12],[26,19,19,17],[26,23,19,21],[26,35,19,32,"marker"],[26,41,19,38],[26,46,19,43],[26,50,19,47],[26,51,19,48],[26,60,19,57],[27,6,20,4],[27,13,20,11],[27,18,20,16],[28,4,21,2],[30,4,23,2],[31,4,24,2,"mem"],[31,7,24,5],[31,10,24,8,"pos"],[31,13,24,11],[32,4,25,2,"pos"],[32,7,25,5],[32,10,25,8,"state"],[32,15,25,13],[32,16,25,14,"skipChars"],[32,25,25,23],[32,26,25,24,"pos"],[32,29,25,27],[32,31,25,29,"marker"],[32,37,25,35],[32,38,25,36],[33,4,27,2,"len"],[33,7,27,5],[33,10,27,8,"pos"],[33,13,27,11],[33,16,27,14,"mem"],[33,19,27,17],[34,4,29,2],[34,8,29,6,"len"],[34,11,29,9],[34,14,29,12],[34,15,29,13],[34,17,29,15],[35,6,29,17],[35,13,29,24],[35,18,29,29],[36,4,29,31],[37,4,31,2,"markup"],[37,10,31,8],[37,13,31,11,"state"],[37,18,31,16],[37,19,31,17,"src"],[37,22,31,20],[37,23,31,21,"slice"],[37,28,31,26],[37,29,31,27,"mem"],[37,32,31,30],[37,34,31,32,"pos"],[37,37,31,35],[37,38,31,36],[38,4,32,2,"params"],[38,10,32,8],[38,13,32,11,"state"],[38,18,32,16],[38,19,32,17,"src"],[38,22,32,20],[38,23,32,21,"slice"],[38,28,32,26],[38,29,32,27,"pos"],[38,32,32,30],[38,34,32,32,"max"],[38,37,32,35],[38,38,32,36],[39,4,34,2],[39,8,34,6,"marker"],[39,14,34,12],[39,19,34,17],[39,23,34,21],[39,24,34,22],[39,33,34,31],[40,6,35,4],[40,10,35,8,"params"],[40,16,35,14],[40,17,35,15,"indexOf"],[40,24,35,22],[40,25,35,23,"String"],[40,31,35,29],[40,32,35,30,"fromCharCode"],[40,44,35,42],[40,45,35,43,"marker"],[40,51,35,49],[40,52,35,50],[40,53,35,51],[40,57,35,55],[40,58,35,56],[40,60,35,58],[41,8,36,6],[41,15,36,13],[41,20,36,18],[42,6,37,4],[43,4,38,2],[45,4,40,2],[46,4,41,2],[46,8,41,6,"silent"],[46,14,41,12],[46,16,41,14],[47,6,41,16],[47,13,41,23],[47,17,41,27],[48,4,41,29],[50,4,43,2],[51,4,44,2,"nextLine"],[51,12,44,10],[51,15,44,13,"startLine"],[51,24,44,22],[52,4,46,2],[52,13,46,11],[53,6,47,4,"nextLine"],[53,14,47,12],[53,16,47,14],[54,6,48,4],[54,10,48,8,"nextLine"],[54,18,48,16],[54,22,48,20,"endLine"],[54,29,48,27],[54,31,48,29],[55,8,49,6],[56,8,50,6],[57,8,51,6],[58,6,52,4],[59,6,54,4,"pos"],[59,9,54,7],[59,12,54,10,"mem"],[59,15,54,13],[59,18,54,16,"state"],[59,23,54,21],[59,24,54,22,"bMarks"],[59,30,54,28],[59,31,54,29,"nextLine"],[59,39,54,37],[59,40,54,38],[59,43,54,41,"state"],[59,48,54,46],[59,49,54,47,"tShift"],[59,55,54,53],[59,56,54,54,"nextLine"],[59,64,54,62],[59,65,54,63],[60,6,55,4,"max"],[60,9,55,7],[60,12,55,10,"state"],[60,17,55,15],[60,18,55,16,"eMarks"],[60,24,55,22],[60,25,55,23,"nextLine"],[60,33,55,31],[60,34,55,32],[61,6,57,4],[61,10,57,8,"pos"],[61,13,57,11],[61,16,57,14,"max"],[61,19,57,17],[61,23,57,21,"state"],[61,28,57,26],[61,29,57,27,"sCount"],[61,35,57,33],[61,36,57,34,"nextLine"],[61,44,57,42],[61,45,57,43],[61,48,57,46,"state"],[61,53,57,51],[61,54,57,52,"blkIndent"],[61,63,57,61],[61,65,57,63],[62,8,58,6],[63,8,59,6],[64,8,60,6],[65,8,61,6],[66,6,62,4],[67,6,64,4],[67,10,64,8,"state"],[67,15,64,13],[67,16,64,14,"src"],[67,19,64,17],[67,20,64,18,"charCodeAt"],[67,30,64,28],[67,31,64,29,"pos"],[67,34,64,32],[67,35,64,33],[67,40,64,38,"marker"],[67,46,64,44],[67,48,64,46],[68,8,64,48],[69,6,64,58],[70,6,66,4],[70,10,66,8,"state"],[70,15,66,13],[70,16,66,14,"sCount"],[70,22,66,20],[70,23,66,21,"nextLine"],[70,31,66,29],[70,32,66,30],[70,35,66,33,"state"],[70,40,66,38],[70,41,66,39,"blkIndent"],[70,50,66,48],[70,54,66,52],[70,55,66,53],[70,57,66,55],[71,8,67,6],[72,8,68,6],[73,6,69,4],[74,6,71,4,"pos"],[74,9,71,7],[74,12,71,10,"state"],[74,17,71,15],[74,18,71,16,"skipChars"],[74,27,71,25],[74,28,71,26,"pos"],[74,31,71,29],[74,33,71,31,"marker"],[74,39,71,37],[74,40,71,38],[76,6,73,4],[77,6,74,4],[77,10,74,8,"pos"],[77,13,74,11],[77,16,74,14,"mem"],[77,19,74,17],[77,22,74,20,"len"],[77,25,74,23],[77,27,74,25],[78,8,74,27],[79,6,74,37],[81,6,76,4],[82,6,77,4,"pos"],[82,9,77,7],[82,12,77,10,"state"],[82,17,77,15],[82,18,77,16,"skipSpaces"],[82,28,77,26],[82,29,77,27,"pos"],[82,32,77,30],[82,33,77,31],[83,6,79,4],[83,10,79,8,"pos"],[83,13,79,11],[83,16,79,14,"max"],[83,19,79,17],[83,21,79,19],[84,8,79,21],[85,6,79,31],[86,6,81,4,"haveEndMarker"],[86,19,81,17],[86,22,81,20],[86,26,81,24],[87,6,82,4],[88,6,83,4],[89,4,84,2],[91,4,86,2],[92,4,87,2,"len"],[92,7,87,5],[92,10,87,8,"state"],[92,15,87,13],[92,16,87,14,"sCount"],[92,22,87,20],[92,23,87,21,"startLine"],[92,32,87,30],[92,33,87,31],[93,4,89,2,"state"],[93,9,89,7],[93,10,89,8,"line"],[93,14,89,12],[93,17,89,15,"nextLine"],[93,25,89,23],[93,29,89,27,"haveEndMarker"],[93,42,89,40],[93,45,89,43],[93,46,89,44],[93,49,89,47],[93,50,89,48],[93,51,89,49],[94,4,91,2,"token"],[94,9,91,7],[94,12,91,18,"state"],[94,17,91,23],[94,18,91,24,"push"],[94,22,91,28],[94,23,91,29],[94,30,91,36],[94,32,91,38],[94,38,91,44],[94,40,91,46],[94,41,91,47],[94,42,91,48],[95,4,92,2,"token"],[95,9,92,7],[95,10,92,8,"info"],[95,14,92,12],[95,17,92,18,"params"],[95,23,92,24],[96,4,93,2,"token"],[96,9,93,7],[96,10,93,8,"content"],[96,17,93,15],[96,20,93,18,"state"],[96,25,93,23],[96,26,93,24,"getLines"],[96,34,93,32],[96,35,93,33,"startLine"],[96,44,93,42],[96,47,93,45],[96,48,93,46],[96,50,93,48,"nextLine"],[96,58,93,56],[96,60,93,58,"len"],[96,63,93,61],[96,65,93,63],[96,69,93,67],[96,70,93,68],[97,4,94,2,"token"],[97,9,94,7],[97,10,94,8,"markup"],[97,16,94,14],[97,19,94,18,"markup"],[97,25,94,24],[98,4,95,2,"token"],[98,9,95,7],[98,10,95,8,"map"],[98,13,95,11],[98,16,95,18],[98,17,95,20,"startLine"],[98,26,95,29],[98,28,95,31,"state"],[98,33,95,36],[98,34,95,37,"line"],[98,38,95,41],[98,39,95,43],[99,4,97,2],[99,11,97,9],[99,15,97,13],[100,2,98,0],[100,3,98,1],[101,0,98,2],[101,3]],"functionMap":{"names":["<global>","fence"],"mappings":"AAA;iBCK;CD4F"},"hasCjsExports":true},"type":"js/module"}]}