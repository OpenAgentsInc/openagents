{"dependencies":[{"name":"../token","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":12,"index":50},"end":{"line":5,"column":31,"index":69}}],"key":"EVAg+/mtaenO5+kIpcn+ZhqLr/E=","exportNames":["*"],"imports":1}},{"name":"../common/utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":14,"index":85},"end":{"line":6,"column":40,"index":111}}],"key":"s68H+Qrc8so5XeN472FI/1YNbEY=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // Parser state class\n\n  'use strict';\n\n  var Token = require(_dependencyMap[0]);\n  var isSpace = require(_dependencyMap[1]).isSpace;\n  function StateBlock(src, md, env, tokens) {\n    var ch, s, start, pos, len, indent, offset, indent_found;\n    this.src = src;\n\n    // link to parser instance\n    this.md = md;\n    this.env = env;\n\n    //\n    // Internal state vartiables\n    //\n\n    this.tokens = tokens;\n    this.bMarks = []; // line begin offsets for fast jumps\n    this.eMarks = []; // line end offsets for fast jumps\n    this.tShift = []; // offsets of the first non-space characters (tabs not expanded)\n    this.sCount = []; // indents for each line (tabs expanded)\n\n    // An amount of virtual spaces (tabs expanded) between beginning\n    // of each line (bMarks) and real beginning of that line.\n    //\n    // It exists only as a hack because blockquotes override bMarks\n    // losing information in the process.\n    //\n    // It's used only when expanding tabs, you can think about it as\n    // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n    // means first tab should be expanded to 4-21%4 === 3 spaces.\n    //\n    this.bsCount = [];\n\n    // block parser variables\n    this.blkIndent = 0; // required block content indent (for example, if we are\n    // inside a list, it would be positioned after list marker)\n    this.line = 0; // line index in src\n    this.lineMax = 0; // lines count\n    this.tight = false; // loose/tight mode for lists\n    this.ddIndent = -1; // indent of the current dd block (-1 if there isn't any)\n    this.listIndent = -1; // indent of the current list block (-1 if there isn't any)\n\n    // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n    // used in lists to determine if they interrupt a paragraph\n    this.parentType = 'root';\n    this.level = 0;\n\n    // renderer\n    this.result = '';\n\n    // Create caches\n    // Generate markers.\n    s = this.src;\n    indent_found = false;\n    for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {\n      ch = s.charCodeAt(pos);\n      if (!indent_found) {\n        if (isSpace(ch)) {\n          indent++;\n          if (ch === 0x09) {\n            offset += 4 - offset % 4;\n          } else {\n            offset++;\n          }\n          continue;\n        } else {\n          indent_found = true;\n        }\n      }\n      if (ch === 0x0A || pos === len - 1) {\n        if (ch !== 0x0A) {\n          pos++;\n        }\n        this.bMarks.push(start);\n        this.eMarks.push(pos);\n        this.tShift.push(indent);\n        this.sCount.push(offset);\n        this.bsCount.push(0);\n        indent_found = false;\n        indent = 0;\n        offset = 0;\n        start = pos + 1;\n      }\n    }\n\n    // Push fake entry to simplify cache bounds checks\n    this.bMarks.push(s.length);\n    this.eMarks.push(s.length);\n    this.tShift.push(0);\n    this.sCount.push(0);\n    this.bsCount.push(0);\n    this.lineMax = this.bMarks.length - 1; // don't count last fake line\n  }\n\n  // Push new token to \"stream\".\n  //\n  StateBlock.prototype.push = function (type, tag, nesting) {\n    var token = new Token(type, tag, nesting);\n    token.block = true;\n    if (nesting < 0) this.level--; // closing tag\n    token.level = this.level;\n    if (nesting > 0) this.level++; // opening tag\n\n    this.tokens.push(token);\n    return token;\n  };\n  StateBlock.prototype.isEmpty = function isEmpty(line) {\n    return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n  };\n  StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n    for (var max = this.lineMax; from < max; from++) {\n      if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n        break;\n      }\n    }\n    return from;\n  };\n\n  // Skip spaces from given position.\n  StateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n    var ch;\n    for (var max = this.src.length; pos < max; pos++) {\n      ch = this.src.charCodeAt(pos);\n      if (!isSpace(ch)) {\n        break;\n      }\n    }\n    return pos;\n  };\n\n  // Skip spaces from given position in reverse.\n  StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n    if (pos <= min) {\n      return pos;\n    }\n    while (pos > min) {\n      if (!isSpace(this.src.charCodeAt(--pos))) {\n        return pos + 1;\n      }\n    }\n    return pos;\n  };\n\n  // Skip char codes from given position\n  StateBlock.prototype.skipChars = function skipChars(pos, code) {\n    for (var max = this.src.length; pos < max; pos++) {\n      if (this.src.charCodeAt(pos) !== code) {\n        break;\n      }\n    }\n    return pos;\n  };\n\n  // Skip char codes reverse from given position - 1\n  StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n    if (pos <= min) {\n      return pos;\n    }\n    while (pos > min) {\n      if (code !== this.src.charCodeAt(--pos)) {\n        return pos + 1;\n      }\n    }\n    return pos;\n  };\n\n  // cut lines range from source.\n  StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n    var i,\n      lineIndent,\n      ch,\n      first,\n      last,\n      queue,\n      lineStart,\n      line = begin;\n    if (begin >= end) {\n      return '';\n    }\n    queue = new Array(end - begin);\n    for (i = 0; line < end; line++, i++) {\n      lineIndent = 0;\n      lineStart = first = this.bMarks[line];\n      if (line + 1 < end || keepLastLF) {\n        // No need for bounds check because we have fake entry on tail.\n        last = this.eMarks[line] + 1;\n      } else {\n        last = this.eMarks[line];\n      }\n      while (first < last && lineIndent < indent) {\n        ch = this.src.charCodeAt(first);\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n          } else {\n            lineIndent++;\n          }\n        } else if (first - lineStart < this.tShift[line]) {\n          // patched tShift masked characters to look like spaces (blockquotes, list markers)\n          lineIndent++;\n        } else {\n          break;\n        }\n        first++;\n      }\n      if (lineIndent > indent) {\n        // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n        // with indent=2 becomes '  \\tfoobar'\n        queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n      } else {\n        queue[i] = this.src.slice(first, last);\n      }\n    }\n    return queue.join('');\n  };\n\n  // re-export Token class to use in block rules\n  StateBlock.prototype.Token = Token;\n  module.exports = StateBlock;\n});","lineCount":224,"map":[[2,2,1,0],[4,2,3,0],[4,14,3,12],[6,2,5,0],[6,6,5,4,"Token"],[6,11,5,9],[6,14,5,12,"require"],[6,21,5,19],[6,22,5,19,"_dependencyMap"],[6,36,5,19],[6,39,5,30],[6,40,5,31],[7,2,6,0],[7,6,6,4,"isSpace"],[7,13,6,11],[7,16,6,14,"require"],[7,23,6,21],[7,24,6,21,"_dependencyMap"],[7,38,6,21],[7,41,6,39],[7,42,6,40],[7,43,6,41,"isSpace"],[7,50,6,48],[8,2,9,0],[8,11,9,9,"StateBlock"],[8,21,9,19,"StateBlock"],[8,22,9,20,"src"],[8,25,9,23],[8,27,9,25,"md"],[8,29,9,27],[8,31,9,29,"env"],[8,34,9,32],[8,36,9,34,"tokens"],[8,42,9,40],[8,44,9,42],[9,4,10,2],[9,8,10,6,"ch"],[9,10,10,8],[9,12,10,10,"s"],[9,13,10,11],[9,15,10,13,"start"],[9,20,10,18],[9,22,10,20,"pos"],[9,25,10,23],[9,27,10,25,"len"],[9,30,10,28],[9,32,10,30,"indent"],[9,38,10,36],[9,40,10,38,"offset"],[9,46,10,44],[9,48,10,46,"indent_found"],[9,60,10,58],[10,4,12,2],[10,8,12,6],[10,9,12,7,"src"],[10,12,12,10],[10,15,12,13,"src"],[10,18,12,16],[12,4,14,2],[13,4,15,2],[13,8,15,6],[13,9,15,7,"md"],[13,11,15,9],[13,14,15,16,"md"],[13,16,15,18],[14,4,17,2],[14,8,17,6],[14,9,17,7,"env"],[14,12,17,10],[14,15,17,13,"env"],[14,18,17,16],[16,4,19,2],[17,4,20,2],[18,4,21,2],[20,4,23,2],[20,8,23,6],[20,9,23,7,"tokens"],[20,15,23,13],[20,18,23,16,"tokens"],[20,24,23,22],[21,4,25,2],[21,8,25,6],[21,9,25,7,"bMarks"],[21,15,25,13],[21,18,25,16],[21,20,25,18],[21,21,25,19],[21,22,25,21],[22,4,26,2],[22,8,26,6],[22,9,26,7,"eMarks"],[22,15,26,13],[22,18,26,16],[22,20,26,18],[22,21,26,19],[22,22,26,21],[23,4,27,2],[23,8,27,6],[23,9,27,7,"tShift"],[23,15,27,13],[23,18,27,16],[23,20,27,18],[23,21,27,19],[23,22,27,21],[24,4,28,2],[24,8,28,6],[24,9,28,7,"sCount"],[24,15,28,13],[24,18,28,16],[24,20,28,18],[24,21,28,19],[24,22,28,21],[26,4,30,2],[27,4,31,2],[28,4,32,2],[29,4,33,2],[30,4,34,2],[31,4,35,2],[32,4,36,2],[33,4,37,2],[34,4,38,2],[35,4,39,2],[36,4,40,2],[36,8,40,6],[36,9,40,7,"bsCount"],[36,16,40,14],[36,19,40,17],[36,21,40,19],[38,4,42,2],[39,4,43,2],[39,8,43,6],[39,9,43,7,"blkIndent"],[39,18,43,16],[39,21,43,20],[39,22,43,21],[39,23,43,22],[39,24,43,23],[40,4,44,23],[41,4,45,2],[41,8,45,6],[41,9,45,7,"line"],[41,13,45,11],[41,16,45,20],[41,17,45,21],[41,18,45,22],[41,19,45,23],[42,4,46,2],[42,8,46,6],[42,9,46,7,"lineMax"],[42,16,46,14],[42,19,46,20],[42,20,46,21],[42,21,46,22],[42,22,46,23],[43,4,47,2],[43,8,47,6],[43,9,47,7,"tight"],[43,14,47,12],[43,17,47,20],[43,22,47,25],[43,23,47,26],[43,24,47,28],[44,4,48,2],[44,8,48,6],[44,9,48,7,"ddIndent"],[44,17,48,15],[44,22,48,22],[44,23,48,23],[44,24,48,24],[45,4,49,2],[45,8,49,6],[45,9,49,7,"listIndent"],[45,19,49,17],[45,24,49,22],[45,25,49,23],[45,26,49,24],[47,4,51,2],[48,4,52,2],[49,4,53,2],[49,8,53,6],[49,9,53,7,"parentType"],[49,19,53,17],[49,22,53,20],[49,28,53,26],[50,4,55,2],[50,8,55,6],[50,9,55,7,"level"],[50,14,55,12],[50,17,55,15],[50,18,55,16],[52,4,57,2],[53,4,58,2],[53,8,58,6],[53,9,58,7,"result"],[53,15,58,13],[53,18,58,16],[53,20,58,18],[55,4,60,2],[56,4,61,2],[57,4,62,2,"s"],[57,5,62,3],[57,8,62,6],[57,12,62,10],[57,13,62,11,"src"],[57,16,62,14],[58,4,63,2,"indent_found"],[58,16,63,14],[58,19,63,17],[58,24,63,22],[59,4,65,2],[59,9,65,7,"start"],[59,14,65,12],[59,17,65,15,"pos"],[59,20,65,18],[59,23,65,21,"indent"],[59,29,65,27],[59,32,65,30,"offset"],[59,38,65,36],[59,41,65,39],[59,42,65,40],[59,44,65,42,"len"],[59,47,65,45],[59,50,65,48,"s"],[59,51,65,49],[59,52,65,50,"length"],[59,58,65,56],[59,60,65,58,"pos"],[59,63,65,61],[59,66,65,64,"len"],[59,69,65,67],[59,71,65,69,"pos"],[59,74,65,72],[59,76,65,74],[59,78,65,76],[60,6,66,4,"ch"],[60,8,66,6],[60,11,66,9,"s"],[60,12,66,10],[60,13,66,11,"charCodeAt"],[60,23,66,21],[60,24,66,22,"pos"],[60,27,66,25],[60,28,66,26],[61,6,68,4],[61,10,68,8],[61,11,68,9,"indent_found"],[61,23,68,21],[61,25,68,23],[62,8,69,6],[62,12,69,10,"isSpace"],[62,19,69,17],[62,20,69,18,"ch"],[62,22,69,20],[62,23,69,21],[62,25,69,23],[63,10,70,8,"indent"],[63,16,70,14],[63,18,70,16],[64,10,72,8],[64,14,72,12,"ch"],[64,16,72,14],[64,21,72,19],[64,25,72,23],[64,27,72,25],[65,12,73,10,"offset"],[65,18,73,16],[65,22,73,20],[65,23,73,21],[65,26,73,24,"offset"],[65,32,73,30],[65,35,73,33],[65,36,73,34],[66,10,74,8],[66,11,74,9],[66,17,74,15],[67,12,75,10,"offset"],[67,18,75,16],[67,20,75,18],[68,10,76,8],[69,10,77,8],[70,8,78,6],[70,9,78,7],[70,15,78,13],[71,10,79,8,"indent_found"],[71,22,79,20],[71,25,79,23],[71,29,79,27],[72,8,80,6],[73,6,81,4],[74,6,83,4],[74,10,83,8,"ch"],[74,12,83,10],[74,17,83,15],[74,21,83,19],[74,25,83,23,"pos"],[74,28,83,26],[74,33,83,31,"len"],[74,36,83,34],[74,39,83,37],[74,40,83,38],[74,42,83,40],[75,8,84,6],[75,12,84,10,"ch"],[75,14,84,12],[75,19,84,17],[75,23,84,21],[75,25,84,23],[76,10,84,25,"pos"],[76,13,84,28],[76,15,84,30],[77,8,84,32],[78,8,85,6],[78,12,85,10],[78,13,85,11,"bMarks"],[78,19,85,17],[78,20,85,18,"push"],[78,24,85,22],[78,25,85,23,"start"],[78,30,85,28],[78,31,85,29],[79,8,86,6],[79,12,86,10],[79,13,86,11,"eMarks"],[79,19,86,17],[79,20,86,18,"push"],[79,24,86,22],[79,25,86,23,"pos"],[79,28,86,26],[79,29,86,27],[80,8,87,6],[80,12,87,10],[80,13,87,11,"tShift"],[80,19,87,17],[80,20,87,18,"push"],[80,24,87,22],[80,25,87,23,"indent"],[80,31,87,29],[80,32,87,30],[81,8,88,6],[81,12,88,10],[81,13,88,11,"sCount"],[81,19,88,17],[81,20,88,18,"push"],[81,24,88,22],[81,25,88,23,"offset"],[81,31,88,29],[81,32,88,30],[82,8,89,6],[82,12,89,10],[82,13,89,11,"bsCount"],[82,20,89,18],[82,21,89,19,"push"],[82,25,89,23],[82,26,89,24],[82,27,89,25],[82,28,89,26],[83,8,91,6,"indent_found"],[83,20,91,18],[83,23,91,21],[83,28,91,26],[84,8,92,6,"indent"],[84,14,92,12],[84,17,92,15],[84,18,92,16],[85,8,93,6,"offset"],[85,14,93,12],[85,17,93,15],[85,18,93,16],[86,8,94,6,"start"],[86,13,94,11],[86,16,94,14,"pos"],[86,19,94,17],[86,22,94,20],[86,23,94,21],[87,6,95,4],[88,4,96,2],[90,4,98,2],[91,4,99,2],[91,8,99,6],[91,9,99,7,"bMarks"],[91,15,99,13],[91,16,99,14,"push"],[91,20,99,18],[91,21,99,19,"s"],[91,22,99,20],[91,23,99,21,"length"],[91,29,99,27],[91,30,99,28],[92,4,100,2],[92,8,100,6],[92,9,100,7,"eMarks"],[92,15,100,13],[92,16,100,14,"push"],[92,20,100,18],[92,21,100,19,"s"],[92,22,100,20],[92,23,100,21,"length"],[92,29,100,27],[92,30,100,28],[93,4,101,2],[93,8,101,6],[93,9,101,7,"tShift"],[93,15,101,13],[93,16,101,14,"push"],[93,20,101,18],[93,21,101,19],[93,22,101,20],[93,23,101,21],[94,4,102,2],[94,8,102,6],[94,9,102,7,"sCount"],[94,15,102,13],[94,16,102,14,"push"],[94,20,102,18],[94,21,102,19],[94,22,102,20],[94,23,102,21],[95,4,103,2],[95,8,103,6],[95,9,103,7,"bsCount"],[95,16,103,14],[95,17,103,15,"push"],[95,21,103,19],[95,22,103,20],[95,23,103,21],[95,24,103,22],[96,4,105,2],[96,8,105,6],[96,9,105,7,"lineMax"],[96,16,105,14],[96,19,105,17],[96,23,105,21],[96,24,105,22,"bMarks"],[96,30,105,28],[96,31,105,29,"length"],[96,37,105,35],[96,40,105,38],[96,41,105,39],[96,42,105,40],[96,43,105,41],[97,2,106,0],[99,2,108,0],[100,2,109,0],[101,2,110,0,"StateBlock"],[101,12,110,10],[101,13,110,11,"prototype"],[101,22,110,20],[101,23,110,21,"push"],[101,27,110,25],[101,30,110,28],[101,40,110,38,"type"],[101,44,110,42],[101,46,110,44,"tag"],[101,49,110,47],[101,51,110,49,"nesting"],[101,58,110,56],[101,60,110,58],[102,4,111,2],[102,8,111,6,"token"],[102,13,111,11],[102,16,111,14],[102,20,111,18,"Token"],[102,25,111,23],[102,26,111,24,"type"],[102,30,111,28],[102,32,111,30,"tag"],[102,35,111,33],[102,37,111,35,"nesting"],[102,44,111,42],[102,45,111,43],[103,4,112,2,"token"],[103,9,112,7],[103,10,112,8,"block"],[103,15,112,13],[103,18,112,16],[103,22,112,20],[104,4,114,2],[104,8,114,6,"nesting"],[104,15,114,13],[104,18,114,16],[104,19,114,17],[104,21,114,19],[104,25,114,23],[104,26,114,24,"level"],[104,31,114,29],[104,33,114,31],[104,34,114,32],[104,35,114,33],[105,4,115,2,"token"],[105,9,115,7],[105,10,115,8,"level"],[105,15,115,13],[105,18,115,16],[105,22,115,20],[105,23,115,21,"level"],[105,28,115,26],[106,4,116,2],[106,8,116,6,"nesting"],[106,15,116,13],[106,18,116,16],[106,19,116,17],[106,21,116,19],[106,25,116,23],[106,26,116,24,"level"],[106,31,116,29],[106,33,116,31],[106,34,116,32],[106,35,116,33],[108,4,118,2],[108,8,118,6],[108,9,118,7,"tokens"],[108,15,118,13],[108,16,118,14,"push"],[108,20,118,18],[108,21,118,19,"token"],[108,26,118,24],[108,27,118,25],[109,4,119,2],[109,11,119,9,"token"],[109,16,119,14],[110,2,120,0],[110,3,120,1],[111,2,122,0,"StateBlock"],[111,12,122,10],[111,13,122,11,"prototype"],[111,22,122,20],[111,23,122,21,"isEmpty"],[111,30,122,28],[111,33,122,31],[111,42,122,40,"isEmpty"],[111,49,122,47,"isEmpty"],[111,50,122,48,"line"],[111,54,122,52],[111,56,122,54],[112,4,123,2],[112,11,123,9],[112,15,123,13],[112,16,123,14,"bMarks"],[112,22,123,20],[112,23,123,21,"line"],[112,27,123,25],[112,28,123,26],[112,31,123,29],[112,35,123,33],[112,36,123,34,"tShift"],[112,42,123,40],[112,43,123,41,"line"],[112,47,123,45],[112,48,123,46],[112,52,123,50],[112,56,123,54],[112,57,123,55,"eMarks"],[112,63,123,61],[112,64,123,62,"line"],[112,68,123,66],[112,69,123,67],[113,2,124,0],[113,3,124,1],[114,2,126,0,"StateBlock"],[114,12,126,10],[114,13,126,11,"prototype"],[114,22,126,20],[114,23,126,21,"skipEmptyLines"],[114,37,126,35],[114,40,126,38],[114,49,126,47,"skipEmptyLines"],[114,63,126,61,"skipEmptyLines"],[114,64,126,62,"from"],[114,68,126,66],[114,70,126,68],[115,4,127,2],[115,9,127,7],[115,13,127,11,"max"],[115,16,127,14],[115,19,127,17],[115,23,127,21],[115,24,127,22,"lineMax"],[115,31,127,29],[115,33,127,31,"from"],[115,37,127,35],[115,40,127,38,"max"],[115,43,127,41],[115,45,127,43,"from"],[115,49,127,47],[115,51,127,49],[115,53,127,51],[116,6,128,4],[116,10,128,8],[116,14,128,12],[116,15,128,13,"bMarks"],[116,21,128,19],[116,22,128,20,"from"],[116,26,128,24],[116,27,128,25],[116,30,128,28],[116,34,128,32],[116,35,128,33,"tShift"],[116,41,128,39],[116,42,128,40,"from"],[116,46,128,44],[116,47,128,45],[116,50,128,48],[116,54,128,52],[116,55,128,53,"eMarks"],[116,61,128,59],[116,62,128,60,"from"],[116,66,128,64],[116,67,128,65],[116,69,128,67],[117,8,129,6],[118,6,130,4],[119,4,131,2],[120,4,132,2],[120,11,132,9,"from"],[120,15,132,13],[121,2,133,0],[121,3,133,1],[123,2,135,0],[124,2,136,0,"StateBlock"],[124,12,136,10],[124,13,136,11,"prototype"],[124,22,136,20],[124,23,136,21,"skipSpaces"],[124,33,136,31],[124,36,136,34],[124,45,136,43,"skipSpaces"],[124,55,136,53,"skipSpaces"],[124,56,136,54,"pos"],[124,59,136,57],[124,61,136,59],[125,4,137,2],[125,8,137,6,"ch"],[125,10,137,8],[126,4,139,2],[126,9,139,7],[126,13,139,11,"max"],[126,16,139,14],[126,19,139,17],[126,23,139,21],[126,24,139,22,"src"],[126,27,139,25],[126,28,139,26,"length"],[126,34,139,32],[126,36,139,34,"pos"],[126,39,139,37],[126,42,139,40,"max"],[126,45,139,43],[126,47,139,45,"pos"],[126,50,139,48],[126,52,139,50],[126,54,139,52],[127,6,140,4,"ch"],[127,8,140,6],[127,11,140,9],[127,15,140,13],[127,16,140,14,"src"],[127,19,140,17],[127,20,140,18,"charCodeAt"],[127,30,140,28],[127,31,140,29,"pos"],[127,34,140,32],[127,35,140,33],[128,6,141,4],[128,10,141,8],[128,11,141,9,"isSpace"],[128,18,141,16],[128,19,141,17,"ch"],[128,21,141,19],[128,22,141,20],[128,24,141,22],[129,8,141,24],[130,6,141,31],[131,4,142,2],[132,4,143,2],[132,11,143,9,"pos"],[132,14,143,12],[133,2,144,0],[133,3,144,1],[135,2,146,0],[136,2,147,0,"StateBlock"],[136,12,147,10],[136,13,147,11,"prototype"],[136,22,147,20],[136,23,147,21,"skipSpacesBack"],[136,37,147,35],[136,40,147,38],[136,49,147,47,"skipSpacesBack"],[136,63,147,61,"skipSpacesBack"],[136,64,147,62,"pos"],[136,67,147,65],[136,69,147,67,"min"],[136,72,147,70],[136,74,147,72],[137,4,148,2],[137,8,148,6,"pos"],[137,11,148,9],[137,15,148,13,"min"],[137,18,148,16],[137,20,148,18],[138,6,148,20],[138,13,148,27,"pos"],[138,16,148,30],[139,4,148,32],[140,4,150,2],[140,11,150,9,"pos"],[140,14,150,12],[140,17,150,15,"min"],[140,20,150,18],[140,22,150,20],[141,6,151,4],[141,10,151,8],[141,11,151,9,"isSpace"],[141,18,151,16],[141,19,151,17],[141,23,151,21],[141,24,151,22,"src"],[141,27,151,25],[141,28,151,26,"charCodeAt"],[141,38,151,36],[141,39,151,37],[141,41,151,39,"pos"],[141,44,151,42],[141,45,151,43],[141,46,151,44],[141,48,151,46],[142,8,151,48],[142,15,151,55,"pos"],[142,18,151,58],[142,21,151,61],[142,22,151,62],[143,6,151,64],[144,4,152,2],[145,4,153,2],[145,11,153,9,"pos"],[145,14,153,12],[146,2,154,0],[146,3,154,1],[148,2,156,0],[149,2,157,0,"StateBlock"],[149,12,157,10],[149,13,157,11,"prototype"],[149,22,157,20],[149,23,157,21,"skipChars"],[149,32,157,30],[149,35,157,33],[149,44,157,42,"skipChars"],[149,53,157,51,"skipChars"],[149,54,157,52,"pos"],[149,57,157,55],[149,59,157,57,"code"],[149,63,157,61],[149,65,157,63],[150,4,158,2],[150,9,158,7],[150,13,158,11,"max"],[150,16,158,14],[150,19,158,17],[150,23,158,21],[150,24,158,22,"src"],[150,27,158,25],[150,28,158,26,"length"],[150,34,158,32],[150,36,158,34,"pos"],[150,39,158,37],[150,42,158,40,"max"],[150,45,158,43],[150,47,158,45,"pos"],[150,50,158,48],[150,52,158,50],[150,54,158,52],[151,6,159,4],[151,10,159,8],[151,14,159,12],[151,15,159,13,"src"],[151,18,159,16],[151,19,159,17,"charCodeAt"],[151,29,159,27],[151,30,159,28,"pos"],[151,33,159,31],[151,34,159,32],[151,39,159,37,"code"],[151,43,159,41],[151,45,159,43],[152,8,159,45],[153,6,159,52],[154,4,160,2],[155,4,161,2],[155,11,161,9,"pos"],[155,14,161,12],[156,2,162,0],[156,3,162,1],[158,2,164,0],[159,2,165,0,"StateBlock"],[159,12,165,10],[159,13,165,11,"prototype"],[159,22,165,20],[159,23,165,21,"skipCharsBack"],[159,36,165,34],[159,39,165,37],[159,48,165,46,"skipCharsBack"],[159,61,165,59,"skipCharsBack"],[159,62,165,60,"pos"],[159,65,165,63],[159,67,165,65,"code"],[159,71,165,69],[159,73,165,71,"min"],[159,76,165,74],[159,78,165,76],[160,4,166,2],[160,8,166,6,"pos"],[160,11,166,9],[160,15,166,13,"min"],[160,18,166,16],[160,20,166,18],[161,6,166,20],[161,13,166,27,"pos"],[161,16,166,30],[162,4,166,32],[163,4,168,2],[163,11,168,9,"pos"],[163,14,168,12],[163,17,168,15,"min"],[163,20,168,18],[163,22,168,20],[164,6,169,4],[164,10,169,8,"code"],[164,14,169,12],[164,19,169,17],[164,23,169,21],[164,24,169,22,"src"],[164,27,169,25],[164,28,169,26,"charCodeAt"],[164,38,169,36],[164,39,169,37],[164,41,169,39,"pos"],[164,44,169,42],[164,45,169,43],[164,47,169,45],[165,8,169,47],[165,15,169,54,"pos"],[165,18,169,57],[165,21,169,60],[165,22,169,61],[166,6,169,63],[167,4,170,2],[168,4,171,2],[168,11,171,9,"pos"],[168,14,171,12],[169,2,172,0],[169,3,172,1],[171,2,174,0],[172,2,175,0,"StateBlock"],[172,12,175,10],[172,13,175,11,"prototype"],[172,22,175,20],[172,23,175,21,"getLines"],[172,31,175,29],[172,34,175,32],[172,43,175,41,"getLines"],[172,51,175,49,"getLines"],[172,52,175,50,"begin"],[172,57,175,55],[172,59,175,57,"end"],[172,62,175,60],[172,64,175,62,"indent"],[172,70,175,68],[172,72,175,70,"keepLastLF"],[172,82,175,80],[172,84,175,82],[173,4,176,2],[173,8,176,6,"i"],[173,9,176,7],[174,6,176,9,"lineIndent"],[174,16,176,19],[175,6,176,21,"ch"],[175,8,176,23],[176,6,176,25,"first"],[176,11,176,30],[177,6,176,32,"last"],[177,10,176,36],[178,6,176,38,"queue"],[178,11,176,43],[179,6,176,45,"lineStart"],[179,15,176,54],[180,6,177,6,"line"],[180,10,177,10],[180,13,177,13,"begin"],[180,18,177,18],[181,4,179,2],[181,8,179,6,"begin"],[181,13,179,11],[181,17,179,15,"end"],[181,20,179,18],[181,22,179,20],[182,6,180,4],[182,13,180,11],[182,15,180,13],[183,4,181,2],[184,4,183,2,"queue"],[184,9,183,7],[184,12,183,10],[184,16,183,14,"Array"],[184,21,183,19],[184,22,183,20,"end"],[184,25,183,23],[184,28,183,26,"begin"],[184,33,183,31],[184,34,183,32],[185,4,185,2],[185,9,185,7,"i"],[185,10,185,8],[185,13,185,11],[185,14,185,12],[185,16,185,14,"line"],[185,20,185,18],[185,23,185,21,"end"],[185,26,185,24],[185,28,185,26,"line"],[185,32,185,30],[185,34,185,32],[185,36,185,34,"i"],[185,37,185,35],[185,39,185,37],[185,41,185,39],[186,6,186,4,"lineIndent"],[186,16,186,14],[186,19,186,17],[186,20,186,18],[187,6,187,4,"lineStart"],[187,15,187,13],[187,18,187,16,"first"],[187,23,187,21],[187,26,187,24],[187,30,187,28],[187,31,187,29,"bMarks"],[187,37,187,35],[187,38,187,36,"line"],[187,42,187,40],[187,43,187,41],[188,6,189,4],[188,10,189,8,"line"],[188,14,189,12],[188,17,189,15],[188,18,189,16],[188,21,189,19,"end"],[188,24,189,22],[188,28,189,26,"keepLastLF"],[188,38,189,36],[188,40,189,38],[189,8,190,6],[190,8,191,6,"last"],[190,12,191,10],[190,15,191,13],[190,19,191,17],[190,20,191,18,"eMarks"],[190,26,191,24],[190,27,191,25,"line"],[190,31,191,29],[190,32,191,30],[190,35,191,33],[190,36,191,34],[191,6,192,4],[191,7,192,5],[191,13,192,11],[192,8,193,6,"last"],[192,12,193,10],[192,15,193,13],[192,19,193,17],[192,20,193,18,"eMarks"],[192,26,193,24],[192,27,193,25,"line"],[192,31,193,29],[192,32,193,30],[193,6,194,4],[194,6,196,4],[194,13,196,11,"first"],[194,18,196,16],[194,21,196,19,"last"],[194,25,196,23],[194,29,196,27,"lineIndent"],[194,39,196,37],[194,42,196,40,"indent"],[194,48,196,46],[194,50,196,48],[195,8,197,6,"ch"],[195,10,197,8],[195,13,197,11],[195,17,197,15],[195,18,197,16,"src"],[195,21,197,19],[195,22,197,20,"charCodeAt"],[195,32,197,30],[195,33,197,31,"first"],[195,38,197,36],[195,39,197,37],[196,8,199,6],[196,12,199,10,"isSpace"],[196,19,199,17],[196,20,199,18,"ch"],[196,22,199,20],[196,23,199,21],[196,25,199,23],[197,10,200,8],[197,14,200,12,"ch"],[197,16,200,14],[197,21,200,19],[197,25,200,23],[197,27,200,25],[198,12,201,10,"lineIndent"],[198,22,201,20],[198,26,201,24],[198,27,201,25],[198,30,201,28],[198,31,201,29,"lineIndent"],[198,41,201,39],[198,44,201,42],[198,48,201,46],[198,49,201,47,"bsCount"],[198,56,201,54],[198,57,201,55,"line"],[198,61,201,59],[198,62,201,60],[198,66,201,64],[198,67,201,65],[199,10,202,8],[199,11,202,9],[199,17,202,15],[200,12,203,10,"lineIndent"],[200,22,203,20],[200,24,203,22],[201,10,204,8],[202,8,205,6],[202,9,205,7],[202,15,205,13],[202,19,205,17,"first"],[202,24,205,22],[202,27,205,25,"lineStart"],[202,36,205,34],[202,39,205,37],[202,43,205,41],[202,44,205,42,"tShift"],[202,50,205,48],[202,51,205,49,"line"],[202,55,205,53],[202,56,205,54],[202,58,205,56],[203,10,206,8],[204,10,207,8,"lineIndent"],[204,20,207,18],[204,22,207,20],[205,8,208,6],[205,9,208,7],[205,15,208,13],[206,10,209,8],[207,8,210,6],[208,8,212,6,"first"],[208,13,212,11],[208,15,212,13],[209,6,213,4],[210,6,215,4],[210,10,215,8,"lineIndent"],[210,20,215,18],[210,23,215,21,"indent"],[210,29,215,27],[210,31,215,29],[211,8,216,6],[212,8,217,6],[213,8,218,6,"queue"],[213,13,218,11],[213,14,218,12,"i"],[213,15,218,13],[213,16,218,14],[213,19,218,17],[213,23,218,21,"Array"],[213,28,218,26],[213,29,218,27,"lineIndent"],[213,39,218,37],[213,42,218,40,"indent"],[213,48,218,46],[213,51,218,49],[213,52,218,50],[213,53,218,51],[213,54,218,52,"join"],[213,58,218,56],[213,59,218,57],[213,62,218,60],[213,63,218,61],[213,66,218,64],[213,70,218,68],[213,71,218,69,"src"],[213,74,218,72],[213,75,218,73,"slice"],[213,80,218,78],[213,81,218,79,"first"],[213,86,218,84],[213,88,218,86,"last"],[213,92,218,90],[213,93,218,91],[214,6,219,4],[214,7,219,5],[214,13,219,11],[215,8,220,6,"queue"],[215,13,220,11],[215,14,220,12,"i"],[215,15,220,13],[215,16,220,14],[215,19,220,17],[215,23,220,21],[215,24,220,22,"src"],[215,27,220,25],[215,28,220,26,"slice"],[215,33,220,31],[215,34,220,32,"first"],[215,39,220,37],[215,41,220,39,"last"],[215,45,220,43],[215,46,220,44],[216,6,221,4],[217,4,222,2],[218,4,224,2],[218,11,224,9,"queue"],[218,16,224,14],[218,17,224,15,"join"],[218,21,224,19],[218,22,224,20],[218,24,224,22],[218,25,224,23],[219,2,225,0],[219,3,225,1],[221,2,227,0],[222,2,228,0,"StateBlock"],[222,12,228,10],[222,13,228,11,"prototype"],[222,22,228,20],[222,23,228,21,"Token"],[222,28,228,26],[222,31,228,29,"Token"],[222,36,228,34],[223,2,231,0,"module"],[223,8,231,6],[223,9,231,7,"exports"],[223,16,231,14],[223,19,231,17,"StateBlock"],[223,29,231,27],[224,0,231,28],[224,3]],"functionMap":{"names":["<global>","StateBlock","StateBlock.prototype.push","isEmpty","skipEmptyLines","skipSpaces","skipSpacesBack","skipChars","skipCharsBack","getLines"],"mappings":"AAA;ACQ;CDiG;4BEI;CFU;+BGE;CHE;sCIE;CJO;kCKG;CLQ;sCMG;CNO;iCOG;CPK;qCQG;CRO;gCSG;CTkD"},"hasCjsExports":true},"type":"js/module"}]}