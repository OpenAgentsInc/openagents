{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var safeIsNaN = Number.isNaN || function ponyfill(value) {\n    return typeof value === 'number' && value !== value;\n  };\n  function isEqual(first, second) {\n    if (first === second) {\n      return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n      return true;\n    }\n    return false;\n  }\n  function areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n      return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n      if (!isEqual(newInputs[i], lastInputs[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function memoizeOne(resultFn, isEqual) {\n    if (isEqual === undefined) {\n      isEqual = areInputsEqual;\n    }\n    var lastThis;\n    var lastArgs = [];\n    var lastResult;\n    var calledOnce = false;\n    function memoized() {\n      var newArgs = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        newArgs[_i] = arguments[_i];\n      }\n      if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n        return lastResult;\n      }\n      lastResult = resultFn.apply(this, newArgs);\n      calledOnce = true;\n      lastThis = this;\n      lastArgs = newArgs;\n      return lastResult;\n    }\n    return memoized;\n  }\n  module.exports = memoizeOne;\n});","lineCount":52,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"safeIsNaN"],[4,15,3,13],[4,18,3,16,"Number"],[4,24,3,22],[4,25,3,23,"isNaN"],[4,30,3,28],[4,34,4,4],[4,43,4,13,"ponyfill"],[4,51,4,21,"ponyfill"],[4,52,4,22,"value"],[4,57,4,27],[4,59,4,29],[5,4,5,8],[5,11,5,15],[5,18,5,22,"value"],[5,23,5,27],[5,28,5,32],[5,36,5,40],[5,40,5,44,"value"],[5,45,5,49],[5,50,5,54,"value"],[5,55,5,59],[6,2,6,4],[6,3,6,5],[7,2,7,0],[7,11,7,9,"isEqual"],[7,18,7,16,"isEqual"],[7,19,7,17,"first"],[7,24,7,22],[7,26,7,24,"second"],[7,32,7,30],[7,34,7,32],[8,4,8,4],[8,8,8,8,"first"],[8,13,8,13],[8,18,8,18,"second"],[8,24,8,24],[8,26,8,26],[9,6,9,8],[9,13,9,15],[9,17,9,19],[10,4,10,4],[11,4,11,4],[11,8,11,8,"safeIsNaN"],[11,17,11,17],[11,18,11,18,"first"],[11,23,11,23],[11,24,11,24],[11,28,11,28,"safeIsNaN"],[11,37,11,37],[11,38,11,38,"second"],[11,44,11,44],[11,45,11,45],[11,47,11,47],[12,6,12,8],[12,13,12,15],[12,17,12,19],[13,4,13,4],[14,4,14,4],[14,11,14,11],[14,16,14,16],[15,2,15,0],[16,2,16,0],[16,11,16,9,"areInputsEqual"],[16,25,16,23,"areInputsEqual"],[16,26,16,24,"newInputs"],[16,35,16,33],[16,37,16,35,"lastInputs"],[16,47,16,45],[16,49,16,47],[17,4,17,4],[17,8,17,8,"newInputs"],[17,17,17,17],[17,18,17,18,"length"],[17,24,17,24],[17,29,17,29,"lastInputs"],[17,39,17,39],[17,40,17,40,"length"],[17,46,17,46],[17,48,17,48],[18,6,18,8],[18,13,18,15],[18,18,18,20],[19,4,19,4],[20,4,20,4],[20,9,20,9],[20,13,20,13,"i"],[20,14,20,14],[20,17,20,17],[20,18,20,18],[20,20,20,20,"i"],[20,21,20,21],[20,24,20,24,"newInputs"],[20,33,20,33],[20,34,20,34,"length"],[20,40,20,40],[20,42,20,42,"i"],[20,43,20,43],[20,45,20,45],[20,47,20,47],[21,6,21,8],[21,10,21,12],[21,11,21,13,"isEqual"],[21,18,21,20],[21,19,21,21,"newInputs"],[21,28,21,30],[21,29,21,31,"i"],[21,30,21,32],[21,31,21,33],[21,33,21,35,"lastInputs"],[21,43,21,45],[21,44,21,46,"i"],[21,45,21,47],[21,46,21,48],[21,47,21,49],[21,49,21,51],[22,8,22,12],[22,15,22,19],[22,20,22,24],[23,6,23,8],[24,4,24,4],[25,4,25,4],[25,11,25,11],[25,15,25,15],[26,2,26,0],[27,2,28,0],[27,11,28,9,"memoizeOne"],[27,21,28,19,"memoizeOne"],[27,22,28,20,"resultFn"],[27,30,28,28],[27,32,28,30,"isEqual"],[27,39,28,37],[27,41,28,39],[28,4,29,4],[28,8,29,8,"isEqual"],[28,15,29,15],[28,20,29,15,"undefined"],[28,29,29,26],[28,31,29,28],[29,6,29,30,"isEqual"],[29,13,29,37],[29,16,29,40,"areInputsEqual"],[29,30,29,54],[30,4,29,56],[31,4,30,4],[31,8,30,8,"lastThis"],[31,16,30,16],[32,4,31,4],[32,8,31,8,"lastArgs"],[32,16,31,16],[32,19,31,19],[32,21,31,21],[33,4,32,4],[33,8,32,8,"lastResult"],[33,18,32,18],[34,4,33,4],[34,8,33,8,"calledOnce"],[34,18,33,18],[34,21,33,21],[34,26,33,26],[35,4,34,4],[35,13,34,13,"memoized"],[35,21,34,21,"memoized"],[35,22,34,21],[35,24,34,24],[36,6,35,8],[36,10,35,12,"newArgs"],[36,17,35,19],[36,20,35,22],[36,22,35,24],[37,6,36,8],[37,11,36,13],[37,15,36,17,"_i"],[37,17,36,19],[37,20,36,22],[37,21,36,23],[37,23,36,25,"_i"],[37,25,36,27],[37,28,36,30,"arguments"],[37,37,36,39],[37,38,36,40,"length"],[37,44,36,46],[37,46,36,48,"_i"],[37,48,36,50],[37,50,36,52],[37,52,36,54],[38,8,37,12,"newArgs"],[38,15,37,19],[38,16,37,20,"_i"],[38,18,37,22],[38,19,37,23],[38,22,37,26,"arguments"],[38,31,37,35],[38,32,37,36,"_i"],[38,34,37,38],[38,35,37,39],[39,6,38,8],[40,6,39,8],[40,10,39,12,"calledOnce"],[40,20,39,22],[40,24,39,26,"lastThis"],[40,32,39,34],[40,37,39,39],[40,41,39,43],[40,45,39,47,"isEqual"],[40,52,39,54],[40,53,39,55,"newArgs"],[40,60,39,62],[40,62,39,64,"lastArgs"],[40,70,39,72],[40,71,39,73],[40,73,39,75],[41,8,40,12],[41,15,40,19,"lastResult"],[41,25,40,29],[42,6,41,8],[43,6,42,8,"lastResult"],[43,16,42,18],[43,19,42,21,"resultFn"],[43,27,42,29],[43,28,42,30,"apply"],[43,33,42,35],[43,34,42,36],[43,38,42,40],[43,40,42,42,"newArgs"],[43,47,42,49],[43,48,42,50],[44,6,43,8,"calledOnce"],[44,16,43,18],[44,19,43,21],[44,23,43,25],[45,6,44,8,"lastThis"],[45,14,44,16],[45,17,44,19],[45,21,44,23],[46,6,45,8,"lastArgs"],[46,14,45,16],[46,17,45,19,"newArgs"],[46,24,45,26],[47,6,46,8],[47,13,46,15,"lastResult"],[47,23,46,25],[48,4,47,4],[49,4,48,4],[49,11,48,11,"memoized"],[49,19,48,19],[50,2,49,0],[51,2,51,0,"module"],[51,8,51,6],[51,9,51,7,"exports"],[51,16,51,14],[51,19,51,17,"memoizeOne"],[51,29,51,27],[52,0,51,28],[52,3]],"functionMap":{"names":["<global>","ponyfill","isEqual","areInputsEqual","memoizeOne","memoized"],"mappings":"AAA;ICG;KDE;AEC;CFQ;AGC;CHU;AIE;ICM;KDa;CJE"},"hasCjsExports":true},"type":"js/module"}]}