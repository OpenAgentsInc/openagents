{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // Skip text characters for text token, place those to pending buffer\n  // and increment current pos\n\n  'use strict';\n\n  // Rule to skip pure text\n  // '{}$%@~+=:' reserved for extentions\n\n  // !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n  // !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n  // http://spec.commonmark.org/0.15/#ascii-punctuation-character\n  function isTerminatorChar(ch) {\n    switch (ch) {\n      case 0x0A /* \\n */:\n      case 0x21 /* ! */:\n      case 0x23 /* # */:\n      case 0x24 /* $ */:\n      case 0x25 /* % */:\n      case 0x26 /* & */:\n      case 0x2A /* * */:\n      case 0x2B /* + */:\n      case 0x2D /* - */:\n      case 0x3A /* : */:\n      case 0x3C /* < */:\n      case 0x3D /* = */:\n      case 0x3E /* > */:\n      case 0x40 /* @ */:\n      case 0x5B /* [ */:\n      case 0x5C /* \\ */:\n      case 0x5D /* ] */:\n      case 0x5E /* ^ */:\n      case 0x5F /* _ */:\n      case 0x60 /* ` */:\n      case 0x7B /* { */:\n      case 0x7D /* } */:\n      case 0x7E /* ~ */:\n        return true;\n      default:\n        return false;\n    }\n  }\n  module.exports = function text(state, silent) {\n    var pos = state.pos;\n    while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n      pos++;\n    }\n    if (pos === state.pos) {\n      return false;\n    }\n    if (!silent) {\n      state.pending += state.src.slice(state.pos, pos);\n    }\n    state.pos = pos;\n    return true;\n  };\n\n  // Alternative implementation, for memory.\n  //\n  // It costs 10% of performance, but allows extend terminators list, if place it\n  // to `ParcerInline` property. Probably, will switch to it sometime, such\n  // flexibility required.\n\n  /*\n  var TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n  \n  module.exports = function text(state, silent) {\n    var pos = state.pos,\n        idx = state.src.slice(pos).search(TERMINATOR_RE);\n  \n    // first char is terminator -> empty text\n    if (idx === 0) { return false; }\n  \n    // no terminator -> text till end of string\n    if (idx < 0) {\n      if (!silent) { state.pending += state.src.slice(pos); }\n      state.pos = state.src.length;\n      return true;\n    }\n  \n    if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n  \n    state.pos += idx;\n  \n    return true;\n  };*/\n});","lineCount":88,"map":[[2,2,1,0],[3,2,2,0],[5,2,4,0],[5,14,4,12],[7,2,7,0],[8,2,8,0],[10,2,10,0],[12,2,12,0],[13,2,13,0],[14,2,14,0],[14,11,14,9,"isTerminatorChar"],[14,27,14,25,"isTerminatorChar"],[14,28,14,26,"ch"],[14,30,14,28],[14,32,14,30],[15,4,15,2],[15,12,15,10,"ch"],[15,14,15,12],[16,6,16,4],[16,11,16,9],[16,15,16,13],[17,6,17,4],[17,11,17,9],[17,15,17,13],[18,6,18,4],[18,11,18,9],[18,15,18,13],[19,6,19,4],[19,11,19,9],[19,15,19,13],[20,6,20,4],[20,11,20,9],[20,15,20,13],[21,6,21,4],[21,11,21,9],[21,15,21,13],[22,6,22,4],[22,11,22,9],[22,15,22,13],[23,6,23,4],[23,11,23,9],[23,15,23,13],[24,6,24,4],[24,11,24,9],[24,15,24,13],[25,6,25,4],[25,11,25,9],[25,15,25,13],[26,6,26,4],[26,11,26,9],[26,15,26,13],[27,6,27,4],[27,11,27,9],[27,15,27,13],[28,6,28,4],[28,11,28,9],[28,15,28,13],[29,6,29,4],[29,11,29,9],[29,15,29,13],[30,6,30,4],[30,11,30,9],[30,15,30,13],[31,6,31,4],[31,11,31,9],[31,15,31,13],[32,6,32,4],[32,11,32,9],[32,15,32,13],[33,6,33,4],[33,11,33,9],[33,15,33,13],[34,6,34,4],[34,11,34,9],[34,15,34,13],[35,6,35,4],[35,11,35,9],[35,15,35,13],[36,6,36,4],[36,11,36,9],[36,15,36,13],[37,6,37,4],[37,11,37,9],[37,15,37,13],[38,6,38,4],[38,11,38,9],[38,15,38,13],[39,8,39,6],[39,15,39,13],[39,19,39,17],[40,6,40,4],[41,8,41,6],[41,15,41,13],[41,20,41,18],[42,4,42,2],[43,2,43,0],[44,2,45,0,"module"],[44,8,45,6],[44,9,45,7,"exports"],[44,16,45,14],[44,19,45,17],[44,28,45,26,"text"],[44,32,45,30,"text"],[44,33,45,31,"state"],[44,38,45,36],[44,40,45,38,"silent"],[44,46,45,44],[44,48,45,46],[45,4,46,2],[45,8,46,6,"pos"],[45,11,46,9],[45,14,46,12,"state"],[45,19,46,17],[45,20,46,18,"pos"],[45,23,46,21],[46,4,48,2],[46,11,48,9,"pos"],[46,14,48,12],[46,17,48,15,"state"],[46,22,48,20],[46,23,48,21,"posMax"],[46,29,48,27],[46,33,48,31],[46,34,48,32,"isTerminatorChar"],[46,50,48,48],[46,51,48,49,"state"],[46,56,48,54],[46,57,48,55,"src"],[46,60,48,58],[46,61,48,59,"charCodeAt"],[46,71,48,69],[46,72,48,70,"pos"],[46,75,48,73],[46,76,48,74],[46,77,48,75],[46,79,48,77],[47,6,49,4,"pos"],[47,9,49,7],[47,11,49,9],[48,4,50,2],[49,4,52,2],[49,8,52,6,"pos"],[49,11,52,9],[49,16,52,14,"state"],[49,21,52,19],[49,22,52,20,"pos"],[49,25,52,23],[49,27,52,25],[50,6,52,27],[50,13,52,34],[50,18,52,39],[51,4,52,41],[52,4,54,2],[52,8,54,6],[52,9,54,7,"silent"],[52,15,54,13],[52,17,54,15],[53,6,54,17,"state"],[53,11,54,22],[53,12,54,23,"pending"],[53,19,54,30],[53,23,54,34,"state"],[53,28,54,39],[53,29,54,40,"src"],[53,32,54,43],[53,33,54,44,"slice"],[53,38,54,49],[53,39,54,50,"state"],[53,44,54,55],[53,45,54,56,"pos"],[53,48,54,59],[53,50,54,61,"pos"],[53,53,54,64],[53,54,54,65],[54,4,54,67],[55,4,56,2,"state"],[55,9,56,7],[55,10,56,8,"pos"],[55,13,56,11],[55,16,56,14,"pos"],[55,19,56,17],[56,4,58,2],[56,11,58,9],[56,15,58,13],[57,2,59,0],[57,3,59,1],[59,2,61,0],[60,2,62,0],[61,2,63,0],[62,2,64,0],[63,2,65,0],[65,2,67,0],[66,0,68,0],[67,0,69,0],[68,0,70,0],[69,0,71,0],[70,0,72,0],[71,0,73,0],[72,0,74,0],[73,0,75,0],[74,0,76,0],[75,0,77,0],[76,0,78,0],[77,0,79,0],[78,0,80,0],[79,0,81,0],[80,0,82,0],[81,0,83,0],[82,0,84,0],[83,0,85,0],[84,0,86,0],[85,0,87,0],[86,0,88,0],[87,0,89,0],[88,0,67,0],[88,3]],"functionMap":{"names":["<global>","isTerminatorChar","text"],"mappings":"AAA;ACa;CD6B;iBEE;CFc"},"hasCjsExports":true},"type":"js/module"}]}