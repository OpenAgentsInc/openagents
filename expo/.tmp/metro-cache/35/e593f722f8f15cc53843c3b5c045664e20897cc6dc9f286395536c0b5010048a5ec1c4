{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"query-string","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":39,"column":33,"index":1606},"end":{"line":39,"column":56,"index":1629}}],"key":"CQ4f6+ZdkmuRCkqw6zIINc/cka0=","exportNames":["*"],"imports":1}},{"name":"./getPathFromState-forks","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":40,"column":26,"index":1658},"end":{"line":40,"column":61,"index":1693}}],"key":"t0FyaMgwHS2Lt2mTiJkOs7AsCtY=","exportNames":["*"],"imports":1}},{"name":"../navigationParams","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":41,"column":27,"index":1723},"end":{"line":41,"column":57,"index":1753}}],"key":"KeDGhIQYe7bEwtueZKPQrXQYcV0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0]).default;\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function () {\n    var ownKeys = function (o) {\n      ownKeys = Object.getOwnPropertyNames || function (o) {\n        var ar = [];\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n        return ar;\n      };\n      return ownKeys(o);\n    };\n    return function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n      __setModuleDefault(result, mod);\n      return result;\n    };\n  }();\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getPathFromState = getPathFromState;\n  exports.getPathDataFromState = getPathDataFromState;\n  exports.appendBaseUrl = appendBaseUrl;\n  var queryString = __importStar(require(_dependencyMap[1]));\n  var expo = __importStar(require(_dependencyMap[2]));\n  var navigationParams_1 = require(_dependencyMap[3]);\n  // END FORK\n  var getActiveRoute = state => {\n    var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n    if (route.state) {\n      return getActiveRoute(route.state);\n    }\n    return route;\n  };\n  var cachedNormalizedConfigs = [undefined, {}];\n  /**\n   * Utility to serialize a navigation state object to a path string.\n   *\n   * @example\n   * ```js\n   * getPathFromState(\n   *   {\n   *     routes: [\n   *       {\n   *         name: 'Chat',\n   *         params: { author: 'Jane', id: 42 },\n   *       },\n   *     ],\n   *   },\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         stringify: { author: author => author.toLowerCase() }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   *\n   * @param state Navigation state to serialize.\n   * @param options Extra options to fine-tune how to serialize the path.\n   * @returns Path representing the state, e.g. /foo/bar?count=42.\n   */\n  function getPathFromState(state, options) {\n    return getPathDataFromState(state, options).path;\n  }\n  function getPathDataFromState(state, options) {\n    if (state == null) {\n      throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n    }\n    if (options) {\n      // START FORK\n      expo.validatePathConfig(options);\n      // validatePathConfig(options);\n      // END FORK\n    }\n    // Create a normalized configs object which will be easier to use\n    if (cachedNormalizedConfigs[0] !== options?.screens) {\n      cachedNormalizedConfigs = [options?.screens, options?.screens ? createNormalizedConfigs(options.screens) : {}];\n    }\n    var configs = cachedNormalizedConfigs[1];\n    var path = '/';\n    var current = state;\n    var allParams = {};\n    var _loop = function () {\n      var index = typeof current.index === 'number' ? current.index : 0;\n      var route = current.routes[index];\n      var pattern;\n      var focusedParams;\n      var focusedRoute = getActiveRoute(state);\n      var currentOptions = configs;\n      // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n      var nestedRouteNames = [];\n      var hasNext = true;\n      while (route.name in currentOptions && hasNext) {\n        pattern = currentOptions[route.name].pattern;\n        nestedRouteNames.push(route.name);\n        if (route.params) {\n          var stringify = currentOptions[route.name]?.stringify;\n          // START FORK\n          // This mutates allParams\n          var currentParams = expo.fixCurrentParams(allParams, route, stringify);\n          // const currentParams = Object.fromEntries(\n          //   Object.entries(route.params).map(([key, value]) => [\n          //     key,\n          //     stringify?.[key] ? stringify[key](value) : String(value),\n          //   ])\n          // );\n          // if (pattern) {\n          //   Object.assign(allParams, currentParams);\n          // }\n          // END FORK\n          if (focusedRoute === route) {\n            // If this is the focused route, keep the params for later use\n            // We save it here since it's been stringified already\n            focusedParams = {\n              ...currentParams\n            };\n            pattern?.split('/').filter(p => expo.isDynamicPart(p))\n            // eslint-disable-next-line no-loop-func\n            .forEach(p => {\n              var name = expo.getParamName(p);\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n          }\n        }\n        // If there is no `screens` property or no nested state, we return pattern\n        if (!currentOptions[route.name].screens || route.state === undefined) {\n          // START FORK\n          // Expo Router allows you to navigate to a (group) and not specify a target screen\n          // This is different from React Navigation, which requires a target screen\n          // We need to handle this case here, by selecting either the index screen or the first screen of the group\n          // IMPORTANT: This does not affect groups that use _layout files with initialRouteNames\n          // Layout files create a new route config. This only affects groups without layouts that have their screens\n          // hoisted.\n          // Example:\n          // - /home/_layout\n          // - /home/(a|b|c)/index          --> Hoisted to /home/_layout navigator\n          // - /home/(a|b|c)/other          --> Hoisted to /home/_layout navigator\n          // - /home/(profile)/me           --> Hoisted to /home/_layout navigator\n          //\n          // route.push('/home/(a)')        --> This should navigate to /home/(a)/index\n          // route.push('/home/(profile)')  --> This should navigate to /home/(profile)/me\n          var screens = currentOptions[route.name].screens;\n          // Determine what screen the user wants to navigate to. If no screen is specified, assume there is an index screen\n          // In the examples above, this ensures that /home/(a) navigates to /home/(a)/index\n          var targetScreen =\n          // This is typed as unknown, so we need to add these extra assertions\n          route.params && 'screen' in route.params && typeof route.params.screen === 'string' ? route.params.screen : 'index';\n          // If the target screen is not in the screens object, default to the first screen\n          // In the examples above, this ensures that /home/(profile) navigates to /home/(profile)/me\n          // As there is no index screen in the group\n          var screen = screens ? screens[targetScreen] ? targetScreen : Object.keys(screens)[0] : undefined;\n          if (screen && screens && currentOptions[route.name].screens?.[screen]) {\n            route = {\n              ...screens[screen],\n              name: screen,\n              key: screen\n            };\n            currentOptions = screens;\n          } else {\n            hasNext = false;\n          }\n          // hasNext = false;\n          // END FORK\n        } else {\n          index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n          var nextRoute = route.state.routes[index];\n          var nestedConfig = currentOptions[route.name].screens;\n          // if there is config for next route name, we go deeper\n          if (nestedConfig && nextRoute.name in nestedConfig) {\n            route = nextRoute;\n            currentOptions = nestedConfig;\n          } else {\n            // If not, there is no sense in going deeper in config\n            hasNext = false;\n          }\n        }\n      }\n      if (pattern === undefined) {\n        pattern = nestedRouteNames.join('/');\n      }\n      if (currentOptions[route.name] !== undefined) {\n        // START FORK\n        path += expo.getPathWithConventionsCollapsed({\n          ...options,\n          pattern,\n          route,\n          params: allParams,\n          initialRouteName: configs[route.name]?.initialRouteName\n        });\n        // path += pattern\n        //   .split('/')\n        //   .map((p) => {\n        //     const name = getParamName(p);\n        //     // We don't know what to show for wildcard patterns\n        //     // Showing the route name seems ok, though whatever we show here will be incorrect\n        //     // Since the page doesn't actually exist\n        //     if (p === '*') {\n        //       return route.name;\n        //     }\n        //     // If the path has a pattern for a param, put the param in the path\n        //     if (p.startsWith(':')) {\n        //       const value = allParams[name];\n        //       if (value === undefined && p.endsWith('?')) {\n        //         // Optional params without value assigned in route.params should be ignored\n        //         return '';\n        //       }\n        //       // Valid characters according to\n        //       // https://datatracker.ietf.org/doc/html/rfc3986#section-3.3 (see pchar definition)\n        //       return String(value).replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g, (char) =>\n        //         encodeURIComponent(char)\n        //       );\n        //     }\n        //     return encodeURIComponent(p);\n        //   })\n        //   .join('/');\n        // } else {\n      } else if (!route.name.startsWith('+')) {\n        path += encodeURIComponent(route.name);\n      }\n      // END FORK\n      if (!focusedParams) {\n        focusedParams = focusedRoute.params;\n      }\n      if (route.state) {\n        path += '/';\n      } else if (focusedParams) {\n        for (var param in focusedParams) {\n          if (focusedParams[param] === 'undefined') {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete focusedParams[param];\n          }\n        }\n        // START FORK\n        delete focusedParams['#'];\n        focusedParams = (0, navigationParams_1.removeInternalExpoRouterParams)(focusedParams);\n        // END FORK\n        var query = queryString.stringify(focusedParams, {\n          sort: false\n        });\n        if (query) {\n          path += `?${query}`;\n        }\n      }\n      current = route.state;\n    };\n    while (current) {\n      _loop();\n    }\n    // Remove multiple as well as trailing slashes\n    path = path.replace(/\\/+/g, '/');\n    path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n    // Include the root path if specified\n    if (options?.path) {\n      path = joinPaths(options.path, path);\n    }\n    // START FORK\n    path = expo.appendBaseUrl(path);\n    if (allParams['#']) {\n      path += `#${allParams['#']}`;\n    }\n    // END FORK\n    // START FORK\n    return {\n      path,\n      params: allParams\n    };\n    // END FORK\n  }\n  // const getParamName = (pattern: string) => pattern.replace(/^:/, '').replace(/\\?$/, '');\n  var joinPaths = function () {\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n    return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  };\n  var createConfigItem = (config, parentPattern) => {\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      var _pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      return {\n        pattern: _pattern\n      };\n    }\n    if (config.exact && config.path === undefined) {\n      throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n    }\n    // If an object is specified as the value (e.g. Foo: { ... }),\n    // It can have `path` property and `screens` prop which has nested configs\n    var pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n    var screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n    return {\n      // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n      pattern: pattern?.split('/').filter(Boolean).join('/'),\n      stringify: config.stringify,\n      screens\n    };\n  };\n  var createNormalizedConfigs = (options, pattern) => Object.fromEntries(Object.entries(options).map(_ref => {\n    var _ref2 = _slicedToArray(_ref, 2),\n      name = _ref2[0],\n      c = _ref2[1];\n    var result = createConfigItem(c, pattern);\n    return [name, result];\n  }));\n  function appendBaseUrl(path) {\n    var baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    {\n      if (baseUrl) {\n        return `/${baseUrl.replace(/^\\/+/, '').replace(/\\/$/, '')}${path}`;\n      }\n    }\n    return path;\n  }\n});","lineCount":349,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[4,50,1,13,"default"],[4,57,1,13],[5,2,2,0],[5,6,2,4,"__createBinding"],[5,21,2,19],[5,24,2,23],[5,28,2,27],[5,32,2,31],[5,36,2,35],[5,37,2,36,"__createBinding"],[5,52,2,51],[5,57,2,57,"Object"],[5,63,2,63],[5,64,2,64,"create"],[5,70,2,70],[5,73,2,74],[5,83,2,83,"o"],[5,84,2,84],[5,86,2,86,"m"],[5,87,2,87],[5,89,2,89,"k"],[5,90,2,90],[5,92,2,92,"k2"],[5,94,2,94],[5,96,2,96],[6,4,3,4],[6,8,3,8,"k2"],[6,10,3,10],[6,15,3,15,"undefined"],[6,24,3,24],[6,26,3,26,"k2"],[6,28,3,28],[6,31,3,31,"k"],[6,32,3,32],[7,4,4,4],[7,8,4,8,"desc"],[7,12,4,12],[7,15,4,15,"Object"],[7,21,4,21],[7,22,4,22,"getOwnPropertyDescriptor"],[7,46,4,46],[7,47,4,47,"m"],[7,48,4,48],[7,50,4,50,"k"],[7,51,4,51],[7,52,4,52],[8,4,5,4],[8,8,5,8],[8,9,5,9,"desc"],[8,13,5,13],[8,18,5,18],[8,23,5,23],[8,27,5,27,"desc"],[8,31,5,31],[8,34,5,34],[8,35,5,35,"m"],[8,36,5,36],[8,37,5,37,"__esModule"],[8,47,5,47],[8,50,5,50,"desc"],[8,54,5,54],[8,55,5,55,"writable"],[8,63,5,63],[8,67,5,67,"desc"],[8,71,5,71],[8,72,5,72,"configurable"],[8,84,5,84],[8,85,5,85],[8,87,5,87],[9,6,6,6,"desc"],[9,10,6,10],[9,13,6,13],[10,8,6,15,"enumerable"],[10,18,6,25],[10,20,6,27],[10,24,6,31],[11,8,6,33,"get"],[11,11,6,36],[11,13,6,38],[11,22,6,38,"get"],[11,23,6,38],[11,25,6,49],[12,10,6,51],[12,17,6,58,"m"],[12,18,6,59],[12,19,6,60,"k"],[12,20,6,61],[12,21,6,62],[13,8,6,64],[14,6,6,66],[14,7,6,67],[15,4,7,4],[16,4,8,4,"Object"],[16,10,8,10],[16,11,8,11,"defineProperty"],[16,25,8,25],[16,26,8,26,"o"],[16,27,8,27],[16,29,8,29,"k2"],[16,31,8,31],[16,33,8,33,"desc"],[16,37,8,37],[16,38,8,38],[17,2,9,0],[17,3,9,1],[17,6,9,6],[17,16,9,15,"o"],[17,17,9,16],[17,19,9,18,"m"],[17,20,9,19],[17,22,9,21,"k"],[17,23,9,22],[17,25,9,24,"k2"],[17,27,9,26],[17,29,9,28],[18,4,10,4],[18,8,10,8,"k2"],[18,10,10,10],[18,15,10,15,"undefined"],[18,24,10,24],[18,26,10,26,"k2"],[18,28,10,28],[18,31,10,31,"k"],[18,32,10,32],[19,4,11,4,"o"],[19,5,11,5],[19,6,11,6,"k2"],[19,8,11,8],[19,9,11,9],[19,12,11,12,"m"],[19,13,11,13],[19,14,11,14,"k"],[19,15,11,15],[19,16,11,16],[20,2,12,0],[20,3,12,2],[20,4,12,3],[21,2,13,0],[21,6,13,4,"__setModuleDefault"],[21,24,13,22],[21,27,13,26],[21,31,13,30],[21,35,13,34],[21,39,13,38],[21,40,13,39,"__setModuleDefault"],[21,58,13,57],[21,63,13,63,"Object"],[21,69,13,69],[21,70,13,70,"create"],[21,76,13,76],[21,79,13,80],[21,89,13,89,"o"],[21,90,13,90],[21,92,13,92,"v"],[21,93,13,93],[21,95,13,95],[22,4,14,4,"Object"],[22,10,14,10],[22,11,14,11,"defineProperty"],[22,25,14,25],[22,26,14,26,"o"],[22,27,14,27],[22,29,14,29],[22,38,14,38],[22,40,14,40],[23,6,14,42,"enumerable"],[23,16,14,52],[23,18,14,54],[23,22,14,58],[24,6,14,60,"value"],[24,11,14,65],[24,13,14,67,"v"],[25,4,14,69],[25,5,14,70],[25,6,14,71],[26,2,15,0],[26,3,15,1],[26,6,15,5],[26,16,15,14,"o"],[26,17,15,15],[26,19,15,17,"v"],[26,20,15,18],[26,22,15,20],[27,4,16,4,"o"],[27,5,16,5],[27,6,16,6],[27,15,16,15],[27,16,16,16],[27,19,16,19,"v"],[27,20,16,20],[28,2,17,0],[28,3,17,1],[28,4,17,2],[29,2,18,0],[29,6,18,4,"__importStar"],[29,18,18,16],[29,21,18,20],[29,25,18,24],[29,29,18,28],[29,33,18,32],[29,34,18,33,"__importStar"],[29,46,18,45],[29,50,18,51],[29,62,18,63],[30,4,19,4],[30,8,19,8,"ownKeys"],[30,15,19,15],[30,18,19,18],[30,27,19,18,"ownKeys"],[30,28,19,27,"o"],[30,29,19,28],[30,31,19,30],[31,6,20,8,"ownKeys"],[31,13,20,15],[31,16,20,18,"Object"],[31,22,20,24],[31,23,20,25,"getOwnPropertyNames"],[31,42,20,44],[31,46,20,48],[31,56,20,58,"o"],[31,57,20,59],[31,59,20,61],[32,8,21,12],[32,12,21,16,"ar"],[32,14,21,18],[32,17,21,21],[32,19,21,23],[33,8,22,12],[33,13,22,17],[33,17,22,21,"k"],[33,18,22,22],[33,22,22,26,"o"],[33,23,22,27],[33,25,22,29],[33,29,22,33,"Object"],[33,35,22,39],[33,36,22,40,"prototype"],[33,45,22,49],[33,46,22,50,"hasOwnProperty"],[33,60,22,64],[33,61,22,65,"call"],[33,65,22,69],[33,66,22,70,"o"],[33,67,22,71],[33,69,22,73,"k"],[33,70,22,74],[33,71,22,75],[33,73,22,77,"ar"],[33,75,22,79],[33,76,22,80,"ar"],[33,78,22,82],[33,79,22,83,"length"],[33,85,22,89],[33,86,22,90],[33,89,22,93,"k"],[33,90,22,94],[34,8,23,12],[34,15,23,19,"ar"],[34,17,23,21],[35,6,24,8],[35,7,24,9],[36,6,25,8],[36,13,25,15,"ownKeys"],[36,20,25,22],[36,21,25,23,"o"],[36,22,25,24],[36,23,25,25],[37,4,26,4],[37,5,26,5],[38,4,27,4],[38,11,27,11],[38,21,27,21,"mod"],[38,24,27,24],[38,26,27,26],[39,6,28,8],[39,10,28,12,"mod"],[39,13,28,15],[39,17,28,19,"mod"],[39,20,28,22],[39,21,28,23,"__esModule"],[39,31,28,33],[39,33,28,35],[39,40,28,42,"mod"],[39,43,28,45],[40,6,29,8],[40,10,29,12,"result"],[40,16,29,18],[40,19,29,21],[40,20,29,22],[40,21,29,23],[41,6,30,8],[41,10,30,12,"mod"],[41,13,30,15],[41,17,30,19],[41,21,30,23],[41,23,30,25],[41,28,30,30],[41,32,30,34,"k"],[41,33,30,35],[41,36,30,38,"ownKeys"],[41,43,30,45],[41,44,30,46,"mod"],[41,47,30,49],[41,48,30,50],[41,50,30,52,"i"],[41,51,30,53],[41,54,30,56],[41,55,30,57],[41,57,30,59,"i"],[41,58,30,60],[41,61,30,63,"k"],[41,62,30,64],[41,63,30,65,"length"],[41,69,30,71],[41,71,30,73,"i"],[41,72,30,74],[41,74,30,76],[41,76,30,78],[41,80,30,82,"k"],[41,81,30,83],[41,82,30,84,"i"],[41,83,30,85],[41,84,30,86],[41,89,30,91],[41,98,30,100],[41,100,30,102,"__createBinding"],[41,115,30,117],[41,116,30,118,"result"],[41,122,30,124],[41,124,30,126,"mod"],[41,127,30,129],[41,129,30,131,"k"],[41,130,30,132],[41,131,30,133,"i"],[41,132,30,134],[41,133,30,135],[41,134,30,136],[42,6,31,8,"__setModuleDefault"],[42,24,31,26],[42,25,31,27,"result"],[42,31,31,33],[42,33,31,35,"mod"],[42,36,31,38],[42,37,31,39],[43,6,32,8],[43,13,32,15,"result"],[43,19,32,21],[44,4,33,4],[44,5,33,5],[45,2,34,0],[45,3,34,1],[45,4,34,3],[45,5,34,4],[46,2,35,0,"Object"],[46,8,35,6],[46,9,35,7,"defineProperty"],[46,23,35,21],[46,24,35,22,"exports"],[46,31,35,29],[46,33,35,31],[46,45,35,43],[46,47,35,45],[47,4,35,47,"value"],[47,9,35,52],[47,11,35,54],[48,2,35,59],[48,3,35,60],[48,4,35,61],[49,2,36,0,"exports"],[49,9,36,7],[49,10,36,8,"getPathFromState"],[49,26,36,24],[49,29,36,27,"getPathFromState"],[49,45,36,43],[50,2,37,0,"exports"],[50,9,37,7],[50,10,37,8,"getPathDataFromState"],[50,30,37,28],[50,33,37,31,"getPathDataFromState"],[50,53,37,51],[51,2,38,0,"exports"],[51,9,38,7],[51,10,38,8,"appendBaseUrl"],[51,23,38,21],[51,26,38,24,"appendBaseUrl"],[51,39,38,37],[52,2,39,0],[52,6,39,6,"queryString"],[52,17,39,17],[52,20,39,20,"__importStar"],[52,32,39,32],[52,33,39,33,"require"],[52,40,39,40],[52,41,39,40,"_dependencyMap"],[52,55,39,40],[52,58,39,55],[52,59,39,56],[52,60,39,57],[53,2,40,0],[53,6,40,6,"expo"],[53,10,40,10],[53,13,40,13,"__importStar"],[53,25,40,25],[53,26,40,26,"require"],[53,33,40,33],[53,34,40,33,"_dependencyMap"],[53,48,40,33],[53,51,40,60],[53,52,40,61],[53,53,40,62],[54,2,41,0],[54,6,41,6,"navigationParams_1"],[54,24,41,24],[54,27,41,27,"require"],[54,34,41,34],[54,35,41,34,"_dependencyMap"],[54,49,41,34],[54,52,41,56],[54,53,41,57],[55,2,42,0],[56,2,43,0],[56,6,43,6,"getActiveRoute"],[56,20,43,20],[56,23,43,24,"state"],[56,28,43,29],[56,32,43,34],[57,4,44,4],[57,8,44,10,"route"],[57,13,44,15],[57,16,44,18],[57,23,44,25,"state"],[57,28,44,30],[57,29,44,31,"index"],[57,34,44,36],[57,39,44,41],[57,47,44,49],[57,50,45,10,"state"],[57,55,45,15],[57,56,45,16,"routes"],[57,62,45,22],[57,63,45,23,"state"],[57,68,45,28],[57,69,45,29,"index"],[57,74,45,34],[57,75,45,35],[57,78,46,10,"state"],[57,83,46,15],[57,84,46,16,"routes"],[57,90,46,22],[57,91,46,23,"state"],[57,96,46,28],[57,97,46,29,"routes"],[57,103,46,35],[57,104,46,36,"length"],[57,110,46,42],[57,113,46,45],[57,114,46,46],[57,115,46,47],[58,4,47,4],[58,8,47,8,"route"],[58,13,47,13],[58,14,47,14,"state"],[58,19,47,19],[58,21,47,21],[59,6,48,8],[59,13,48,15,"getActiveRoute"],[59,27,48,29],[59,28,48,30,"route"],[59,33,48,35],[59,34,48,36,"state"],[59,39,48,41],[59,40,48,42],[60,4,49,4],[61,4,50,4],[61,11,50,11,"route"],[61,16,50,16],[62,2,51,0],[62,3,51,1],[63,2,52,0],[63,6,52,4,"cachedNormalizedConfigs"],[63,29,52,27],[63,32,52,30],[63,33,53,4,"undefined"],[63,42,53,13],[63,44,54,4],[63,45,54,5],[63,46,54,6],[63,47,55,1],[64,2,56,0],[65,0,57,0],[66,0,58,0],[67,0,59,0],[68,0,60,0],[69,0,61,0],[70,0,62,0],[71,0,63,0],[72,0,64,0],[73,0,65,0],[74,0,66,0],[75,0,67,0],[76,0,68,0],[77,0,69,0],[78,0,70,0],[79,0,71,0],[80,0,72,0],[81,0,73,0],[82,0,74,0],[83,0,75,0],[84,0,76,0],[85,0,77,0],[86,0,78,0],[87,0,79,0],[88,0,80,0],[89,0,81,0],[90,0,82,0],[91,0,83,0],[92,0,84,0],[93,2,85,0],[93,11,85,9,"getPathFromState"],[93,27,85,25,"getPathFromState"],[93,28,85,26,"state"],[93,33,85,31],[93,35,85,33,"options"],[93,42,85,40],[93,44,85,42],[94,4,86,4],[94,11,86,11,"getPathDataFromState"],[94,31,86,31],[94,32,86,32,"state"],[94,37,86,37],[94,39,86,39,"options"],[94,46,86,46],[94,47,86,47],[94,48,86,48,"path"],[94,52,86,52],[95,2,87,0],[96,2,88,0],[96,11,88,9,"getPathDataFromState"],[96,31,88,29,"getPathDataFromState"],[96,32,88,30,"state"],[96,37,88,35],[96,39,88,37,"options"],[96,46,88,44],[96,48,88,46],[97,4,89,4],[97,8,89,8,"state"],[97,13,89,13],[97,17,89,17],[97,21,89,21],[97,23,89,23],[98,6,90,8],[98,12,90,14,"Error"],[98,17,90,19],[98,18,90,20],[98,97,90,99],[98,98,90,100],[99,4,91,4],[100,4,92,4],[100,8,92,8,"options"],[100,15,92,15],[100,17,92,17],[101,6,93,8],[102,6,94,8,"expo"],[102,10,94,12],[102,11,94,13,"validatePathConfig"],[102,29,94,31],[102,30,94,32,"options"],[102,37,94,39],[102,38,94,40],[103,6,95,8],[104,6,96,8],[105,4,97,4],[106,4,98,4],[107,4,99,4],[107,8,99,8,"cachedNormalizedConfigs"],[107,31,99,31],[107,32,99,32],[107,33,99,33],[107,34,99,34],[107,39,99,39,"options"],[107,46,99,46],[107,48,99,48,"screens"],[107,55,99,55],[107,57,99,57],[108,6,100,8,"cachedNormalizedConfigs"],[108,29,100,31],[108,32,100,34],[108,33,101,12,"options"],[108,40,101,19],[108,42,101,21,"screens"],[108,49,101,28],[108,51,102,12,"options"],[108,58,102,19],[108,60,102,21,"screens"],[108,67,102,28],[108,70,102,31,"createNormalizedConfigs"],[108,93,102,54],[108,94,102,55,"options"],[108,101,102,62],[108,102,102,63,"screens"],[108,109,102,70],[108,110,102,71],[108,113,102,74],[108,114,102,75],[108,115,102,76],[108,116,103,9],[109,4,104,4],[110,4,105,4],[110,8,105,10,"configs"],[110,15,105,17],[110,18,105,20,"cachedNormalizedConfigs"],[110,41,105,43],[110,42,105,44],[110,43,105,45],[110,44,105,46],[111,4,106,4],[111,8,106,8,"path"],[111,12,106,12],[111,15,106,15],[111,18,106,18],[112,4,107,4],[112,8,107,8,"current"],[112,15,107,15],[112,18,107,18,"state"],[112,23,107,23],[113,4,108,4],[113,8,108,10,"allParams"],[113,17,108,19],[113,20,108,22],[113,21,108,23],[113,22,108,24],[114,4,108,25],[114,8,108,25,"_loop"],[114,13,108,25],[114,25,108,25,"_loop"],[114,26,108,25],[114,28,109,20],[115,6,110,8],[115,10,110,12,"index"],[115,15,110,17],[115,18,110,20],[115,25,110,27,"current"],[115,32,110,34],[115,33,110,35,"index"],[115,38,110,40],[115,43,110,45],[115,51,110,53],[115,54,110,56,"current"],[115,61,110,63],[115,62,110,64,"index"],[115,67,110,69],[115,70,110,72],[115,71,110,73],[116,6,111,8],[116,10,111,12,"route"],[116,15,111,17],[116,18,111,20,"current"],[116,25,111,27],[116,26,111,28,"routes"],[116,32,111,34],[116,33,111,35,"index"],[116,38,111,40],[116,39,111,41],[117,6,112,8],[117,10,112,12,"pattern"],[117,17,112,19],[118,6,113,8],[118,10,113,12,"focusedParams"],[118,23,113,25],[119,6,114,8],[119,10,114,14,"focusedRoute"],[119,22,114,26],[119,25,114,29,"getActiveRoute"],[119,39,114,43],[119,40,114,44,"state"],[119,45,114,49],[119,46,114,50],[120,6,115,8],[120,10,115,12,"currentOptions"],[120,24,115,26],[120,27,115,29,"configs"],[120,34,115,36],[121,6,116,8],[122,6,117,8],[122,10,117,14,"nestedRouteNames"],[122,26,117,30],[122,29,117,33],[122,31,117,35],[123,6,118,8],[123,10,118,12,"hasNext"],[123,17,118,19],[123,20,118,22],[123,24,118,26],[124,6,119,8],[124,13,119,15,"route"],[124,18,119,20],[124,19,119,21,"name"],[124,23,119,25],[124,27,119,29,"currentOptions"],[124,41,119,43],[124,45,119,47,"hasNext"],[124,52,119,54],[124,54,119,56],[125,8,120,12,"pattern"],[125,15,120,19],[125,18,120,22,"currentOptions"],[125,32,120,36],[125,33,120,37,"route"],[125,38,120,42],[125,39,120,43,"name"],[125,43,120,47],[125,44,120,48],[125,45,120,49,"pattern"],[125,52,120,56],[126,8,121,12,"nestedRouteNames"],[126,24,121,28],[126,25,121,29,"push"],[126,29,121,33],[126,30,121,34,"route"],[126,35,121,39],[126,36,121,40,"name"],[126,40,121,44],[126,41,121,45],[127,8,122,12],[127,12,122,16,"route"],[127,17,122,21],[127,18,122,22,"params"],[127,24,122,28],[127,26,122,30],[128,10,123,16],[128,14,123,22,"stringify"],[128,23,123,31],[128,26,123,34,"currentOptions"],[128,40,123,48],[128,41,123,49,"route"],[128,46,123,54],[128,47,123,55,"name"],[128,51,123,59],[128,52,123,60],[128,54,123,62,"stringify"],[128,63,123,71],[129,10,124,16],[130,10,125,16],[131,10,126,16],[131,14,126,22,"currentParams"],[131,27,126,35],[131,30,126,38,"expo"],[131,34,126,42],[131,35,126,43,"fixCurrentParams"],[131,51,126,59],[131,52,126,60,"allParams"],[131,61,126,69],[131,63,126,71,"route"],[131,68,126,76],[131,70,126,78,"stringify"],[131,79,126,87],[131,80,126,88],[132,10,127,16],[133,10,128,16],[134,10,129,16],[135,10,130,16],[136,10,131,16],[137,10,132,16],[138,10,133,16],[139,10,134,16],[140,10,135,16],[141,10,136,16],[142,10,137,16],[142,14,137,20,"focusedRoute"],[142,26,137,32],[142,31,137,37,"route"],[142,36,137,42],[142,38,137,44],[143,12,138,20],[144,12,139,20],[145,12,140,20,"focusedParams"],[145,25,140,33],[145,28,140,36],[146,14,140,38],[146,17,140,41,"currentParams"],[147,12,140,55],[147,13,140,56],[148,12,141,20,"pattern"],[148,19,141,27],[148,21,142,26,"split"],[148,26,142,31],[148,27,142,32],[148,30,142,35],[148,31,142,36],[148,32,143,25,"filter"],[148,38,143,31],[148,39,143,33,"p"],[148,40,143,34],[148,44,143,39,"expo"],[148,48,143,43],[148,49,143,44,"isDynamicPart"],[148,62,143,57],[148,63,143,58,"p"],[148,64,143,59],[148,65,143,60],[149,12,144,24],[150,12,144,24],[150,13,145,25,"forEach"],[150,20,145,32],[150,21,145,34,"p"],[150,22,145,35],[150,26,145,40],[151,14,146,24],[151,18,146,30,"name"],[151,22,146,34],[151,25,146,37,"expo"],[151,29,146,41],[151,30,146,42,"getParamName"],[151,42,146,54],[151,43,146,55,"p"],[151,44,146,56],[151,45,146,57],[152,14,147,24],[153,14,148,24],[153,18,148,28,"focusedParams"],[153,31,148,41],[153,33,148,43],[154,16,149,28],[155,16,150,28],[155,23,150,35,"focusedParams"],[155,36,150,48],[155,37,150,49,"name"],[155,41,150,53],[155,42,150,54],[156,14,151,24],[157,12,152,20],[157,13,152,21],[157,14,152,22],[158,10,153,16],[159,8,154,12],[160,8,155,12],[161,8,156,12],[161,12,156,16],[161,13,156,17,"currentOptions"],[161,27,156,31],[161,28,156,32,"route"],[161,33,156,37],[161,34,156,38,"name"],[161,38,156,42],[161,39,156,43],[161,40,156,44,"screens"],[161,47,156,51],[161,51,156,55,"route"],[161,56,156,60],[161,57,156,61,"state"],[161,62,156,66],[161,67,156,71,"undefined"],[161,76,156,80],[161,78,156,82],[162,10,157,16],[163,10,158,16],[164,10,159,16],[165,10,160,16],[166,10,161,16],[167,10,162,16],[168,10,163,16],[169,10,164,16],[170,10,165,16],[171,10,166,16],[172,10,167,16],[173,10,168,16],[174,10,169,16],[175,10,170,16],[176,10,171,16],[177,10,172,16],[177,14,172,22,"screens"],[177,21,172,29],[177,24,172,32,"currentOptions"],[177,38,172,46],[177,39,172,47,"route"],[177,44,172,52],[177,45,172,53,"name"],[177,49,172,57],[177,50,172,58],[177,51,172,59,"screens"],[177,58,172,66],[178,10,173,16],[179,10,174,16],[180,10,175,16],[180,14,175,22,"targetScreen"],[180,26,175,34],[181,10,176,16],[182,10,177,16,"route"],[182,15,177,21],[182,16,177,22,"params"],[182,22,177,28],[182,26,177,32],[182,34,177,40],[182,38,177,44,"route"],[182,43,177,49],[182,44,177,50,"params"],[182,50,177,56],[182,54,177,60],[182,61,177,67,"route"],[182,66,177,72],[182,67,177,73,"params"],[182,73,177,79],[182,74,177,80,"screen"],[182,80,177,86],[182,85,177,91],[182,93,177,99],[182,96,178,22,"route"],[182,101,178,27],[182,102,178,28,"params"],[182,108,178,34],[182,109,178,35,"screen"],[182,115,178,41],[182,118,179,22],[182,125,179,29],[183,10,180,16],[184,10,181,16],[185,10,182,16],[186,10,183,16],[186,14,183,22,"screen"],[186,20,183,28],[186,23,183,31,"screens"],[186,30,183,38],[186,33,184,22,"screens"],[186,40,184,29],[186,41,184,30,"targetScreen"],[186,53,184,42],[186,54,184,43],[186,57,185,26,"targetScreen"],[186,69,185,38],[186,72,186,26,"Object"],[186,78,186,32],[186,79,186,33,"keys"],[186,83,186,37],[186,84,186,38,"screens"],[186,91,186,45],[186,92,186,46],[186,93,186,47],[186,94,186,48],[186,95,186,49],[186,98,187,22,"undefined"],[186,107,187,31],[187,10,188,16],[187,14,188,20,"screen"],[187,20,188,26],[187,24,188,30,"screens"],[187,31,188,37],[187,35,188,41,"currentOptions"],[187,49,188,55],[187,50,188,56,"route"],[187,55,188,61],[187,56,188,62,"name"],[187,60,188,66],[187,61,188,67],[187,62,188,68,"screens"],[187,69,188,75],[187,72,188,78,"screen"],[187,78,188,84],[187,79,188,85],[187,81,188,87],[188,12,189,20,"route"],[188,17,189,25],[188,20,189,28],[189,14,189,30],[189,17,189,33,"screens"],[189,24,189,40],[189,25,189,41,"screen"],[189,31,189,47],[189,32,189,48],[190,14,189,50,"name"],[190,18,189,54],[190,20,189,56,"screen"],[190,26,189,62],[191,14,189,64,"key"],[191,17,189,67],[191,19,189,69,"screen"],[192,12,189,76],[192,13,189,77],[193,12,190,20,"currentOptions"],[193,26,190,34],[193,29,190,37,"screens"],[193,36,190,44],[194,10,191,16],[194,11,191,17],[194,17,192,21],[195,12,193,20,"hasNext"],[195,19,193,27],[195,22,193,30],[195,27,193,35],[196,10,194,16],[197,10,195,16],[198,10,196,16],[199,8,197,12],[199,9,197,13],[199,15,198,17],[200,10,199,16,"index"],[200,15,199,21],[200,18,200,20],[200,25,200,27,"route"],[200,30,200,32],[200,31,200,33,"state"],[200,36,200,38],[200,37,200,39,"index"],[200,42,200,44],[200,47,200,49],[200,55,200,57],[200,58,200,60,"route"],[200,63,200,65],[200,64,200,66,"state"],[200,69,200,71],[200,70,200,72,"index"],[200,75,200,77],[200,78,200,80,"route"],[200,83,200,85],[200,84,200,86,"state"],[200,89,200,91],[200,90,200,92,"routes"],[200,96,200,98],[200,97,200,99,"length"],[200,103,200,105],[200,106,200,108],[200,107,200,109],[201,10,201,16],[201,14,201,22,"nextRoute"],[201,23,201,31],[201,26,201,34,"route"],[201,31,201,39],[201,32,201,40,"state"],[201,37,201,45],[201,38,201,46,"routes"],[201,44,201,52],[201,45,201,53,"index"],[201,50,201,58],[201,51,201,59],[202,10,202,16],[202,14,202,22,"nestedConfig"],[202,26,202,34],[202,29,202,37,"currentOptions"],[202,43,202,51],[202,44,202,52,"route"],[202,49,202,57],[202,50,202,58,"name"],[202,54,202,62],[202,55,202,63],[202,56,202,64,"screens"],[202,63,202,71],[203,10,203,16],[204,10,204,16],[204,14,204,20,"nestedConfig"],[204,26,204,32],[204,30,204,36,"nextRoute"],[204,39,204,45],[204,40,204,46,"name"],[204,44,204,50],[204,48,204,54,"nestedConfig"],[204,60,204,66],[204,62,204,68],[205,12,205,20,"route"],[205,17,205,25],[205,20,205,28,"nextRoute"],[205,29,205,37],[206,12,206,20,"currentOptions"],[206,26,206,34],[206,29,206,37,"nestedConfig"],[206,41,206,49],[207,10,207,16],[207,11,207,17],[207,17,208,21],[208,12,209,20],[209,12,210,20,"hasNext"],[209,19,210,27],[209,22,210,30],[209,27,210,35],[210,10,211,16],[211,8,212,12],[212,6,213,8],[213,6,214,8],[213,10,214,12,"pattern"],[213,17,214,19],[213,22,214,24,"undefined"],[213,31,214,33],[213,33,214,35],[214,8,215,12,"pattern"],[214,15,215,19],[214,18,215,22,"nestedRouteNames"],[214,34,215,38],[214,35,215,39,"join"],[214,39,215,43],[214,40,215,44],[214,43,215,47],[214,44,215,48],[215,6,216,8],[216,6,217,8],[216,10,217,12,"currentOptions"],[216,24,217,26],[216,25,217,27,"route"],[216,30,217,32],[216,31,217,33,"name"],[216,35,217,37],[216,36,217,38],[216,41,217,43,"undefined"],[216,50,217,52],[216,52,217,54],[217,8,218,12],[218,8,219,12,"path"],[218,12,219,16],[218,16,219,20,"expo"],[218,20,219,24],[218,21,219,25,"getPathWithConventionsCollapsed"],[218,52,219,56],[218,53,219,57],[219,10,220,16],[219,13,220,19,"options"],[219,20,220,26],[220,10,221,16,"pattern"],[220,17,221,23],[221,10,222,16,"route"],[221,15,222,21],[222,10,223,16,"params"],[222,16,223,22],[222,18,223,24,"allParams"],[222,27,223,33],[223,10,224,16,"initialRouteName"],[223,26,224,32],[223,28,224,34,"configs"],[223,35,224,41],[223,36,224,42,"route"],[223,41,224,47],[223,42,224,48,"name"],[223,46,224,52],[223,47,224,53],[223,49,224,55,"initialRouteName"],[224,8,225,12],[224,9,225,13],[224,10,225,14],[225,8,226,12],[226,8,227,12],[227,8,228,12],[228,8,229,12],[229,8,230,12],[230,8,231,12],[231,8,232,12],[232,8,233,12],[233,8,234,12],[234,8,235,12],[235,8,236,12],[236,8,237,12],[237,8,238,12],[238,8,239,12],[239,8,240,12],[240,8,241,12],[241,8,242,12],[242,8,243,12],[243,8,244,12],[244,8,245,12],[245,8,246,12],[246,8,247,12],[247,8,248,12],[248,8,249,12],[249,8,250,12],[250,8,251,12],[251,8,252,12],[252,6,253,8],[252,7,253,9],[252,13,254,13],[252,17,254,17],[252,18,254,18,"route"],[252,23,254,23],[252,24,254,24,"name"],[252,28,254,28],[252,29,254,29,"startsWith"],[252,39,254,39],[252,40,254,40],[252,43,254,43],[252,44,254,44],[252,46,254,46],[253,8,255,12,"path"],[253,12,255,16],[253,16,255,20,"encodeURIComponent"],[253,34,255,38],[253,35,255,39,"route"],[253,40,255,44],[253,41,255,45,"name"],[253,45,255,49],[253,46,255,50],[254,6,256,8],[255,6,257,8],[256,6,258,8],[256,10,258,12],[256,11,258,13,"focusedParams"],[256,24,258,26],[256,26,258,28],[257,8,259,12,"focusedParams"],[257,21,259,25],[257,24,259,28,"focusedRoute"],[257,36,259,40],[257,37,259,41,"params"],[257,43,259,47],[258,6,260,8],[259,6,261,8],[259,10,261,12,"route"],[259,15,261,17],[259,16,261,18,"state"],[259,21,261,23],[259,23,261,25],[260,8,262,12,"path"],[260,12,262,16],[260,16,262,20],[260,19,262,23],[261,6,263,8],[261,7,263,9],[261,13,264,13],[261,17,264,17,"focusedParams"],[261,30,264,30],[261,32,264,32],[262,8,265,12],[262,13,265,17],[262,17,265,23,"param"],[262,22,265,28],[262,26,265,32,"focusedParams"],[262,39,265,45],[262,41,265,47],[263,10,266,16],[263,14,266,20,"focusedParams"],[263,27,266,33],[263,28,266,34,"param"],[263,33,266,39],[263,34,266,40],[263,39,266,45],[263,50,266,56],[263,52,266,58],[264,12,267,20],[265,12,268,20],[265,19,268,27,"focusedParams"],[265,32,268,40],[265,33,268,41,"param"],[265,38,268,46],[265,39,268,47],[266,10,269,16],[267,8,270,12],[268,8,271,12],[269,8,272,12],[269,15,272,19,"focusedParams"],[269,28,272,32],[269,29,272,33],[269,32,272,36],[269,33,272,37],[270,8,273,12,"focusedParams"],[270,21,273,25],[270,24,273,28],[270,25,273,29],[270,26,273,30],[270,28,273,32,"navigationParams_1"],[270,46,273,50],[270,47,273,51,"removeInternalExpoRouterParams"],[270,77,273,81],[270,79,273,83,"focusedParams"],[270,92,273,96],[270,93,273,97],[271,8,274,12],[272,8,275,12],[272,12,275,18,"query"],[272,17,275,23],[272,20,275,26,"queryString"],[272,31,275,37],[272,32,275,38,"stringify"],[272,41,275,47],[272,42,275,48,"focusedParams"],[272,55,275,61],[272,57,275,63],[273,10,275,65,"sort"],[273,14,275,69],[273,16,275,71],[274,8,275,77],[274,9,275,78],[274,10,275,79],[275,8,276,12],[275,12,276,16,"query"],[275,17,276,21],[275,19,276,23],[276,10,277,16,"path"],[276,14,277,20],[276,18,277,24],[276,22,277,28,"query"],[276,27,277,33],[276,29,277,35],[277,8,278,12],[278,6,279,8],[279,6,280,8,"current"],[279,13,280,15],[279,16,280,18,"route"],[279,21,280,23],[279,22,280,24,"state"],[279,27,280,29],[280,4,281,4],[280,5,281,5],[281,4,109,4],[281,11,109,11,"current"],[281,18,109,18],[282,6,109,18,"_loop"],[282,11,109,18],[283,4,109,18],[284,4,282,4],[285,4,283,4,"path"],[285,8,283,8],[285,11,283,11,"path"],[285,15,283,15],[285,16,283,16,"replace"],[285,23,283,23],[285,24,283,24],[285,30,283,30],[285,32,283,32],[285,35,283,35],[285,36,283,36],[286,4,284,4,"path"],[286,8,284,8],[286,11,284,11,"path"],[286,15,284,15],[286,16,284,16,"length"],[286,22,284,22],[286,25,284,25],[286,26,284,26],[286,29,284,29,"path"],[286,33,284,33],[286,34,284,34,"replace"],[286,41,284,41],[286,42,284,42],[286,47,284,47],[286,49,284,49],[286,51,284,51],[286,52,284,52],[286,55,284,55,"path"],[286,59,284,59],[287,4,285,4],[288,4,286,4],[288,8,286,8,"options"],[288,15,286,15],[288,17,286,17,"path"],[288,21,286,21],[288,23,286,23],[289,6,287,8,"path"],[289,10,287,12],[289,13,287,15,"joinPaths"],[289,22,287,24],[289,23,287,25,"options"],[289,30,287,32],[289,31,287,33,"path"],[289,35,287,37],[289,37,287,39,"path"],[289,41,287,43],[289,42,287,44],[290,4,288,4],[291,4,289,4],[292,4,290,4,"path"],[292,8,290,8],[292,11,290,11,"expo"],[292,15,290,15],[292,16,290,16,"appendBaseUrl"],[292,29,290,29],[292,30,290,30,"path"],[292,34,290,34],[292,35,290,35],[293,4,291,4],[293,8,291,8,"allParams"],[293,17,291,17],[293,18,291,18],[293,21,291,21],[293,22,291,22],[293,24,291,24],[294,6,292,8,"path"],[294,10,292,12],[294,14,292,16],[294,18,292,20,"allParams"],[294,27,292,29],[294,28,292,30],[294,31,292,33],[294,32,292,34],[294,34,292,36],[295,4,293,4],[296,4,294,4],[297,4,295,4],[298,4,296,4],[298,11,296,11],[299,6,296,13,"path"],[299,10,296,17],[300,6,296,19,"params"],[300,12,296,25],[300,14,296,27,"allParams"],[301,4,296,37],[301,5,296,38],[302,4,297,4],[303,2,298,0],[304,2,299,0],[305,2,300,0],[305,6,300,6,"joinPaths"],[305,15,300,15],[305,18,300,18],[305,27,300,18,"joinPaths"],[305,28,300,18],[306,4,300,18],[306,13,300,18,"_len"],[306,17,300,18],[306,20,300,18,"arguments"],[306,29,300,18],[306,30,300,18,"length"],[306,36,300,18],[306,38,300,22,"paths"],[306,43,300,27],[306,50,300,27,"Array"],[306,55,300,27],[306,56,300,27,"_len"],[306,60,300,27],[306,63,300,27,"_key"],[306,67,300,27],[306,73,300,27,"_key"],[306,77,300,27],[306,80,300,27,"_len"],[306,84,300,27],[306,86,300,27,"_key"],[306,90,300,27],[307,6,300,22,"paths"],[307,11,300,27],[307,12,300,27,"_key"],[307,16,300,27],[307,20,300,27,"arguments"],[307,29,300,27],[307,30,300,27,"_key"],[307,34,300,27],[308,4,300,27],[309,4,300,27],[309,11,300,32],[309,13,300,34],[309,14,301,5,"concat"],[309,20,301,11],[309,21,301,12],[309,24,301,15,"paths"],[309,29,301,20],[309,30,301,21,"map"],[309,33,301,24],[309,34,301,26,"p"],[309,35,301,27],[309,39,301,32,"p"],[309,40,301,33],[309,41,301,34,"split"],[309,46,301,39],[309,47,301,40],[309,50,301,43],[309,51,301,44],[309,52,301,45],[309,53,301,46],[309,54,302,5,"filter"],[309,60,302,11],[309,61,302,12,"Boolean"],[309,68,302,19],[309,69,302,20],[309,70,303,5,"join"],[309,74,303,9],[309,75,303,10],[309,78,303,13],[309,79,303,14],[310,2,303,14],[311,2,304,0],[311,6,304,6,"createConfigItem"],[311,22,304,22],[311,25,304,25,"createConfigItem"],[311,26,304,26,"config"],[311,32,304,32],[311,34,304,34,"parentPattern"],[311,47,304,47],[311,52,304,52],[312,4,305,4],[312,8,305,8],[312,15,305,15,"config"],[312,21,305,21],[312,26,305,26],[312,34,305,34],[312,36,305,36],[313,6,306,8],[314,6,307,8],[314,10,307,14,"pattern"],[314,18,307,21],[314,21,307,24,"parentPattern"],[314,34,307,37],[314,37,307,40,"joinPaths"],[314,46,307,49],[314,47,307,50,"parentPattern"],[314,60,307,63],[314,62,307,65,"config"],[314,68,307,71],[314,69,307,72],[314,72,307,75,"config"],[314,78,307,81],[315,6,308,8],[315,13,308,15],[316,8,308,17,"pattern"],[316,15,308,24],[316,17,308,17,"pattern"],[317,6,308,25],[317,7,308,26],[318,4,309,4],[319,4,310,4],[319,8,310,8,"config"],[319,14,310,14],[319,15,310,15,"exact"],[319,20,310,20],[319,24,310,24,"config"],[319,30,310,30],[319,31,310,31,"path"],[319,35,310,35],[319,40,310,40,"undefined"],[319,49,310,49],[319,51,310,51],[320,6,311,8],[320,12,311,14],[320,16,311,18,"Error"],[320,21,311,23],[320,22,311,24],[320,172,311,174],[320,173,311,175],[321,4,312,4],[322,4,313,4],[323,4,314,4],[324,4,315,4],[324,8,315,10,"pattern"],[324,15,315,17],[324,18,315,20,"config"],[324,24,315,26],[324,25,315,27,"exact"],[324,30,315,32],[324,35,315,37],[324,39,315,41],[324,42,315,44,"joinPaths"],[324,51,315,53],[324,52,315,54,"parentPattern"],[324,65,315,67],[324,69,315,71],[324,71,315,73],[324,73,315,75,"config"],[324,79,315,81],[324,80,315,82,"path"],[324,84,315,86],[324,88,315,90],[324,90,315,92],[324,91,315,93],[324,94,315,96,"config"],[324,100,315,102],[324,101,315,103,"path"],[324,105,315,107],[324,109,315,111],[324,111,315,113],[325,4,316,4],[325,8,316,10,"screens"],[325,15,316,17],[325,18,316,20,"config"],[325,24,316,26],[325,25,316,27,"screens"],[325,32,316,34],[325,35,316,37,"createNormalizedConfigs"],[325,58,316,60],[325,59,316,61,"config"],[325,65,316,67],[325,66,316,68,"screens"],[325,73,316,75],[325,75,316,77,"pattern"],[325,82,316,84],[325,83,316,85],[325,86,316,88,"undefined"],[325,95,316,97],[326,4,317,4],[326,11,317,11],[327,6,318,8],[328,6,319,8,"pattern"],[328,13,319,15],[328,15,319,17,"pattern"],[328,22,319,24],[328,24,319,26,"split"],[328,29,319,31],[328,30,319,32],[328,33,319,35],[328,34,319,36],[328,35,319,37,"filter"],[328,41,319,43],[328,42,319,44,"Boolean"],[328,49,319,51],[328,50,319,52],[328,51,319,53,"join"],[328,55,319,57],[328,56,319,58],[328,59,319,61],[328,60,319,62],[329,6,320,8,"stringify"],[329,15,320,17],[329,17,320,19,"config"],[329,23,320,25],[329,24,320,26,"stringify"],[329,33,320,35],[330,6,321,8,"screens"],[331,4,322,4],[331,5,322,5],[332,2,323,0],[332,3,323,1],[333,2,324,0],[333,6,324,6,"createNormalizedConfigs"],[333,29,324,29],[333,32,324,32,"createNormalizedConfigs"],[333,33,324,33,"options"],[333,40,324,40],[333,42,324,42,"pattern"],[333,49,324,49],[333,54,324,54,"Object"],[333,60,324,60],[333,61,324,61,"fromEntries"],[333,72,324,72],[333,73,324,73,"Object"],[333,79,324,79],[333,80,324,80,"entries"],[333,87,324,87],[333,88,324,88,"options"],[333,95,324,95],[333,96,324,96],[333,97,324,97,"map"],[333,100,324,100],[333,101,324,101,"_ref"],[333,105,324,101],[333,109,324,116],[334,4,324,116],[334,8,324,116,"_ref2"],[334,13,324,116],[334,16,324,116,"_slicedToArray"],[334,30,324,116],[334,31,324,116,"_ref"],[334,35,324,116],[335,6,324,103,"name"],[335,10,324,107],[335,13,324,107,"_ref2"],[335,18,324,107],[336,6,324,109,"c"],[336,7,324,110],[336,10,324,110,"_ref2"],[336,15,324,110],[337,4,325,4],[337,8,325,10,"result"],[337,14,325,16],[337,17,325,19,"createConfigItem"],[337,33,325,35],[337,34,325,36,"c"],[337,35,325,37],[337,37,325,39,"pattern"],[337,44,325,46],[337,45,325,47],[338,4,326,4],[338,11,326,11],[338,12,326,12,"name"],[338,16,326,16],[338,18,326,18,"result"],[338,24,326,24],[338,25,326,25],[339,2,327,0],[339,3,327,1],[339,4,327,2],[339,5,327,3],[340,2,328,0],[340,11,328,9,"appendBaseUrl"],[340,24,328,22,"appendBaseUrl"],[340,25,328,23,"path"],[340,29,328,27],[340,31,328,66],[341,4,328,66],[341,8,328,29,"baseUrl"],[341,15,328,36],[341,18,328,36,"arguments"],[341,27,328,36],[341,28,328,36,"length"],[341,34,328,36],[341,42,328,36,"arguments"],[341,51,328,36],[341,59,328,36,"undefined"],[341,68,328,36],[341,71,328,36,"arguments"],[341,80,328,36],[342,4,329,48],[343,6,330,8],[343,10,330,12,"baseUrl"],[343,17,330,19],[343,19,330,21],[344,8,331,12],[344,15,331,19],[344,19,331,23,"baseUrl"],[344,26,331,30],[344,27,331,31,"replace"],[344,34,331,38],[344,35,331,39],[344,41,331,45],[344,43,331,47],[344,45,331,49],[344,46,331,50],[344,47,331,51,"replace"],[344,54,331,58],[344,55,331,59],[344,60,331,64],[344,62,331,66],[344,64,331,68],[344,65,331,69],[344,68,331,72,"path"],[344,72,331,76],[344,74,331,78],[345,6,332,8],[346,4,333,4],[347,4,334,4],[347,11,334,11,"path"],[347,15,334,15],[348,2,335,0],[349,0,335,1],[349,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","ownKeys","getActiveRoute","getPathFromState","getPathDataFromState","pattern.split.filter$argument_0","pattern.split.filter.forEach$argument_0","joinPaths","paths.map$argument_0","createConfigItem","createNormalizedConfigs","Object.entries.map$argument_0","appendBaseUrl"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;mDCC;kBEC;gDFC;SEI;KFE;CDQ;uBIS;CJQ;AKkC;CLE;AMC;gCCuD,4BD;iCEE;qBFO;CNkJ;kBSE;yBCC,mBD;cTE;yBWC;CXmB;gCYC,qEC;CDG,EZ;AcC;CdO"},"hasCjsExports":true},"type":"js/module"}]}