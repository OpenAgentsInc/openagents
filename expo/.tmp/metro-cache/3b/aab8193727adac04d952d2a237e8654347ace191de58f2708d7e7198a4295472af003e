{"dependencies":[{"name":"../../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":54,"index":54}}],"key":"4wo4OYT4MSo2InL8kiWmZxvepwE=","exportNames":["*"],"imports":1}},{"name":"../../../getShadowNodeFromRef","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":55},"end":{"line":2,"column":69,"index":124}}],"key":"84Qu5UH2d/L4S1+Pr1wW2nxbCNI=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":174},"end":{"line":5,"column":43,"index":217}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../../../findNodeHandle","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":218},"end":{"line":6,"column":53,"index":271}}],"key":"k+xfarWxri7fB3IShKFMK0oi5UQ=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.useViewRefHandler = useViewRefHandler;\n  var _utils = require(_dependencyMap[0]);\n  var _getShadowNodeFromRef = require(_dependencyMap[1]);\n  var _react = require(_dependencyMap[2]);\n  var _findNodeHandle = require(_dependencyMap[3]);\n  var findNodeHandle = _interopDefault(_findNodeHandle);\n  // Ref handler for the Wrap component attached under the GestureDetector.\n  // It's responsible for setting the viewRef on the state and triggering the reattaching of handlers\n  // if the view has changed.\n  function useViewRefHandler(state, updateAttachedGestures) {\n    var refHandler = (0, _react.useCallback)(ref => {\n      if (ref === null) {\n        return;\n      }\n      state.viewRef = ref;\n\n      // if it's the first render, also set the previousViewTag to prevent reattaching gestures when not needed\n      if (state.previousViewTag === -1) {\n        state.previousViewTag = (0, findNodeHandle.default)(state.viewRef);\n      }\n\n      // Pass true as `skipConfigUpdate`. Here we only want to trigger the eventual reattaching of handlers\n      // in case the view has changed. If the view doesn't change, the update will be handled by detector.\n      if (!state.firstRender) {\n        updateAttachedGestures(true);\n      }\n    }, [state, updateAttachedGestures]);\n    return refHandler;\n  }\n});","lineCount":41,"map":[[12,2,15,0,"exports"],[12,9,15,0],[12,10,15,0,"useViewRefHandler"],[12,27,15,0],[12,30,15,0,"useViewRefHandler"],[12,47,15,0],[13,2,1,0],[13,6,1,0,"_utils"],[13,12,1,0],[13,15,1,0,"require"],[13,22,1,0],[13,23,1,0,"_dependencyMap"],[13,37,1,0],[14,2,2,0],[14,6,2,0,"_getShadowNodeFromRef"],[14,27,2,0],[14,30,2,0,"require"],[14,37,2,0],[14,38,2,0,"_dependencyMap"],[14,52,2,0],[15,2,5,0],[15,6,5,0,"_react"],[15,12,5,0],[15,15,5,0,"require"],[15,22,5,0],[15,23,5,0,"_dependencyMap"],[15,37,5,0],[16,2,6,0],[16,6,6,0,"_findNodeHandle"],[16,21,6,0],[16,24,6,0,"require"],[16,31,6,0],[16,32,6,0,"_dependencyMap"],[16,46,6,0],[17,2,6,0],[17,6,6,0,"findNodeHandle"],[17,20,6,0],[17,23,6,0,"_interopDefault"],[17,38,6,0],[17,39,6,0,"_findNodeHandle"],[17,54,6,0],[18,2,12,0],[19,2,13,0],[20,2,14,0],[21,2,15,7],[21,11,15,16,"useViewRefHandler"],[21,28,15,33,"useViewRefHandler"],[21,29,16,2,"state"],[21,34,16,29],[21,36,17,2,"updateAttachedGestures"],[21,58,17,62],[21,60,18,2],[22,4,19,2],[22,8,19,8,"refHandler"],[22,18,19,18],[22,21,19,21],[22,25,19,21,"useCallback"],[22,31,19,32],[22,32,19,32,"useCallback"],[22,43,19,32],[22,45,20,5,"ref"],[22,48,20,32],[22,52,20,37],[23,6,21,6],[23,10,21,10,"ref"],[23,13,21,13],[23,18,21,18],[23,22,21,22],[23,24,21,24],[24,8,22,8],[25,6,23,6],[26,6,25,6,"state"],[26,11,25,11],[26,12,25,12,"viewRef"],[26,19,25,19],[26,22,25,22,"ref"],[26,25,25,25],[28,6,27,6],[29,6,28,6],[29,10,28,10,"state"],[29,15,28,15],[29,16,28,16,"previousViewTag"],[29,31,28,31],[29,38,28,38],[29,40,28,40],[30,8,29,8,"state"],[30,13,29,13],[30,14,29,14,"previousViewTag"],[30,29,29,29],[30,32,29,32],[30,36,29,32,"findNodeHandle"],[30,50,29,46],[30,51,29,46,"default"],[30,58,29,46],[30,60,29,47,"state"],[30,65,29,52],[30,66,29,53,"viewRef"],[30,73,29,60],[30,74,29,71],[31,6,30,6],[33,6,32,6],[34,6,33,6],[35,6,34,6],[35,10,34,10],[35,11,34,11,"state"],[35,16,34,16],[35,17,34,17,"firstRender"],[35,28,34,28],[35,30,34,30],[36,8,35,8,"updateAttachedGestures"],[36,30,35,30],[36,31,35,31],[36,35,35,35],[36,36,35,36],[37,6,36,6],[38,4,49,4],[38,5,49,5],[38,7,50,4],[38,8,50,5,"state"],[38,13,50,10],[38,15,50,12,"updateAttachedGestures"],[38,37,50,34],[38,38,51,2],[38,39,51,3],[39,4,53,2],[39,11,53,9,"refHandler"],[39,21,53,19],[40,2,54,0],[41,0,54,1],[41,3]],"functionMap":{"names":["<global>","useViewRefHandler","refHandler"],"mappings":"AAA;OCc;ICK;KD6B;CDK"},"hasCjsExports":false},"type":"js/module"}]}