{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/toArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yxbT34yjmkVZuhOKwnPlwW2nTdA=","exportNames":["*"],"imports":1}},{"name":"../../../../common","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":14},"end":{"line":2,"column":53,"index":67}}],"key":"lWBwZ2gfCJqIdYPstlqcFfa1xEQ=","exportNames":["*"],"imports":1}},{"name":"../../../easing","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":140},"end":{"line":4,"column":61,"index":201}}],"key":"+80dbmARANnOtOhvA2f1J11PAto=","exportNames":["*"],"imports":1}},{"name":"../../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":306},"end":{"line":18,"column":24,"index":515}}],"key":"4wo4OYT4MSo2InL8kiWmZxvepwE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"createEmptyTransitionConfig\", {\n    enumerable: true,\n    get: function () {\n      return createEmptyTransitionConfig;\n    }\n  });\n  exports.parseTransitionShorthand = parseTransitionShorthand;\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0]);\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _babelRuntimeHelpersToArray = require(_dependencyMap[1]);\n  var _toArray = _interopDefault(_babelRuntimeHelpersToArray);\n  var _common = require(_dependencyMap[2]);\n  var _easing = require(_dependencyMap[3]);\n  var _utils = require(_dependencyMap[4]);\n  var createEmptyTransitionConfig = () => ({\n    transitionProperty: [],\n    transitionDuration: [],\n    transitionTimingFunction: [],\n    transitionDelay: [],\n    transitionBehavior: []\n  });\n  function parseTransitionShorthand(value) {\n    return (0, _utils.splitByComma)(value).reduce((acc, part) => {\n      var result = (0, _utils.parseSingleTransitionShorthand)(part);\n      acc.transitionProperty.push((0, _utils.camelizeKebabCase)(result.transitionProperty ?? 'all'));\n      acc.transitionDuration.push(result.transitionDuration);\n      acc.transitionTimingFunction.push(result.transitionTimingFunction ? parseTimingFunction(result.transitionTimingFunction) : undefined);\n      acc.transitionDelay.push(result.transitionDelay);\n      acc.transitionBehavior.push(result.transitionBehavior);\n      return acc;\n    }, createEmptyTransitionConfig());\n  }\n  function asControlPoint(value) {\n    var _value = (0, _toArray.default)(value),\n      first = _value[0],\n      rest = _value.slice(1);\n    if (!first || isNaN(Number(first)) || !rest.every(_utils.isPercentage)) {\n      return null;\n    }\n    return [Number(first), ...rest];\n  }\n  function parseTimingFunction(value) {\n    if ((0, _utils.isPredefinedTimingFunction)(value)) {\n      return value;\n    }\n\n    // TODO: implement more strict check\n    var regex = /^(.+)\\((.+)\\)$/;\n    if (!regex.test(value)) {\n      throw new _common.ReanimatedError(`Unsupported timing function: ${value}`);\n    }\n    var _ref = value.match(regex),\n      _ref2 = (0, _slicedToArray.default)(_ref, 3),\n      name = _ref2[1],\n      args = _ref2[2];\n    var parsedArgs = (0, _utils.splitByComma)(args);\n    switch (name) {\n      case 'cubic-bezier':\n        {\n          var numberArgs = parsedArgs.map(Number);\n          if ((0, _utils.isArrayOfLength)(numberArgs, 4) && numberArgs.every(n => !isNaN(n))) {\n            return (0, _easing.cubicBezier)(...numberArgs);\n          }\n          break;\n        }\n      case 'linear':\n        {\n          var controlPoints = parsedArgs.map(arg => {\n            var parts = (0, _utils.splitByWhitespace)(arg);\n            var controlPoint = asControlPoint(parts);\n            if (!controlPoint) {\n              throw new _common.ReanimatedError(`Invalid control point: ${arg} in ${value} timing function`);\n            }\n            return controlPoint;\n          });\n          return (0, _easing.linear)(...controlPoints);\n        }\n      case 'steps':\n        {\n          var stepsNumber = Number(parsedArgs[0]);\n          var stepsModifier = parsedArgs[1];\n          if (!isNaN(stepsNumber) && stepsNumber > 0 && (stepsModifier === undefined || (0, _utils.isStepsModifier)(stepsModifier))) {\n            return (0, _easing.steps)(stepsNumber, stepsModifier);\n          }\n          break;\n        }\n    }\n    throw new _common.ReanimatedError(`Invalid timing function: ${value}`);\n  }\n});","lineCount":101,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13],[7,11,1,13,"_interopDefault"],[7,27,1,13,"e"],[7,28,1,13],[8,4,1,13],[8,11,1,13,"e"],[8,12,1,13],[8,16,1,13,"e"],[8,17,1,13],[8,18,1,13,"__esModule"],[8,28,1,13],[8,31,1,13,"e"],[8,32,1,13],[9,6,1,13,"default"],[9,13,1,13],[9,15,1,13,"e"],[10,4,1,13],[11,2,1,13],[12,2,28,0,"Object"],[12,8,28,0],[12,9,28,0,"defineProperty"],[12,23,28,0],[12,24,28,0,"exports"],[12,31,28,0],[13,4,28,0,"enumerable"],[13,14,28,0],[14,4,28,0,"get"],[14,7,28,0],[14,18,28,0,"get"],[14,19,28,0],[15,6,28,0],[15,13,28,0,"createEmptyTransitionConfig"],[15,40,28,0],[16,4,28,0],[17,2,28,0],[18,2,37,0,"exports"],[18,9,37,0],[18,10,37,0,"parseTransitionShorthand"],[18,34,37,0],[18,37,37,0,"parseTransitionShorthand"],[18,61,37,0],[19,2,56,1],[19,6,56,1,"_babelRuntimeHelpersSlicedToArray"],[19,39,56,1],[19,42,56,1,"require"],[19,49,56,1],[19,50,56,1,"_dependencyMap"],[19,64,56,1],[20,2,56,1],[20,6,56,1,"_slicedToArray"],[20,20,56,1],[20,23,56,1,"_interopDefault"],[20,38,56,1],[20,39,56,1,"_babelRuntimeHelpersSlicedToArray"],[20,72,56,1],[21,2,56,1],[21,6,56,1,"_babelRuntimeHelpersToArray"],[21,33,56,1],[21,36,56,1,"require"],[21,43,56,1],[21,44,56,1,"_dependencyMap"],[21,58,56,1],[22,2,56,1],[22,6,56,1,"_toArray"],[22,14,56,1],[22,17,56,1,"_interopDefault"],[22,32,56,1],[22,33,56,1,"_babelRuntimeHelpersToArray"],[22,60,56,1],[23,2,2,0],[23,6,2,0,"_common"],[23,13,2,0],[23,16,2,0,"require"],[23,23,2,0],[23,24,2,0,"_dependencyMap"],[23,38,2,0],[24,2,4,0],[24,6,4,0,"_easing"],[24,13,4,0],[24,16,4,0,"require"],[24,23,4,0],[24,24,4,0,"_dependencyMap"],[24,38,4,0],[25,2,9,0],[25,6,9,0,"_utils"],[25,12,9,0],[25,15,9,0,"require"],[25,22,9,0],[25,23,9,0,"_dependencyMap"],[25,37,9,0],[26,2,28,7],[26,6,28,13,"createEmptyTransitionConfig"],[26,33,28,40],[26,36,29,2,"createEmptyTransitionConfig"],[26,37,29,2],[26,43,29,48],[27,4,30,4,"transitionProperty"],[27,22,30,22],[27,24,30,24],[27,26,30,26],[28,4,31,4,"transitionDuration"],[28,22,31,22],[28,24,31,24],[28,26,31,26],[29,4,32,4,"transitionTimingFunction"],[29,28,32,28],[29,30,32,30],[29,32,32,32],[30,4,33,4,"transitionDelay"],[30,19,33,19],[30,21,33,21],[30,23,33,23],[31,4,34,4,"transitionBehavior"],[31,22,34,22],[31,24,34,24],[32,2,35,2],[32,3,35,3],[32,4,35,4],[33,2,37,7],[33,11,37,16,"parseTransitionShorthand"],[33,35,37,40,"parseTransitionShorthand"],[33,36,37,41,"value"],[33,41,37,54],[33,43,37,56],[34,4,38,2],[34,11,38,9],[34,15,38,9,"splitByComma"],[34,21,38,21],[34,22,38,21,"splitByComma"],[34,34,38,21],[34,36,38,22,"value"],[34,41,38,27],[34,42,38,28],[34,43,38,29,"reduce"],[34,49,38,35],[34,50,39,4],[34,51,39,5,"acc"],[34,54,39,8],[34,56,39,10,"part"],[34,60,39,14],[34,65,39,19],[35,6,40,6],[35,10,40,12,"result"],[35,16,40,18],[35,19,40,21],[35,23,40,21,"parseSingleTransitionShorthand"],[35,29,40,51],[35,30,40,51,"parseSingleTransitionShorthand"],[35,60,40,51],[35,62,40,52,"part"],[35,66,40,56],[35,67,40,57],[36,6,41,6,"acc"],[36,9,41,9],[36,10,41,10,"transitionProperty"],[36,28,41,28],[36,29,41,29,"push"],[36,33,41,33],[36,34,42,8],[36,38,42,8,"camelizeKebabCase"],[36,44,42,25],[36,45,42,25,"camelizeKebabCase"],[36,62,42,25],[36,64,42,26,"result"],[36,70,42,32],[36,71,42,33,"transitionProperty"],[36,89,42,51],[36,93,42,55],[36,98,42,60],[36,99,43,6],[36,100,43,7],[37,6,44,6,"acc"],[37,9,44,9],[37,10,44,10,"transitionDuration"],[37,28,44,28],[37,29,44,29,"push"],[37,33,44,33],[37,34,44,34,"result"],[37,40,44,40],[37,41,44,41,"transitionDuration"],[37,59,44,59],[37,60,44,60],[38,6,45,6,"acc"],[38,9,45,9],[38,10,45,10,"transitionTimingFunction"],[38,34,45,34],[38,35,45,35,"push"],[38,39,45,39],[38,40,46,8,"result"],[38,46,46,14],[38,47,46,15,"transitionTimingFunction"],[38,71,46,39],[38,74,47,12,"parseTimingFunction"],[38,93,47,31],[38,94,47,32,"result"],[38,100,47,38],[38,101,47,39,"transitionTimingFunction"],[38,125,47,63],[38,126,47,64],[38,129,48,12,"undefined"],[38,138,49,6],[38,139,49,7],[39,6,50,6,"acc"],[39,9,50,9],[39,10,50,10,"transitionDelay"],[39,25,50,25],[39,26,50,26,"push"],[39,30,50,30],[39,31,50,31,"result"],[39,37,50,37],[39,38,50,38,"transitionDelay"],[39,53,50,53],[39,54,50,54],[40,6,51,6,"acc"],[40,9,51,9],[40,10,51,10,"transitionBehavior"],[40,28,51,28],[40,29,51,29,"push"],[40,33,51,33],[40,34,51,34,"result"],[40,40,51,40],[40,41,51,41,"transitionBehavior"],[40,59,51,59],[40,60,51,60],[41,6,52,6],[41,13,52,13,"acc"],[41,16,52,16],[42,4,53,4],[42,5,53,5],[42,7,54,4,"createEmptyTransitionConfig"],[42,34,54,31],[42,35,54,32],[42,36,55,2],[42,37,55,3],[43,2,56,0],[44,2,58,0],[44,11,58,9,"asControlPoint"],[44,25,58,23,"asControlPoint"],[44,26,58,24,"value"],[44,31,58,39],[44,33,58,62],[45,4,59,2],[45,8,59,2,"_value"],[45,14,59,2],[45,21,59,2,"_toArray"],[45,29,59,2],[45,30,59,2,"default"],[45,37,59,2],[45,39,59,27,"value"],[45,44,59,32],[46,6,59,9,"first"],[46,11,59,14],[46,14,59,14,"_value"],[46,20,59,14],[47,6,59,19,"rest"],[47,10,59,23],[47,13,59,23,"_value"],[47,19,59,23],[47,20,59,23,"slice"],[47,25,59,23],[48,4,60,2],[48,8,60,6],[48,9,60,7,"first"],[48,14,60,12],[48,18,60,16,"isNaN"],[48,23,60,21],[48,24,60,22,"Number"],[48,30,60,28],[48,31,60,29,"first"],[48,36,60,34],[48,37,60,35],[48,38,60,36],[48,42,60,40],[48,43,60,41,"rest"],[48,47,60,45],[48,48,60,46,"every"],[48,53,60,51],[48,54,60,52,"isPercentage"],[48,60,60,64],[48,61,60,64,"isPercentage"],[48,73,60,64],[48,74,60,65],[48,76,60,67],[49,6,61,4],[49,13,61,11],[49,17,61,15],[50,4,62,2],[51,4,63,2],[51,11,63,9],[51,12,63,10,"Number"],[51,18,63,16],[51,19,63,17,"first"],[51,24,63,22],[51,25,63,23],[51,27,63,25],[51,30,63,28,"rest"],[51,34,63,32],[51,35,63,33],[52,2,64,0],[53,2,66,0],[53,11,66,9,"parseTimingFunction"],[53,30,66,28,"parseTimingFunction"],[53,31,66,29,"value"],[53,36,66,42],[53,38,66,63],[54,4,67,2],[54,8,67,6],[54,12,67,6,"isPredefinedTimingFunction"],[54,18,67,32],[54,19,67,32,"isPredefinedTimingFunction"],[54,45,67,32],[54,47,67,33,"value"],[54,52,67,38],[54,53,67,39],[54,55,67,41],[55,6,68,4],[55,13,68,11,"value"],[55,18,68,16],[56,4,69,2],[58,4,71,2],[59,4,72,2],[59,8,72,8,"regex"],[59,13,72,13],[59,16,72,16],[59,32,72,32],[60,4,73,2],[60,8,73,6],[60,9,73,7,"regex"],[60,14,73,12],[60,15,73,13,"test"],[60,19,73,17],[60,20,73,18,"value"],[60,25,73,23],[60,26,73,24],[60,28,73,26],[61,6,74,4],[61,12,74,10],[61,16,74,14,"ReanimatedError"],[61,23,74,29],[61,24,74,29,"ReanimatedError"],[61,39,74,29],[61,40,74,30],[61,72,74,62,"value"],[61,77,74,67],[61,79,74,69],[61,80,74,70],[62,4,75,2],[63,4,77,2],[63,8,77,2,"_ref"],[63,12,77,2],[63,15,77,25,"value"],[63,20,77,30],[63,21,77,31,"match"],[63,26,77,36],[63,27,77,37,"regex"],[63,32,77,42],[63,33,77,43],[64,6,77,43,"_ref2"],[64,11,77,43],[64,18,77,43,"_slicedToArray"],[64,32,77,43],[64,33,77,43,"default"],[64,40,77,43],[64,42,77,43,"_ref"],[64,46,77,43],[65,6,77,11,"name"],[65,10,77,15],[65,13,77,15,"_ref2"],[65,18,77,15],[66,6,77,17,"args"],[66,10,77,21],[66,13,77,21,"_ref2"],[66,18,77,21],[67,4,78,2],[67,8,78,8,"parsedArgs"],[67,18,78,18],[67,21,78,21],[67,25,78,21,"splitByComma"],[67,31,78,33],[67,32,78,33,"splitByComma"],[67,44,78,33],[67,46,78,34,"args"],[67,50,78,38],[67,51,78,39],[68,4,80,2],[68,12,80,10,"name"],[68,16,80,14],[69,6,81,4],[69,11,81,9],[69,25,81,23],[70,8,81,25],[71,10,82,6],[71,14,82,12,"numberArgs"],[71,24,82,22],[71,27,82,25,"parsedArgs"],[71,37,82,35],[71,38,82,36,"map"],[71,41,82,39],[71,42,82,40,"Number"],[71,48,82,46],[71,49,82,47],[72,10,83,6],[72,14,84,8],[72,18,84,8,"isArrayOfLength"],[72,24,84,23],[72,25,84,23,"isArrayOfLength"],[72,40,84,23],[72,42,84,24,"numberArgs"],[72,52,84,34],[72,54,84,36],[72,55,84,37],[72,56,84,38],[72,60,85,8,"numberArgs"],[72,70,85,18],[72,71,85,19,"every"],[72,76,85,24],[72,77,85,26,"n"],[72,78,85,27],[72,82,85,32],[72,83,85,33,"isNaN"],[72,88,85,38],[72,89,85,39,"n"],[72,90,85,40],[72,91,85,41],[72,92,85,42],[72,94,86,8],[73,12,87,8],[73,19,87,15],[73,23,87,15,"cubicBezier"],[73,30,87,26],[73,31,87,26,"cubicBezier"],[73,42,87,26],[73,44,87,27],[73,47,87,30,"numberArgs"],[73,57,87,40],[73,58,87,41],[74,10,88,6],[75,10,89,6],[76,8,90,4],[77,6,91,4],[77,11,91,9],[77,19,91,17],[78,8,91,19],[79,10,92,6],[79,14,92,12,"controlPoints"],[79,27,92,25],[79,30,92,28,"parsedArgs"],[79,40,92,38],[79,41,92,39,"map"],[79,44,92,42],[79,45,92,44,"arg"],[79,48,92,47],[79,52,92,52],[80,12,93,8],[80,16,93,14,"parts"],[80,21,93,19],[80,24,93,22],[80,28,93,22,"splitByWhitespace"],[80,34,93,39],[80,35,93,39,"splitByWhitespace"],[80,52,93,39],[80,54,93,40,"arg"],[80,57,93,43],[80,58,93,44],[81,12,94,8],[81,16,94,14,"controlPoint"],[81,28,94,26],[81,31,94,29,"asControlPoint"],[81,45,94,43],[81,46,94,44,"parts"],[81,51,94,49],[81,52,94,50],[82,12,95,8],[82,16,95,12],[82,17,95,13,"controlPoint"],[82,29,95,25],[82,31,95,27],[83,14,96,10],[83,20,96,16],[83,24,96,20,"ReanimatedError"],[83,31,96,35],[83,32,96,35,"ReanimatedError"],[83,47,96,35],[83,48,97,12],[83,74,97,38,"arg"],[83,77,97,41],[83,84,97,48,"value"],[83,89,97,53],[83,107,98,10],[83,108,98,11],[84,12,99,8],[85,12,100,8],[85,19,100,15,"controlPoint"],[85,31,100,27],[86,10,101,6],[86,11,101,7],[86,12,101,8],[87,10,102,6],[87,17,102,13],[87,21,102,13,"linear"],[87,28,102,19],[87,29,102,19,"linear"],[87,35,102,19],[87,37,102,20],[87,40,102,23,"controlPoints"],[87,53,102,36],[87,54,102,37],[88,8,103,4],[89,6,104,4],[89,11,104,9],[89,18,104,16],[90,8,104,18],[91,10,105,6],[91,14,105,12,"stepsNumber"],[91,25,105,23],[91,28,105,26,"Number"],[91,34,105,32],[91,35,105,33,"parsedArgs"],[91,45,105,43],[91,46,105,44],[91,47,105,45],[91,48,105,46],[91,49,105,47],[92,10,106,6],[92,14,106,12,"stepsModifier"],[92,27,106,25],[92,30,106,28,"parsedArgs"],[92,40,106,38],[92,41,106,39],[92,42,106,40],[92,43,106,41],[93,10,107,6],[93,14,108,8],[93,15,108,9,"isNaN"],[93,20,108,14],[93,21,108,15,"stepsNumber"],[93,32,108,26],[93,33,108,27],[93,37,109,8,"stepsNumber"],[93,48,109,19],[93,51,109,22],[93,52,109,23],[93,57,110,9,"stepsModifier"],[93,70,110,22],[93,75,110,27,"undefined"],[93,84,110,36],[93,88,110,40],[93,92,110,40,"isStepsModifier"],[93,98,110,55],[93,99,110,55,"isStepsModifier"],[93,114,110,55],[93,116,110,56,"stepsModifier"],[93,129,110,69],[93,130,110,70],[93,131,110,71],[93,133,111,8],[94,12,112,8],[94,19,112,15],[94,23,112,15,"steps"],[94,30,112,20],[94,31,112,20,"steps"],[94,36,112,20],[94,38,112,21,"stepsNumber"],[94,49,112,32],[94,51,112,34,"stepsModifier"],[94,64,112,47],[94,65,112,48],[95,10,113,6],[96,10,114,6],[97,8,115,4],[98,4,116,2],[99,4,118,2],[99,10,118,8],[99,14,118,12,"ReanimatedError"],[99,21,118,27],[99,22,118,27,"ReanimatedError"],[99,37,118,27],[99,38,118,28],[99,66,118,56,"value"],[99,71,118,61],[99,73,118,63],[99,74,118,64],[100,2,119,0],[101,0,119,1],[101,3]],"functionMap":{"names":["<global>","createEmptyTransitionConfig","parseTransitionShorthand","splitByComma.reduce$argument_0","asControlPoint","parseTimingFunction","numberArgs.every$argument_0","parsedArgs.map$argument_0"],"mappings":"AAA;EC4B;IDM;OEE;ICE;KDc;CFG;AIE;CJM;AKE;yBCmB,gBD;2CEO;OFS;CLkB"},"hasCjsExports":false},"type":"js/module"}]}