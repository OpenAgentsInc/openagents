{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"../../common","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":14},"end":{"line":2,"column":55,"index":69}}],"key":"IDJz4HWb8BkS18xB4AVSbpQcs+Y=","exportNames":["*"],"imports":1}},{"name":"../constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":70},"end":{"line":3,"column":48,"index":118}}],"key":"eTOOXVNPpMK2U8dOAmBWjbEJ4yE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"ERROR_MESSAGES\", {\n    enumerable: true,\n    get: function () {\n      return ERROR_MESSAGES;\n    }\n  });\n  Object.defineProperty(exports, \"WARN_MESSAGES\", {\n    enumerable: true,\n    get: function () {\n      return WARN_MESSAGES;\n    }\n  });\n  Object.defineProperty(exports, \"LinearEasing\", {\n    enumerable: true,\n    get: function () {\n      return LinearEasing;\n    }\n  });\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[0]);\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[1]);\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _common = require(_dependencyMap[2]);\n  var _constants = require(_dependencyMap[3]);\n  var ERROR_MESSAGES = {\n    invalidPointsCount: () => `Invalid linear easing points count. There should be at least two points`,\n    invalidInputProgressValue: inputProgress => `Invalid input progress ${inputProgress} value, it should be a percentage between 0% and 100%`\n  };\n  var WARN_MESSAGES = {\n    inputProgressLessThanPrecedingPoint: (x, precedingX) => `Linear easing point x value ${x} is less than value of the preceding control point ${precedingX}. Value will be overridden by ${precedingX}`\n  };\n  var parsePercentage = percentage => {\n    var result;\n    if (typeof percentage === 'number') {\n      result = percentage;\n    } else if (_constants.PERCENTAGE_REGEX.test(percentage)) {\n      result = parseFloat(percentage) / 100;\n    }\n    if (result === undefined || result < 0 || result > 1) {\n      throw new _common.ReanimatedError(ERROR_MESSAGES.invalidInputProgressValue(percentage));\n    }\n    return result;\n  };\n  var extrapolate = (x, point1, point2) => {\n    var slope = (point2.y - point1.y) / (point2.x - point1.x);\n    return point1.y + slope * (x - point1.x);\n  };\n  var LinearEasing = /*#__PURE__*/function () {\n    function LinearEasing(points) {\n      (0, _classCallCheck.default)(this, LinearEasing);\n      if (points.length < 2) {\n        throw new _common.ReanimatedError(ERROR_MESSAGES.invalidPointsCount());\n      }\n      this.points = points.map(p => Array.isArray(p) && p.length === 1 ? p[0] : p);\n    }\n    return (0, _createClass.default)(LinearEasing, [{\n      key: \"toString\",\n      value: function toString() {\n        return `${LinearEasing.easingName}(${this.points.map(point => Array.isArray(point) ? `[${point.map(p => typeof p === 'string' ? `\"${p}\"` : p).join(', ')}]` : point).join(', ')})`;\n      }\n    }, {\n      key: \"normalize\",\n      value: function normalize() {\n        var points = this.canonicalize();\n\n        // Extrapolate points if the input progress of the first one is greater than 0\n        // or the input progress of the last one is less than 1\n        if (points[0].x > 0) {\n          points.unshift({\n            x: 0,\n            y: extrapolate(0, points[0], points[1])\n          });\n        }\n        if (points[points.length - 1].x < 1) {\n          points.push({\n            x: 1,\n            y: extrapolate(1, points[points.length - 2], points[points.length - 1])\n          });\n        }\n        return {\n          name: LinearEasing.easingName,\n          points\n        };\n      }\n    }, {\n      key: \"canonicalize\",\n      value: function canonicalize() {\n        var result = this.points.flatMap(point => Array.isArray(point) ? point.slice(1).map(x => ({\n          x: parsePercentage(x),\n          y: point[0]\n        })) : [{\n          y: point\n        }]);\n\n        // 1. If the first control point lacks an input progress value,\n        // set its input progress value to 0.\n        if (result[0].x === undefined) {\n          result[0].x = 0;\n        }\n\n        // 2.If the last control point lacks an input progress value,\n        // set its input progress value to 1.\n        if (result[result.length - 1].x === undefined) {\n          result[result.length - 1].x = 1;\n        }\n\n        // 3. If any control point has an input progress value that is less\n        // than the input progress value of any preceding control point, set\n        // its input progress value to the largest input progress value of\n        // any preceding control point.\n        var maxPrecedingX = 0;\n        for (var i = 1; i < result.length - 1; i++) {\n          var x = result[i].x;\n          if (x !== undefined) {\n            if (x < maxPrecedingX) {\n              _common.logger.warn(WARN_MESSAGES.inputProgressLessThanPrecedingPoint(x, maxPrecedingX));\n              result[i].x = maxPrecedingX;\n            } else {\n              maxPrecedingX = x;\n            }\n          }\n        }\n\n        // 4. If any control point still lacks an input progress value, then\n        // for each contiguous run of such control points, set their input\n        // progress values so that they are evenly spaced between the preceding\n        // and following control points with input progress values.\n        var precedingX = result[0].x;\n        var missingCount = 0;\n        for (var _i = 1; _i < result.length; _i++) {\n          var _x = result[_i].x;\n          if (_x === undefined) {\n            missingCount++;\n            continue;\n          }\n          if (missingCount > 0) {\n            var range = _x - precedingX;\n            for (var j = 0; j < missingCount; j++) {\n              result[_i - missingCount + j].x = precedingX + range * (j + 1) / (missingCount + 1);\n            }\n          }\n          precedingX = _x;\n          missingCount = 0;\n        }\n        return result;\n      }\n    }]);\n  }();\n  LinearEasing.easingName = 'linear';\n});","lineCount":161,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13],[7,11,1,13,"_interopDefault"],[7,27,1,13,"e"],[7,28,1,13],[8,4,1,13],[8,11,1,13,"e"],[8,12,1,13],[8,16,1,13,"e"],[8,17,1,13],[8,18,1,13,"__esModule"],[8,28,1,13],[8,31,1,13,"e"],[8,32,1,13],[9,6,1,13,"default"],[9,13,1,13],[9,15,1,13,"e"],[10,4,1,13],[11,2,1,13],[12,2,11,0,"Object"],[12,8,11,0],[12,9,11,0,"defineProperty"],[12,23,11,0],[12,24,11,0,"exports"],[12,31,11,0],[13,4,11,0,"enumerable"],[13,14,11,0],[14,4,11,0,"get"],[14,7,11,0],[14,18,11,0,"get"],[14,19,11,0],[15,6,11,0],[15,13,11,0,"ERROR_MESSAGES"],[15,27,11,0],[16,4,11,0],[17,2,11,0],[18,2,18,0,"Object"],[18,8,18,0],[18,9,18,0,"defineProperty"],[18,23,18,0],[18,24,18,0,"exports"],[18,31,18,0],[19,4,18,0,"enumerable"],[19,14,18,0],[20,4,18,0,"get"],[20,7,18,0],[20,18,18,0,"get"],[20,19,18,0],[21,6,18,0],[21,13,18,0,"WARN_MESSAGES"],[21,26,18,0],[22,4,18,0],[23,2,18,0],[24,2,45,0,"Object"],[24,8,45,0],[24,9,45,0,"defineProperty"],[24,23,45,0],[24,24,45,0,"exports"],[24,31,45,0],[25,4,45,0,"enumerable"],[25,14,45,0],[26,4,45,0,"get"],[26,7,45,0],[26,18,45,0,"get"],[26,19,45,0],[27,6,45,0],[27,13,45,0,"LinearEasing"],[27,25,45,0],[28,4,45,0],[29,2,45,0],[30,2,153,1],[30,6,153,1,"_babelRuntimeHelpersClassCallCheck"],[30,40,153,1],[30,43,153,1,"require"],[30,50,153,1],[30,51,153,1,"_dependencyMap"],[30,65,153,1],[31,2,153,1],[31,6,153,1,"_classCallCheck"],[31,21,153,1],[31,24,153,1,"_interopDefault"],[31,39,153,1],[31,40,153,1,"_babelRuntimeHelpersClassCallCheck"],[31,74,153,1],[32,2,153,1],[32,6,153,1,"_babelRuntimeHelpersCreateClass"],[32,37,153,1],[32,40,153,1,"require"],[32,47,153,1],[32,48,153,1,"_dependencyMap"],[32,62,153,1],[33,2,153,1],[33,6,153,1,"_createClass"],[33,18,153,1],[33,21,153,1,"_interopDefault"],[33,36,153,1],[33,37,153,1,"_babelRuntimeHelpersCreateClass"],[33,68,153,1],[34,2,2,0],[34,6,2,0,"_common"],[34,13,2,0],[34,16,2,0,"require"],[34,23,2,0],[34,24,2,0,"_dependencyMap"],[34,38,2,0],[35,2,3,0],[35,6,3,0,"_constants"],[35,16,3,0],[35,19,3,0,"require"],[35,26,3,0],[35,27,3,0,"_dependencyMap"],[35,41,3,0],[36,2,11,7],[36,6,11,13,"ERROR_MESSAGES"],[36,20,11,27],[36,23,11,30],[37,4,12,2,"invalidPointsCount"],[37,22,12,20],[37,24,12,22,"invalidPointsCount"],[37,25,12,22],[37,30,13,4],[37,103,13,77],[38,4,14,2,"invalidInputProgressValue"],[38,29,14,27],[38,31,14,30,"inputProgress"],[38,44,14,60],[38,48,15,4],[38,74,15,30,"inputProgress"],[38,87,15,43],[39,2,16,0],[39,3,16,1],[40,2,18,7],[40,6,18,13,"WARN_MESSAGES"],[40,19,18,26],[40,22,18,29],[41,4,19,2,"inputProgressLessThanPrecedingPoint"],[41,39,19,37],[41,41,19,39,"inputProgressLessThanPrecedingPoint"],[41,42,19,40,"x"],[41,43,19,49],[41,45,19,51,"precedingX"],[41,55,19,69],[41,60,20,4],[41,91,20,35,"x"],[41,92,20,36],[41,146,20,90,"precedingX"],[41,156,20,100],[41,189,20,133,"precedingX"],[41,199,20,143],[42,2,21,0],[42,3,21,1],[43,2,23,0],[43,6,23,6,"parsePercentage"],[43,21,23,21],[43,24,23,25,"percentage"],[43,34,23,52],[43,38,23,65],[44,4,24,2],[44,8,24,6,"result"],[44,14,24,32],[45,4,25,2],[45,8,25,6],[45,15,25,13,"percentage"],[45,25,25,23],[45,30,25,28],[45,38,25,36],[45,40,25,38],[46,6,26,4,"result"],[46,12,26,10],[46,15,26,13,"percentage"],[46,25,26,23],[47,4,27,2],[47,5,27,3],[47,11,27,9],[47,15,27,13,"PERCENTAGE_REGEX"],[47,25,27,29],[47,26,27,29,"PERCENTAGE_REGEX"],[47,42,27,29],[47,43,27,30,"test"],[47,47,27,34],[47,48,27,35,"percentage"],[47,58,27,45],[47,59,27,46],[47,61,27,48],[48,6,28,4,"result"],[48,12,28,10],[48,15,28,13,"parseFloat"],[48,25,28,23],[48,26,28,24,"percentage"],[48,36,28,34],[48,37,28,35],[48,40,28,38],[48,43,28,41],[49,4,29,2],[50,4,31,2],[50,8,31,6,"result"],[50,14,31,12],[50,19,31,17,"undefined"],[50,28,31,26],[50,32,31,30,"result"],[50,38,31,36],[50,41,31,39],[50,42,31,40],[50,46,31,44,"result"],[50,52,31,50],[50,55,31,53],[50,56,31,54],[50,58,31,56],[51,6,32,4],[51,12,32,10],[51,16,32,14,"ReanimatedError"],[51,23,32,29],[51,24,32,29,"ReanimatedError"],[51,39,32,29],[51,40,33,6,"ERROR_MESSAGES"],[51,54,33,20],[51,55,33,21,"invalidInputProgressValue"],[51,80,33,46],[51,81,33,47,"percentage"],[51,91,33,57],[51,92,34,4],[51,93,34,5],[52,4,35,2],[53,4,37,2],[53,11,37,9,"result"],[53,17,37,15],[54,2,38,0],[54,3,38,1],[55,2,40,0],[55,6,40,6,"extrapolate"],[55,17,40,17],[55,20,40,20,"extrapolate"],[55,21,40,21,"x"],[55,22,40,30],[55,24,40,32,"point1"],[55,30,40,45],[55,32,40,47,"point2"],[55,38,40,60],[55,43,40,65],[56,4,41,2],[56,8,41,8,"slope"],[56,13,41,13],[56,16,41,16],[56,17,41,17,"point2"],[56,23,41,23],[56,24,41,24,"y"],[56,25,41,25],[56,28,41,28,"point1"],[56,34,41,34],[56,35,41,35,"y"],[56,36,41,36],[56,41,41,41,"point2"],[56,47,41,47],[56,48,41,48,"x"],[56,49,41,49],[56,52,41,52,"point1"],[56,58,41,58],[56,59,41,59,"x"],[56,60,41,60],[56,61,41,61],[57,4,42,2],[57,11,42,9,"point1"],[57,17,42,15],[57,18,42,16,"y"],[57,19,42,17],[57,22,42,20,"slope"],[57,27,42,25],[57,31,42,29,"x"],[57,32,42,30],[57,35,42,33,"point1"],[57,41,42,39],[57,42,42,40,"x"],[57,43,42,41],[57,44,42,42],[58,2,43,0],[58,3,43,1],[59,2,43,2],[59,6,45,13,"LinearEasing"],[59,18,45,25],[60,4,49,2],[60,13,49,2,"LinearEasing"],[60,26,49,14,"points"],[60,32,49,36],[60,34,49,38],[61,6,49,38],[61,10,49,38,"_classCallCheck"],[61,25,49,38],[61,26,49,38,"default"],[61,33,49,38],[61,41,49,38,"LinearEasing"],[61,53,49,38],[62,6,50,4],[62,10,50,8,"points"],[62,16,50,14],[62,17,50,15,"length"],[62,23,50,21],[62,26,50,24],[62,27,50,25],[62,29,50,27],[63,8,51,6],[63,14,51,12],[63,18,51,16,"ReanimatedError"],[63,25,51,31],[63,26,51,31,"ReanimatedError"],[63,41,51,31],[63,42,51,32,"ERROR_MESSAGES"],[63,56,51,46],[63,57,51,47,"invalidPointsCount"],[63,75,51,65],[63,76,51,66],[63,77,51,67],[63,78,51,68],[64,6,52,4],[65,6,53,4],[65,10,53,8],[65,11,53,9,"points"],[65,17,53,15],[65,20,53,18,"points"],[65,26,53,24],[65,27,53,25,"map"],[65,30,53,28],[65,31,53,30,"p"],[65,32,53,31],[65,36,54,6,"Array"],[65,41,54,11],[65,42,54,12,"isArray"],[65,49,54,19],[65,50,54,20,"p"],[65,51,54,21],[65,52,54,22],[65,56,54,26,"p"],[65,57,54,27],[65,58,54,28,"length"],[65,64,54,34],[65,69,54,39],[65,70,54,40],[65,73,54,43,"p"],[65,74,54,44],[65,75,54,45],[65,76,54,46],[65,77,54,47],[65,80,54,50,"p"],[65,81,55,4],[65,82,55,5],[66,4,56,2],[67,4,56,3],[67,15,56,3,"_createClass"],[67,27,56,3],[67,28,56,3,"default"],[67,35,56,3],[67,37,56,3,"LinearEasing"],[67,49,56,3],[68,6,56,3,"key"],[68,9,56,3],[69,6,56,3,"value"],[69,11,56,3],[69,13,58,2],[69,22,58,2,"toString"],[69,30,58,10,"toString"],[69,31,58,10],[69,33,58,21],[70,8,59,4],[70,15,59,11],[70,18,59,14,"LinearEasing"],[70,30,59,26],[70,31,59,27,"easingName"],[70,41,59,37],[70,45,59,41],[70,49,59,45],[70,50,59,46,"points"],[70,56,59,52],[70,57,60,7,"map"],[70,60,60,10],[70,61,60,12,"point"],[70,66,60,17],[70,70,61,8,"Array"],[70,75,61,13],[70,76,61,14,"isArray"],[70,83,61,21],[70,84,61,22,"point"],[70,89,61,27],[70,90,61,28],[70,93,62,12],[70,97,62,16,"point"],[70,102,62,21],[70,103,62,22,"map"],[70,106,62,25],[70,107,62,27,"p"],[70,108,62,28],[70,112,62,34],[70,119,62,41,"p"],[70,120,62,42],[70,125,62,47],[70,133,62,55],[70,136,62,58],[70,140,62,62,"p"],[70,141,62,63],[70,144,62,66],[70,147,62,69,"p"],[70,148,62,71],[70,149,62,72],[70,150,62,73,"join"],[70,154,62,77],[70,155,62,78],[70,159,62,82],[70,160,62,83],[70,163,62,86],[70,166,63,12,"point"],[70,171,64,6],[70,172,64,7],[70,173,65,7,"join"],[70,177,65,11],[70,178,65,12],[70,182,65,16],[70,183,65,17],[70,186,65,20],[71,6,66,2],[72,4,66,3],[73,6,66,3,"key"],[73,9,66,3],[74,6,66,3,"value"],[74,11,66,3],[74,13,68,2],[74,22,68,2,"normalize"],[74,31,68,11,"normalize"],[74,32,68,11],[74,34,68,38],[75,8,69,4],[75,12,69,10,"points"],[75,18,69,16],[75,21,69,19],[75,25,69,23],[75,26,69,24,"canonicalize"],[75,38,69,36],[75,39,69,37],[75,40,69,38],[77,8,71,4],[78,8,72,4],[79,8,73,4],[79,12,73,8,"points"],[79,18,73,14],[79,19,73,15],[79,20,73,16],[79,21,73,17],[79,22,73,18,"x"],[79,23,73,19],[79,26,73,22],[79,27,73,23],[79,29,73,25],[80,10,74,6,"points"],[80,16,74,12],[80,17,74,13,"unshift"],[80,24,74,20],[80,25,74,21],[81,12,74,23,"x"],[81,13,74,24],[81,15,74,26],[81,16,74,27],[82,12,74,29,"y"],[82,13,74,30],[82,15,74,32,"extrapolate"],[82,26,74,43],[82,27,74,44],[82,28,74,45],[82,30,74,47,"points"],[82,36,74,53],[82,37,74,54],[82,38,74,55],[82,39,74,56],[82,41,74,58,"points"],[82,47,74,64],[82,48,74,65],[82,49,74,66],[82,50,74,67],[83,10,74,69],[83,11,74,70],[83,12,74,71],[84,8,75,4],[85,8,76,4],[85,12,76,8,"points"],[85,18,76,14],[85,19,76,15,"points"],[85,25,76,21],[85,26,76,22,"length"],[85,32,76,28],[85,35,76,31],[85,36,76,32],[85,37,76,33],[85,38,76,34,"x"],[85,39,76,35],[85,42,76,38],[85,43,76,39],[85,45,76,41],[86,10,77,6,"points"],[86,16,77,12],[86,17,77,13,"push"],[86,21,77,17],[86,22,77,18],[87,12,78,8,"x"],[87,13,78,9],[87,15,78,11],[87,16,78,12],[88,12,79,8,"y"],[88,13,79,9],[88,15,79,11,"extrapolate"],[88,26,79,22],[88,27,79,23],[88,28,79,24],[88,30,79,26,"points"],[88,36,79,32],[88,37,79,33,"points"],[88,43,79,39],[88,44,79,40,"length"],[88,50,79,46],[88,53,79,49],[88,54,79,50],[88,55,79,51],[88,57,79,53,"points"],[88,63,79,59],[88,64,79,60,"points"],[88,70,79,66],[88,71,79,67,"length"],[88,77,79,73],[88,80,79,76],[88,81,79,77],[88,82,79,78],[89,10,80,6],[89,11,80,7],[89,12,80,8],[90,8,81,4],[91,8,83,4],[91,15,83,11],[92,10,83,13,"name"],[92,14,83,17],[92,16,83,19,"LinearEasing"],[92,28,83,31],[92,29,83,32,"easingName"],[92,39,83,42],[93,10,83,44,"points"],[94,8,83,51],[94,9,83,52],[95,6,84,2],[96,4,84,3],[97,6,84,3,"key"],[97,9,84,3],[98,6,84,3,"value"],[98,11,84,3],[98,13,86,2],[98,22,86,10,"canonicalize"],[98,34,86,22,"canonicalize"],[98,35,86,22],[98,37,86,25],[99,8,87,4],[99,12,87,10,"result"],[99,18,87,16],[99,21,87,19],[99,25,87,23],[99,26,87,24,"points"],[99,32,87,30],[99,33,87,31,"flatMap"],[99,40,87,38],[99,41,87,67,"point"],[99,46,87,72],[99,50,88,6,"Array"],[99,55,88,11],[99,56,88,12,"isArray"],[99,63,88,19],[99,64,88,20,"point"],[99,69,88,25],[99,70,88,26],[99,73,89,10,"point"],[99,78,89,15],[99,79,89,16,"slice"],[99,84,89,21],[99,85,89,22],[99,86,89,23],[99,87,89,24],[99,88,89,25,"map"],[99,91,89,28],[99,92,89,30,"x"],[99,93,89,31],[99,98,89,37],[100,10,89,39,"x"],[100,11,89,40],[100,13,89,42,"parsePercentage"],[100,28,89,57],[100,29,89,58,"x"],[100,30,89,59],[100,31,89,60],[101,10,89,62,"y"],[101,11,89,63],[101,13,89,65,"point"],[101,18,89,70],[101,19,89,71],[101,20,89,72],[102,8,89,74],[102,9,89,75],[102,10,89,76],[102,11,89,77],[102,14,90,10],[102,15,90,11],[103,10,90,13,"y"],[103,11,90,14],[103,13,90,16,"point"],[104,8,90,22],[104,9,90,23],[104,10,91,4],[104,11,91,5],[106,8,93,4],[107,8,94,4],[108,8,95,4],[108,12,95,8,"result"],[108,18,95,14],[108,19,95,15],[108,20,95,16],[108,21,95,17],[108,22,95,18,"x"],[108,23,95,19],[108,28,95,24,"undefined"],[108,37,95,33],[108,39,95,35],[109,10,96,6,"result"],[109,16,96,12],[109,17,96,13],[109,18,96,14],[109,19,96,15],[109,20,96,16,"x"],[109,21,96,17],[109,24,96,20],[109,25,96,21],[110,8,97,4],[112,8,99,4],[113,8,100,4],[114,8,101,4],[114,12,101,8,"result"],[114,18,101,14],[114,19,101,15,"result"],[114,25,101,21],[114,26,101,22,"length"],[114,32,101,28],[114,35,101,31],[114,36,101,32],[114,37,101,33],[114,38,101,34,"x"],[114,39,101,35],[114,44,101,40,"undefined"],[114,53,101,49],[114,55,101,51],[115,10,102,6,"result"],[115,16,102,12],[115,17,102,13,"result"],[115,23,102,19],[115,24,102,20,"length"],[115,30,102,26],[115,33,102,29],[115,34,102,30],[115,35,102,31],[115,36,102,32,"x"],[115,37,102,33],[115,40,102,36],[115,41,102,37],[116,8,103,4],[118,8,105,4],[119,8,106,4],[120,8,107,4],[121,8,108,4],[122,8,109,4],[122,12,109,8,"maxPrecedingX"],[122,25,109,21],[122,28,109,24],[122,29,109,25],[123,8,110,4],[123,13,110,9],[123,17,110,13,"i"],[123,18,110,14],[123,21,110,17],[123,22,110,18],[123,24,110,20,"i"],[123,25,110,21],[123,28,110,24,"result"],[123,34,110,30],[123,35,110,31,"length"],[123,41,110,37],[123,44,110,40],[123,45,110,41],[123,47,110,43,"i"],[123,48,110,44],[123,50,110,46],[123,52,110,48],[124,10,111,6],[124,14,111,12,"x"],[124,15,111,13],[124,18,111,16,"result"],[124,24,111,22],[124,25,111,23,"i"],[124,26,111,24],[124,27,111,25],[124,28,111,26,"x"],[124,29,111,27],[125,10,112,6],[125,14,112,10,"x"],[125,15,112,11],[125,20,112,16,"undefined"],[125,29,112,25],[125,31,112,27],[126,12,113,8],[126,16,113,12,"x"],[126,17,113,13],[126,20,113,16,"maxPrecedingX"],[126,33,113,29],[126,35,113,31],[127,14,114,10,"logger"],[127,21,114,16],[127,22,114,16,"logger"],[127,28,114,16],[127,29,114,17,"warn"],[127,33,114,21],[127,34,115,12,"WARN_MESSAGES"],[127,47,115,25],[127,48,115,26,"inputProgressLessThanPrecedingPoint"],[127,83,115,61],[127,84,115,62,"x"],[127,85,115,63],[127,87,115,65,"maxPrecedingX"],[127,100,115,78],[127,101,116,10],[127,102,116,11],[128,14,117,10,"result"],[128,20,117,16],[128,21,117,17,"i"],[128,22,117,18],[128,23,117,19],[128,24,117,20,"x"],[128,25,117,21],[128,28,117,24,"maxPrecedingX"],[128,41,117,37],[129,12,118,8],[129,13,118,9],[129,19,118,15],[130,14,119,10,"maxPrecedingX"],[130,27,119,23],[130,30,119,26,"x"],[130,31,119,27],[131,12,120,8],[132,10,121,6],[133,8,122,4],[135,8,124,4],[136,8,125,4],[137,8,126,4],[138,8,127,4],[139,8,128,4],[139,12,128,8,"precedingX"],[139,22,128,18],[139,25,128,21,"result"],[139,31,128,27],[139,32,128,28],[139,33,128,29],[139,34,128,30],[139,35,128,31,"x"],[139,36,128,32],[140,8,129,4],[140,12,129,8,"missingCount"],[140,24,129,20],[140,27,129,23],[140,28,129,24],[141,8,130,4],[141,13,130,9],[141,17,130,13,"i"],[141,19,130,14],[141,22,130,17],[141,23,130,18],[141,25,130,20,"i"],[141,27,130,21],[141,30,130,24,"result"],[141,36,130,30],[141,37,130,31,"length"],[141,43,130,37],[141,45,130,39,"i"],[141,47,130,40],[141,49,130,42],[141,51,130,44],[142,10,131,6],[142,14,131,12,"x"],[142,16,131,13],[142,19,131,16,"result"],[142,25,131,22],[142,26,131,23,"i"],[142,28,131,24],[142,29,131,25],[142,30,131,26,"x"],[142,31,131,27],[143,10,133,6],[143,14,133,10,"x"],[143,16,133,11],[143,21,133,16,"undefined"],[143,30,133,25],[143,32,133,27],[144,12,134,8,"missingCount"],[144,24,134,20],[144,26,134,22],[145,12,135,8],[146,10,136,6],[147,10,138,6],[147,14,138,10,"missingCount"],[147,26,138,22],[147,29,138,25],[147,30,138,26],[147,32,138,28],[148,12,139,8],[148,16,139,14,"range"],[148,21,139,19],[148,24,139,22,"x"],[148,26,139,23],[148,29,139,26,"precedingX"],[148,39,139,36],[149,12,141,8],[149,17,141,13],[149,21,141,17,"j"],[149,22,141,18],[149,25,141,21],[149,26,141,22],[149,28,141,24,"j"],[149,29,141,25],[149,32,141,28,"missingCount"],[149,44,141,40],[149,46,141,42,"j"],[149,47,141,43],[149,49,141,45],[149,51,141,47],[150,14,142,10,"result"],[150,20,142,16],[150,21,142,17,"i"],[150,23,142,18],[150,26,142,21,"missingCount"],[150,38,142,33],[150,41,142,36,"j"],[150,42,142,37],[150,43,142,38],[150,44,142,39,"x"],[150,45,142,40],[150,48,143,12,"precedingX"],[150,58,143,22],[150,61,143,26,"range"],[150,66,143,31],[150,70,143,35,"j"],[150,71,143,36],[150,74,143,39],[150,75,143,40],[150,76,143,41],[150,80,143,46,"missingCount"],[150,92,143,58],[150,95,143,61],[150,96,143,62],[150,97,143,63],[151,12,144,8],[152,10,145,6],[153,10,147,6,"precedingX"],[153,20,147,16],[153,23,147,19,"x"],[153,25,147,20],[154,10,148,6,"missingCount"],[154,22,148,18],[154,25,148,21],[154,26,148,22],[155,8,149,4],[156,8,151,4],[156,15,151,11,"result"],[156,21,151,17],[157,6,152,2],[158,4,152,3],[159,2,152,3],[160,2,45,13,"LinearEasing"],[160,14,45,25],[160,15,46,18,"easingName"],[160,25,46,28],[160,28,46,31],[160,36,46,39],[161,0,46,39],[161,3]],"functionMap":{"names":["<global>","ERROR_MESSAGES.invalidPointsCount","ERROR_MESSAGES.invalidInputProgressValue","WARN_MESSAGES.inputProgressLessThanPrecedingPoint","parsePercentage","extrapolate","LinearEasing","LinearEasing#constructor","points.map$argument_0","LinearEasing#toString","point.map$argument_0","LinearEasing#normalize","LinearEasing#canonicalize","points.flatMap$argument_0","point.slice.map$argument_0"],"mappings":"AAA;sBCW;6EDC;6BEC;kGFC;uCGI;iJHC;wBIG;CJe;oBKE;CLG;OME;ECI;6BCI;mDDC;GDE;EGE;WDE;0BEE,6CF;iBCC;GHG;EKE;GLgB;EME;kECC;6BCE,+CD;wBDC;GN8D;CNC"},"hasCjsExports":false},"type":"js/module"}]}