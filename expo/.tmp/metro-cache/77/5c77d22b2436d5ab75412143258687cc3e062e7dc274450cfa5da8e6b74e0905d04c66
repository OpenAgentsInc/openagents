{"dependencies":[{"name":"react/jsx-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"3suYSPX9nHbHZ1xNTsKXtKj0atE=","exportNames":["*"],"imports":1}},{"name":"@react-navigation/native","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":17,"index":168},"end":{"line":5,"column":52,"index":203}}],"key":"uE+cRVNnMKkS9OYKR5fpRqPul5s=","exportNames":["*"],"imports":1}},{"name":"nanoid/non-secure","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":21,"index":226},"end":{"line":6,"column":49,"index":254}}],"key":"JdWyQHWvvi7kws4n0MhZWUpiB2c=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":16,"index":272},"end":{"line":7,"column":32,"index":288}}],"key":"XN65eZP/QkNMzaBAXbG/zPyidpY=","exportNames":["*"],"imports":1}},{"name":"./withLayoutContext","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":28,"index":318},"end":{"line":8,"column":58,"index":348}}],"key":"uI8DQ+0pBl5vWiQx60egJpSWI0Q=","exportNames":["*"],"imports":1}},{"name":"../fork/native-stack/createNativeStackNavigator","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":37,"index":387},"end":{"line":9,"column":95,"index":445}}],"key":"RHp/c21WVHqsHHhJDMS04wvWTG0=","exportNames":["*"],"imports":1}},{"name":"../link/preview/LinkPreviewContext","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":29,"index":476},"end":{"line":10,"column":74,"index":521}}],"key":"XkVRz5U0xvqSwEsOtfEUIaEk8Lg=","exportNames":["*"],"imports":1}},{"name":"../navigationParams","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":27,"index":550},"end":{"line":11,"column":57,"index":580}}],"key":"KeDGhIQYe7bEwtueZKPQrXQYcV0=","exportNames":["*"],"imports":1}},{"name":"../useScreens","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":21,"index":603},"end":{"line":12,"column":45,"index":627}}],"key":"8gimF/GgYNRJ+ojtiVDaShLJVrk=","exportNames":["*"],"imports":1}},{"name":"../views/Protected","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":20,"index":649},"end":{"line":13,"column":49,"index":678}}],"key":"k1+uDYZ/MvJqE4WVPvI1cbQswMs=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n  'use client';\n\n  var _reactJsxRuntime = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.StackRouter = exports.stackRouterOverride = undefined;\n  var native_1 = require(_dependencyMap[1]);\n  var non_secure_1 = require(_dependencyMap[2]);\n  var react_1 = require(_dependencyMap[3]);\n  var withLayoutContext_1 = require(_dependencyMap[4]);\n  var createNativeStackNavigator_1 = require(_dependencyMap[5]);\n  var LinkPreviewContext_1 = require(_dependencyMap[6]);\n  var navigationParams_1 = require(_dependencyMap[7]);\n  var useScreens_1 = require(_dependencyMap[8]);\n  var Protected_1 = require(_dependencyMap[9]);\n  var NativeStackNavigator = (0, createNativeStackNavigator_1.createNativeStackNavigator)().Navigator;\n  var RNStack = (0, withLayoutContext_1.withLayoutContext)(NativeStackNavigator);\n  function isStackAction(action) {\n    return action.type === 'PUSH' || action.type === 'NAVIGATE' || action.type === 'POP' || action.type === 'POP_TO_TOP' || action.type === 'REPLACE' || action.type === 'PRELOAD';\n  }\n  var isPreviewAction = action => !!action.payload && 'params' in action.payload && typeof action.payload.params === 'object' && !!(0, navigationParams_1.getInternalExpoRouterParams)(action.payload?.params ?? undefined)['__internal__expo_router_is_preview_navigation'];\n  /**\n   * React Navigation matches a screen by its name or a 'getID' function that uniquely identifies a screen.\n   * When a screen has been uniquely identified, the Stack can only have one instance of that screen.\n   *\n   * Expo Router allows for a screen to be matched by name and path params, a 'getID' function or a singular id.\n   *\n   * Instead of reimplementing the entire StackRouter, we can override the getStateForAction method to handle the singular screen logic.\n   *\n   */\n  var stackRouterOverride = original => {\n    return {\n      getStateForAction: (state, action, options) => {\n        if (action.target && action.target !== state.key) {\n          return null;\n        }\n        if (!isStackAction(action)) {\n          return original.getStateForAction(state, action, options);\n        }\n        // The dynamic getId added to an action, `router.push('screen', { singular: true })`\n        var actionSingularOptions = action.payload && 'singular' in action.payload ? action.payload.singular : undefined;\n        // Handle if 'getID' or 'singular' is set.\n        function getIdFunction() {\n          // Actions can be fired by the user, so we do need to validate their structure.\n          if (!('payload' in action) || !action.payload || !('name' in action.payload) || typeof action.payload.name !== 'string') {\n            return;\n          }\n          var actionName = action.payload.name;\n          return (\n            // The dynamic singular added to an action, `router.push('screen', { singular: () => 'id' })`\n            getActionSingularIdFn(actionSingularOptions, actionName) ||\n            // The static getId added as a prop to `<Screen singular />` or `<Screen getId={} />`\n            options.routeGetIdList[actionName]\n          );\n        }\n        var routeParamList = options.routeParamList;\n        switch (action.type) {\n          case 'PUSH':\n          case 'NAVIGATE':\n            {\n              if (!state.routeNames.includes(action.payload.name)) {\n                return null;\n              }\n              // START FORK\n              var getId = getIdFunction();\n              // const getId = options.routeGetIdList[action.payload.name];\n              // END FORK\n              var id = getId?.({\n                params: action.payload.params\n              });\n              var route;\n              if (id !== undefined) {\n                route = state.routes.findLast(route => route.name === action.payload.name && id === getId?.({\n                  params: route.params\n                }));\n              } else if (action.type === 'NAVIGATE') {\n                var currentRoute = state.routes[state.index];\n                // If the route matches the current one, then navigate to it\n                if (action.payload.name === currentRoute.name && !isPreviewAction(action)) {\n                  route = currentRoute;\n                } else if (action.payload.pop) {\n                  route = state.routes.findLast(route => route.name === action.payload.name);\n                }\n              }\n              // START FORK\n              if (isPreviewAction(action) && !route) {\n                route = state.preloadedRoutes.find(route => route.name === action.payload.name && id === route.key);\n              }\n              // END FORK\n              if (!route) {\n                route = state.preloadedRoutes.find(route => route.name === action.payload.name && id === getId?.({\n                  params: route.params\n                }));\n              }\n              var params;\n              if (action.type === 'NAVIGATE' && action.payload.merge && route) {\n                params = action.payload.params !== undefined || routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...route.params,\n                  ...action.payload.params\n                } : route.params;\n              } else {\n                params = routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params;\n              }\n              var routes;\n              if (route) {\n                if (action.type === 'NAVIGATE' && action.payload.pop) {\n                  routes = [];\n                  // Get all routes until the matching one\n                  for (var r of state.routes) {\n                    if (r.key === route.key) {\n                      routes.push({\n                        ...route,\n                        path: action.payload.path !== undefined ? action.payload.path : route.path,\n                        params\n                      });\n                      break;\n                    }\n                    routes.push(r);\n                  }\n                } else {\n                  // START FORK\n                  // If there is an id, then filter out the existing route with the same id.\n                  // THIS ACTION IS DANGEROUS. This can cause React Native Screens to freeze\n                  if (id !== undefined) {\n                    routes = state.routes.filter(r => r.key !== route.key);\n                  } else if (action.type === 'NAVIGATE' && state.routes.length > 0) {\n                    // The navigation action should only replace the last route if it has the same name and path params.\n                    var lastRoute = state.routes[state.routes.length - 1];\n                    if ((0, useScreens_1.getSingularId)(lastRoute.name, {\n                      params: lastRoute.params\n                    }) === (0, useScreens_1.getSingularId)(route.name, {\n                      params\n                    })) {\n                      routes = state.routes.slice(0, -1);\n                    } else {\n                      routes = [...state.routes];\n                    }\n                  } else {\n                    routes = [...state.routes];\n                  }\n                  // If the routes length is the same as the state routes length, then we are navigating to a new route.\n                  // Otherwise we are replacing an existing route.\n                  var key = routes.length === state.routes.length && !isPreviewAction(action) ? `${action.payload.name}-${(0, non_secure_1.nanoid)()}` : route.key;\n                  routes.push({\n                    ...route,\n                    key,\n                    path: action.type === 'NAVIGATE' && action.payload.path !== undefined ? action.payload.path : route.path,\n                    params\n                  });\n                  // routes = state.routes.filter((r) => r.key !== route.key);\n                  // routes.push({\n                  //   ...route,\n                  //   path:\n                  //     action.type === 'NAVIGATE' && action.payload.path !== undefined\n                  //       ? action.payload.path\n                  //       : route.path,\n                  //   params,\n                  // });\n                  // END FORK\n                }\n              } else {\n                routes = [...state.routes, {\n                  key: `${action.payload.name}-${(0, non_secure_1.nanoid)()}`,\n                  name: action.payload.name,\n                  path: action.type === 'NAVIGATE' ? action.payload.path : undefined,\n                  params\n                }];\n              }\n              // START FORK\n              // return filterSingular(\n              var result = {\n                ...state,\n                index: routes.length - 1,\n                preloadedRoutes: state.preloadedRoutes.filter(route => routes[routes.length - 1].key !== route.key),\n                routes\n              };\n              if (actionSingularOptions) {\n                return filterSingular(result, getId);\n              }\n              return result;\n              // return {\n              //   ...state,\n              //   index: routes.length - 1,\n              //   preloadedRoutes: state.preloadedRoutes.filter(\n              //     (route) => routes[routes.length - 1].key !== route.key\n              //   ),\n              //   routes,\n              // };\n              // END FORK\n            }\n          case 'PRELOAD':\n            {\n              // START FORK\n              // This will be the case for example for protected route\n              if (!state.routeNames.includes(action.payload.name)) {\n                return null;\n              }\n              // END FORK\n              var _getId = options.routeGetIdList[action.payload.name];\n              var _id = _getId?.({\n                params: action.payload.params\n              });\n              var _route;\n              if (_id !== undefined) {\n                _route = state.routes.find(route => route.name === action.payload.name && _id === _getId?.({\n                  params: route.params\n                }));\n              }\n              if (_route) {\n                return {\n                  ...state,\n                  routes: state.routes.map(r => {\n                    if (r.key !== _route?.key) {\n                      return r;\n                    }\n                    return {\n                      ...r,\n                      params: routeParamList[action.payload.name] !== undefined ? {\n                        ...routeParamList[action.payload.name],\n                        ...action.payload.params\n                      } : action.payload.params\n                    };\n                  })\n                };\n              } else {\n                // START FORK\n                var currentPreloadedRoute = {\n                  key: `${action.payload.name}-${(0, non_secure_1.nanoid)()}`,\n                  name: action.payload.name,\n                  params: routeParamList[action.payload.name] !== undefined ? {\n                    ...routeParamList[action.payload.name],\n                    ...action.payload.params\n                  } : action.payload.params\n                };\n                // END FORK\n                return {\n                  ...state,\n                  // START FORK\n                  // Adding the current preloaded route to the beginning of the preloadedRoutes array\n                  // This ensures that the preloaded route will be the next one after the visible route\n                  // and when navigation will happen, there will be no reshuffling\n                  // This is a workaround for the link preview navigation issue, when screen would freeze after navigation from native side\n                  // and reshuffling from react-navigation\n                  preloadedRoutes: [currentPreloadedRoute].concat(state.preloadedRoutes.filter(r => r.name !== action.payload.name || _id !== _getId?.({\n                    params: r.params\n                  })))\n                  // preloadedRoutes: state.preloadedRoutes\n                  //   .filter(\n                  //     (r) =>\n                  //       r.name !== action.payload.name ||\n                  //       id !== getId?.({ params: r.params })\n                  //   )\n                  //   .concat({\n                  //     key: `${action.payload.name}-${nanoid()}`,\n                  //     name: action.payload.name,\n                  //     params:\n                  //       routeParamList[action.payload.name] !== undefined\n                  //         ? {\n                  //             ...routeParamList[action.payload.name],\n                  //             ...action.payload.params,\n                  //           }\n                  //         : action.payload.params,\n                  //   }),\n                  // END FORK\n                };\n              }\n            }\n          default:\n            {\n              return original.getStateForAction(state, action, options);\n            }\n        }\n      }\n    };\n  };\n  exports.stackRouterOverride = stackRouterOverride;\n  function getActionSingularIdFn(actionGetId, name) {\n    if (typeof actionGetId === 'function') {\n      return options => actionGetId(name, options.params ?? {});\n    } else if (actionGetId === true) {\n      return options => (0, useScreens_1.getSingularId)(name, options);\n    }\n    return undefined;\n  }\n  /**\n   * If there is a dynamic singular on an action, then we need to filter the state to only have singular screens.\n   * As multiples may have been added before we did the singular navigation.\n   */\n  function filterSingular(state, getId) {\n    if (!state) {\n      return state;\n    }\n    if (!state.routes) {\n      return state;\n    }\n    var currentIndex = state.index || state.routes.length - 1;\n    var current = state.routes[currentIndex];\n    var name = current.name;\n    var id = getId?.({\n      params: current.params\n    });\n    if (!id) {\n      return state;\n    }\n    // TypeScript needs a type assertion here for the filter to work.\n    var routes = state.routes;\n    routes = routes.filter((route, index) => {\n      // If the route is the current route, keep it.\n      if (index === currentIndex) {\n        return true;\n      }\n      // Remove all other routes with the same name and id.\n      return name !== route.name || id !== getId?.({\n        params: route.params\n      });\n    });\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes\n    };\n  }\n  var Stack = Object.assign(props => {\n    var _ref = (0, LinkPreviewContext_1.useLinkPreviewContext)(),\n      isStackAnimationDisabled = _ref.isStackAnimationDisabled;\n    var screenOptions = (0, react_1.useMemo)(() => {\n      var condition = isStackAnimationDisabled ? () => true : shouldDisableAnimationBasedOnParams;\n      return disableAnimationInScreenOptions(props.screenOptions, condition);\n    }, [props.screenOptions, isStackAnimationDisabled]);\n    return /*#__PURE__*/_reactJsxRuntime.jsx(RNStack, {\n      ...props,\n      screenOptions: screenOptions,\n      UNSTABLE_router: exports.stackRouterOverride\n    });\n  }, {\n    Screen: RNStack.Screen,\n    Protected: Protected_1.Protected\n  });\n  function disableAnimationInScreenOptions(options, condition) {\n    if (options && typeof options === 'function') {\n      return props => {\n        var oldOptions = options(props);\n        if (condition(props.route)) {\n          return {\n            ...oldOptions,\n            animation: 'none'\n          };\n        }\n        return oldOptions ?? {};\n      };\n    }\n    return props => {\n      if (condition(props.route)) {\n        return {\n          ...(options ?? {}),\n          animation: 'none'\n        };\n      }\n      return options ?? {};\n    };\n  }\n  function shouldDisableAnimationBasedOnParams(route) {\n    var expoParams = (0, navigationParams_1.getInternalExpoRouterParams)(route.params);\n    return !!expoParams.__internal_expo_router_no_animation;\n  }\n  exports.default = Stack;\n  var StackRouter = options => {\n    var router = (0, native_1.StackRouter)(options);\n    return {\n      ...router,\n      ...(0, exports.stackRouterOverride)(router)\n    };\n  };\n  exports.StackRouter = StackRouter;\n});","lineCount":382,"map":[[2,2,1,0],[2,14,1,12],[3,2,2,0],[3,14,2,12],[5,2,2,13],[5,6,2,13,"_reactJsxRuntime"],[5,22,2,13],[5,25,2,13,"require"],[5,32,2,13],[5,33,2,13,"_dependencyMap"],[5,47,2,13],[6,2,3,0,"Object"],[6,8,3,6],[6,9,3,7,"defineProperty"],[6,23,3,21],[6,24,3,22,"exports"],[6,31,3,29],[6,33,3,31],[6,45,3,43],[6,47,3,45],[7,4,3,47,"value"],[7,9,3,52],[7,11,3,54],[8,2,3,59],[8,3,3,60],[8,4,3,61],[9,2,4,0,"exports"],[9,9,4,7],[9,10,4,8,"StackRouter"],[9,21,4,19],[9,24,4,22,"exports"],[9,31,4,29],[9,32,4,30,"stackRouterOverride"],[9,51,4,49],[9,54,4,49,"undefined"],[9,63,4,58],[10,2,5,0],[10,6,5,6,"native_1"],[10,14,5,14],[10,17,5,17,"require"],[10,24,5,24],[10,25,5,24,"_dependencyMap"],[10,39,5,24],[10,42,5,51],[10,43,5,52],[11,2,6,0],[11,6,6,6,"non_secure_1"],[11,18,6,18],[11,21,6,21,"require"],[11,28,6,28],[11,29,6,28,"_dependencyMap"],[11,43,6,28],[11,46,6,48],[11,47,6,49],[12,2,7,0],[12,6,7,6,"react_1"],[12,13,7,13],[12,16,7,16,"require"],[12,23,7,23],[12,24,7,23,"_dependencyMap"],[12,38,7,23],[12,41,7,31],[12,42,7,32],[13,2,8,0],[13,6,8,6,"withLayoutContext_1"],[13,25,8,25],[13,28,8,28,"require"],[13,35,8,35],[13,36,8,35,"_dependencyMap"],[13,50,8,35],[13,53,8,57],[13,54,8,58],[14,2,9,0],[14,6,9,6,"createNativeStackNavigator_1"],[14,34,9,34],[14,37,9,37,"require"],[14,44,9,44],[14,45,9,44,"_dependencyMap"],[14,59,9,44],[14,62,9,94],[14,63,9,95],[15,2,10,0],[15,6,10,6,"LinkPreviewContext_1"],[15,26,10,26],[15,29,10,29,"require"],[15,36,10,36],[15,37,10,36,"_dependencyMap"],[15,51,10,36],[15,54,10,73],[15,55,10,74],[16,2,11,0],[16,6,11,6,"navigationParams_1"],[16,24,11,24],[16,27,11,27,"require"],[16,34,11,34],[16,35,11,34,"_dependencyMap"],[16,49,11,34],[16,52,11,56],[16,53,11,57],[17,2,12,0],[17,6,12,6,"useScreens_1"],[17,18,12,18],[17,21,12,21,"require"],[17,28,12,28],[17,29,12,28,"_dependencyMap"],[17,43,12,28],[17,46,12,44],[17,47,12,45],[18,2,13,0],[18,6,13,6,"Protected_1"],[18,17,13,17],[18,20,13,20,"require"],[18,27,13,27],[18,28,13,27,"_dependencyMap"],[18,42,13,27],[18,45,13,48],[18,46,13,49],[19,2,14,0],[19,6,14,6,"NativeStackNavigator"],[19,26,14,26],[19,29,14,29],[19,30,14,30],[19,31,14,31],[19,33,14,33,"createNativeStackNavigator_1"],[19,61,14,61],[19,62,14,62,"createNativeStackNavigator"],[19,88,14,88],[19,90,14,90],[19,91,14,91],[19,92,14,92,"Navigator"],[19,101,14,101],[20,2,15,0],[20,6,15,6,"RNStack"],[20,13,15,13],[20,16,15,16],[20,17,15,17],[20,18,15,18],[20,20,15,20,"withLayoutContext_1"],[20,39,15,39],[20,40,15,40,"withLayoutContext"],[20,57,15,57],[20,59,15,59,"NativeStackNavigator"],[20,79,15,79],[20,80,15,80],[21,2,16,0],[21,11,16,9,"isStackAction"],[21,24,16,22,"isStackAction"],[21,25,16,23,"action"],[21,31,16,29],[21,33,16,31],[22,4,17,4],[22,11,17,12,"action"],[22,17,17,18],[22,18,17,19,"type"],[22,22,17,23],[22,27,17,28],[22,33,17,34],[22,37,18,8,"action"],[22,43,18,14],[22,44,18,15,"type"],[22,48,18,19],[22,53,18,24],[22,63,18,34],[22,67,19,8,"action"],[22,73,19,14],[22,74,19,15,"type"],[22,78,19,19],[22,83,19,24],[22,88,19,29],[22,92,20,8,"action"],[22,98,20,14],[22,99,20,15,"type"],[22,103,20,19],[22,108,20,24],[22,120,20,36],[22,124,21,8,"action"],[22,130,21,14],[22,131,21,15,"type"],[22,135,21,19],[22,140,21,24],[22,149,21,33],[22,153,22,8,"action"],[22,159,22,14],[22,160,22,15,"type"],[22,164,22,19],[22,169,22,24],[22,178,22,33],[23,2,23,0],[24,2,24,0],[24,6,24,6,"isPreviewAction"],[24,21,24,21],[24,24,24,25,"action"],[24,30,24,31],[24,34,24,36],[24,35,24,37],[24,36,24,38,"action"],[24,42,24,44],[24,43,24,45,"payload"],[24,50,24,52],[24,54,25,4],[24,62,25,12],[24,66,25,16,"action"],[24,72,25,22],[24,73,25,23,"payload"],[24,80,25,30],[24,84,26,4],[24,91,26,11,"action"],[24,97,26,17],[24,98,26,18,"payload"],[24,105,26,25],[24,106,26,26,"params"],[24,112,26,32],[24,117,26,37],[24,125,26,45],[24,129,27,4],[24,130,27,5],[24,131,27,6],[24,132,27,7],[24,133,27,8],[24,135,27,10,"navigationParams_1"],[24,153,27,28],[24,154,27,29,"getInternalExpoRouterParams"],[24,181,27,56],[24,183,27,58,"action"],[24,189,27,64],[24,190,27,65,"payload"],[24,197,27,72],[24,199,27,74,"params"],[24,205,27,80],[24,209,27,84,"undefined"],[24,218,27,93],[24,219,27,94],[24,220,27,95],[24,267,27,142],[24,268,27,143],[25,2,28,0],[26,0,29,0],[27,0,30,0],[28,0,31,0],[29,0,32,0],[30,0,33,0],[31,0,34,0],[32,0,35,0],[33,0,36,0],[34,2,37,0],[34,6,37,6,"stackRouterOverride"],[34,25,37,25],[34,28,37,29,"original"],[34,36,37,37],[34,40,37,42],[35,4,38,4],[35,11,38,11],[36,6,39,8,"getStateForAction"],[36,23,39,25],[36,25,39,27,"getStateForAction"],[36,26,39,28,"state"],[36,31,39,33],[36,33,39,35,"action"],[36,39,39,41],[36,41,39,43,"options"],[36,48,39,50],[36,53,39,55],[37,8,40,12],[37,12,40,16,"action"],[37,18,40,22],[37,19,40,23,"target"],[37,25,40,29],[37,29,40,33,"action"],[37,35,40,39],[37,36,40,40,"target"],[37,42,40,46],[37,47,40,51,"state"],[37,52,40,56],[37,53,40,57,"key"],[37,56,40,60],[37,58,40,62],[38,10,41,16],[38,17,41,23],[38,21,41,27],[39,8,42,12],[40,8,43,12],[40,12,43,16],[40,13,43,17,"isStackAction"],[40,26,43,30],[40,27,43,31,"action"],[40,33,43,37],[40,34,43,38],[40,36,43,40],[41,10,44,16],[41,17,44,23,"original"],[41,25,44,31],[41,26,44,32,"getStateForAction"],[41,43,44,49],[41,44,44,50,"state"],[41,49,44,55],[41,51,44,57,"action"],[41,57,44,63],[41,59,44,65,"options"],[41,66,44,72],[41,67,44,73],[42,8,45,12],[43,8,46,12],[44,8,47,12],[44,12,47,18,"actionSingularOptions"],[44,33,47,39],[44,36,47,42,"action"],[44,42,47,48],[44,43,47,49,"payload"],[44,50,47,56],[44,54,47,60],[44,64,47,70],[44,68,47,74,"action"],[44,74,47,80],[44,75,47,81,"payload"],[44,82,47,88],[44,85,48,18,"action"],[44,91,48,24],[44,92,48,25,"payload"],[44,99,48,32],[44,100,48,33,"singular"],[44,108,48,41],[44,111,49,18,"undefined"],[44,120,49,27],[45,8,50,12],[46,8,51,12],[46,17,51,21,"getIdFunction"],[46,30,51,34,"getIdFunction"],[46,31,51,34],[46,33,51,37],[47,10,52,16],[48,10,53,16],[48,14,53,20],[48,16,53,22],[48,25,53,31],[48,29,53,35,"action"],[48,35,53,41],[48,36,53,42],[48,40,54,20],[48,41,54,21,"action"],[48,47,54,27],[48,48,54,28,"payload"],[48,55,54,35],[48,59,55,20],[48,61,55,22],[48,67,55,28],[48,71,55,32,"action"],[48,77,55,38],[48,78,55,39,"payload"],[48,85,55,46],[48,86,55,47],[48,90,56,20],[48,97,56,27,"action"],[48,103,56,33],[48,104,56,34,"payload"],[48,111,56,41],[48,112,56,42,"name"],[48,116,56,46],[48,121,56,51],[48,129,56,59],[48,131,56,61],[49,12,57,20],[50,10,58,16],[51,10,59,16],[51,14,59,22,"actionName"],[51,24,59,32],[51,27,59,35,"action"],[51,33,59,41],[51,34,59,42,"payload"],[51,41,59,49],[51,42,59,50,"name"],[51,46,59,54],[52,10,60,16],[53,12,61,16],[54,12,62,16,"getActionSingularIdFn"],[54,33,62,37],[54,34,62,38,"actionSingularOptions"],[54,55,62,59],[54,57,62,61,"actionName"],[54,67,62,71],[54,68,62,72],[55,12,63,20],[56,12,64,20,"options"],[56,19,64,27],[56,20,64,28,"routeGetIdList"],[56,34,64,42],[56,35,64,43,"actionName"],[56,45,64,53],[57,10,64,54],[58,8,65,12],[59,8,66,12],[59,12,66,20,"routeParamList"],[59,26,66,34],[59,29,66,39,"options"],[59,36,66,46],[59,37,66,20,"routeParamList"],[59,51,66,34],[60,8,67,12],[60,16,67,20,"action"],[60,22,67,26],[60,23,67,27,"type"],[60,27,67,31],[61,10,68,16],[61,15,68,21],[61,21,68,27],[62,10,69,16],[62,15,69,21],[62,25,69,31],[63,12,69,33],[64,14,70,20],[64,18,70,24],[64,19,70,25,"state"],[64,24,70,30],[64,25,70,31,"routeNames"],[64,35,70,41],[64,36,70,42,"includes"],[64,44,70,50],[64,45,70,51,"action"],[64,51,70,57],[64,52,70,58,"payload"],[64,59,70,65],[64,60,70,66,"name"],[64,64,70,70],[64,65,70,71],[64,67,70,73],[65,16,71,24],[65,23,71,31],[65,27,71,35],[66,14,72,20],[67,14,73,20],[68,14,74,20],[68,18,74,26,"getId"],[68,23,74,31],[68,26,74,34,"getIdFunction"],[68,39,74,47],[68,40,74,48],[68,41,74,49],[69,14,75,20],[70,14,76,20],[71,14,77,20],[71,18,77,26,"id"],[71,20,77,28],[71,23,77,31,"getId"],[71,28,77,36],[71,31,77,39],[72,16,77,41,"params"],[72,22,77,47],[72,24,77,49,"action"],[72,30,77,55],[72,31,77,56,"payload"],[72,38,77,63],[72,39,77,64,"params"],[73,14,77,71],[73,15,77,72],[73,16,77,73],[74,14,78,20],[74,18,78,24,"route"],[74,23,78,29],[75,14,79,20],[75,18,79,24,"id"],[75,20,79,26],[75,25,79,31,"undefined"],[75,34,79,40],[75,36,79,42],[76,16,80,24,"route"],[76,21,80,29],[76,24,80,32,"state"],[76,29,80,37],[76,30,80,38,"routes"],[76,36,80,44],[76,37,80,45,"findLast"],[76,45,80,53],[76,46,80,55,"route"],[76,51,80,60],[76,55,80,65,"route"],[76,60,80,70],[76,61,80,71,"name"],[76,65,80,75],[76,70,80,80,"action"],[76,76,80,86],[76,77,80,87,"payload"],[76,84,80,94],[76,85,80,95,"name"],[76,89,80,99],[76,93,80,103,"id"],[76,95,80,105],[76,100,80,110,"getId"],[76,105,80,115],[76,108,80,118],[77,18,80,120,"params"],[77,24,80,126],[77,26,80,128,"route"],[77,31,80,133],[77,32,80,134,"params"],[78,16,80,141],[78,17,80,142],[78,18,80,143],[78,19,80,144],[79,14,81,20],[79,15,81,21],[79,21,82,25],[79,25,82,29,"action"],[79,31,82,35],[79,32,82,36,"type"],[79,36,82,40],[79,41,82,45],[79,51,82,55],[79,53,82,57],[80,16,83,24],[80,20,83,30,"currentRoute"],[80,32,83,42],[80,35,83,45,"state"],[80,40,83,50],[80,41,83,51,"routes"],[80,47,83,57],[80,48,83,58,"state"],[80,53,83,63],[80,54,83,64,"index"],[80,59,83,69],[80,60,83,70],[81,16,84,24],[82,16,85,24],[82,20,85,28,"action"],[82,26,85,34],[82,27,85,35,"payload"],[82,34,85,42],[82,35,85,43,"name"],[82,39,85,47],[82,44,85,52,"currentRoute"],[82,56,85,64],[82,57,85,65,"name"],[82,61,85,69],[82,65,85,73],[82,66,85,74,"isPreviewAction"],[82,81,85,89],[82,82,85,90,"action"],[82,88,85,96],[82,89,85,97],[82,91,85,99],[83,18,86,28,"route"],[83,23,86,33],[83,26,86,36,"currentRoute"],[83,38,86,48],[84,16,87,24],[84,17,87,25],[84,23,88,29],[84,27,88,33,"action"],[84,33,88,39],[84,34,88,40,"payload"],[84,41,88,47],[84,42,88,48,"pop"],[84,45,88,51],[84,47,88,53],[85,18,89,28,"route"],[85,23,89,33],[85,26,89,36,"state"],[85,31,89,41],[85,32,89,42,"routes"],[85,38,89,48],[85,39,89,49,"findLast"],[85,47,89,57],[85,48,89,59,"route"],[85,53,89,64],[85,57,89,69,"route"],[85,62,89,74],[85,63,89,75,"name"],[85,67,89,79],[85,72,89,84,"action"],[85,78,89,90],[85,79,89,91,"payload"],[85,86,89,98],[85,87,89,99,"name"],[85,91,89,103],[85,92,89,104],[86,16,90,24],[87,14,91,20],[88,14,92,20],[89,14,93,20],[89,18,93,24,"isPreviewAction"],[89,33,93,39],[89,34,93,40,"action"],[89,40,93,46],[89,41,93,47],[89,45,93,51],[89,46,93,52,"route"],[89,51,93,57],[89,53,93,59],[90,16,94,24,"route"],[90,21,94,29],[90,24,94,32,"state"],[90,29,94,37],[90,30,94,38,"preloadedRoutes"],[90,45,94,53],[90,46,94,54,"find"],[90,50,94,58],[90,51,94,60,"route"],[90,56,94,65],[90,60,94,70,"route"],[90,65,94,75],[90,66,94,76,"name"],[90,70,94,80],[90,75,94,85,"action"],[90,81,94,91],[90,82,94,92,"payload"],[90,89,94,99],[90,90,94,100,"name"],[90,94,94,104],[90,98,94,108,"id"],[90,100,94,110],[90,105,94,115,"route"],[90,110,94,120],[90,111,94,121,"key"],[90,114,94,124],[90,115,94,125],[91,14,95,20],[92,14,96,20],[93,14,97,20],[93,18,97,24],[93,19,97,25,"route"],[93,24,97,30],[93,26,97,32],[94,16,98,24,"route"],[94,21,98,29],[94,24,98,32,"state"],[94,29,98,37],[94,30,98,38,"preloadedRoutes"],[94,45,98,53],[94,46,98,54,"find"],[94,50,98,58],[94,51,98,60,"route"],[94,56,98,65],[94,60,98,70,"route"],[94,65,98,75],[94,66,98,76,"name"],[94,70,98,80],[94,75,98,85,"action"],[94,81,98,91],[94,82,98,92,"payload"],[94,89,98,99],[94,90,98,100,"name"],[94,94,98,104],[94,98,98,108,"id"],[94,100,98,110],[94,105,98,115,"getId"],[94,110,98,120],[94,113,98,123],[95,18,98,125,"params"],[95,24,98,131],[95,26,98,133,"route"],[95,31,98,138],[95,32,98,139,"params"],[96,16,98,146],[96,17,98,147],[96,18,98,148],[96,19,98,149],[97,14,99,20],[98,14,100,20],[98,18,100,24,"params"],[98,24,100,30],[99,14,101,20],[99,18,101,24,"action"],[99,24,101,30],[99,25,101,31,"type"],[99,29,101,35],[99,34,101,40],[99,44,101,50],[99,48,101,54,"action"],[99,54,101,60],[99,55,101,61,"payload"],[99,62,101,68],[99,63,101,69,"merge"],[99,68,101,74],[99,72,101,78,"route"],[99,77,101,83],[99,79,101,85],[100,16,102,24,"params"],[100,22,102,30],[100,25,103,28,"action"],[100,31,103,34],[100,32,103,35,"payload"],[100,39,103,42],[100,40,103,43,"params"],[100,46,103,49],[100,51,103,54,"undefined"],[100,60,103,63],[100,64,104,32,"routeParamList"],[100,78,104,46],[100,79,104,47,"action"],[100,85,104,53],[100,86,104,54,"payload"],[100,93,104,61],[100,94,104,62,"name"],[100,98,104,66],[100,99,104,67],[100,104,104,72,"undefined"],[100,113,104,81],[100,116,105,34],[101,18,106,36],[101,21,106,39,"routeParamList"],[101,35,106,53],[101,36,106,54,"action"],[101,42,106,60],[101,43,106,61,"payload"],[101,50,106,68],[101,51,106,69,"name"],[101,55,106,73],[101,56,106,74],[102,18,107,36],[102,21,107,39,"route"],[102,26,107,44],[102,27,107,45,"params"],[102,33,107,51],[103,18,108,36],[103,21,108,39,"action"],[103,27,108,45],[103,28,108,46,"payload"],[103,35,108,53],[103,36,108,54,"params"],[104,16,109,32],[104,17,109,33],[104,20,110,34,"route"],[104,25,110,39],[104,26,110,40,"params"],[104,32,110,46],[105,14,111,20],[105,15,111,21],[105,21,112,25],[106,16,113,24,"params"],[106,22,113,30],[106,25,114,28,"routeParamList"],[106,39,114,42],[106,40,114,43,"action"],[106,46,114,49],[106,47,114,50,"payload"],[106,54,114,57],[106,55,114,58,"name"],[106,59,114,62],[106,60,114,63],[106,65,114,68,"undefined"],[106,74,114,77],[106,77,115,34],[107,18,116,36],[107,21,116,39,"routeParamList"],[107,35,116,53],[107,36,116,54,"action"],[107,42,116,60],[107,43,116,61,"payload"],[107,50,116,68],[107,51,116,69,"name"],[107,55,116,73],[107,56,116,74],[108,18,117,36],[108,21,117,39,"action"],[108,27,117,45],[108,28,117,46,"payload"],[108,35,117,53],[108,36,117,54,"params"],[109,16,118,32],[109,17,118,33],[109,20,119,34,"action"],[109,26,119,40],[109,27,119,41,"payload"],[109,34,119,48],[109,35,119,49,"params"],[109,41,119,55],[110,14,120,20],[111,14,121,20],[111,18,121,24,"routes"],[111,24,121,30],[112,14,122,20],[112,18,122,24,"route"],[112,23,122,29],[112,25,122,31],[113,16,123,24],[113,20,123,28,"action"],[113,26,123,34],[113,27,123,35,"type"],[113,31,123,39],[113,36,123,44],[113,46,123,54],[113,50,123,58,"action"],[113,56,123,64],[113,57,123,65,"payload"],[113,64,123,72],[113,65,123,73,"pop"],[113,68,123,76],[113,70,123,78],[114,18,124,28,"routes"],[114,24,124,34],[114,27,124,37],[114,29,124,39],[115,18,125,28],[116,18,126,28],[116,23,126,33],[116,27,126,39,"r"],[116,28,126,40],[116,32,126,44,"state"],[116,37,126,49],[116,38,126,50,"routes"],[116,44,126,56],[116,46,126,58],[117,20,127,32],[117,24,127,36,"r"],[117,25,127,37],[117,26,127,38,"key"],[117,29,127,41],[117,34,127,46,"route"],[117,39,127,51],[117,40,127,52,"key"],[117,43,127,55],[117,45,127,57],[118,22,128,36,"routes"],[118,28,128,42],[118,29,128,43,"push"],[118,33,128,47],[118,34,128,48],[119,24,129,40],[119,27,129,43,"route"],[119,32,129,48],[120,24,130,40,"path"],[120,28,130,44],[120,30,130,46,"action"],[120,36,130,52],[120,37,130,53,"payload"],[120,44,130,60],[120,45,130,61,"path"],[120,49,130,65],[120,54,130,70,"undefined"],[120,63,130,79],[120,66,130,82,"action"],[120,72,130,88],[120,73,130,89,"payload"],[120,80,130,96],[120,81,130,97,"path"],[120,85,130,101],[120,88,130,104,"route"],[120,93,130,109],[120,94,130,110,"path"],[120,98,130,114],[121,24,131,40,"params"],[122,22,132,36],[122,23,132,37],[122,24,132,38],[123,22,133,36],[124,20,134,32],[125,20,135,32,"routes"],[125,26,135,38],[125,27,135,39,"push"],[125,31,135,43],[125,32,135,44,"r"],[125,33,135,45],[125,34,135,46],[126,18,136,28],[127,16,137,24],[127,17,137,25],[127,23,138,29],[128,18,139,28],[129,18,140,28],[130,18,141,28],[131,18,142,28],[131,22,142,32,"id"],[131,24,142,34],[131,29,142,39,"undefined"],[131,38,142,48],[131,40,142,50],[132,20,143,32,"routes"],[132,26,143,38],[132,29,143,41,"state"],[132,34,143,46],[132,35,143,47,"routes"],[132,41,143,53],[132,42,143,54,"filter"],[132,48,143,60],[132,49,143,62,"r"],[132,50,143,63],[132,54,143,68,"r"],[132,55,143,69],[132,56,143,70,"key"],[132,59,143,73],[132,64,143,78,"route"],[132,69,143,83],[132,70,143,84,"key"],[132,73,143,87],[132,74,143,88],[133,18,144,28],[133,19,144,29],[133,25,145,33],[133,29,145,37,"action"],[133,35,145,43],[133,36,145,44,"type"],[133,40,145,48],[133,45,145,53],[133,55,145,63],[133,59,145,67,"state"],[133,64,145,72],[133,65,145,73,"routes"],[133,71,145,79],[133,72,145,80,"length"],[133,78,145,86],[133,81,145,89],[133,82,145,90],[133,84,145,92],[134,20,146,32],[135,20,147,32],[135,24,147,38,"lastRoute"],[135,33,147,47],[135,36,147,50,"state"],[135,41,147,55],[135,42,147,56,"routes"],[135,48,147,62],[135,49,147,63,"state"],[135,54,147,68],[135,55,147,69,"routes"],[135,61,147,75],[135,62,147,76,"length"],[135,68,147,82],[135,71,147,85],[135,72,147,86],[135,73,147,87],[136,20,148,32],[136,24,148,36],[136,25,148,37],[136,26,148,38],[136,28,148,40,"useScreens_1"],[136,40,148,52],[136,41,148,53,"getSingularId"],[136,54,148,66],[136,56,148,68,"lastRoute"],[136,65,148,77],[136,66,148,78,"name"],[136,70,148,82],[136,72,148,84],[137,22,148,86,"params"],[137,28,148,92],[137,30,148,94,"lastRoute"],[137,39,148,103],[137,40,148,104,"params"],[138,20,148,111],[138,21,148,112],[138,22,148,113],[138,27,149,36],[138,28,149,37],[138,29,149,38],[138,31,149,40,"useScreens_1"],[138,43,149,52],[138,44,149,53,"getSingularId"],[138,57,149,66],[138,59,149,68,"route"],[138,64,149,73],[138,65,149,74,"name"],[138,69,149,78],[138,71,149,80],[139,22,149,82,"params"],[140,20,149,89],[140,21,149,90],[140,22,149,91],[140,24,149,93],[141,22,150,36,"routes"],[141,28,150,42],[141,31,150,45,"state"],[141,36,150,50],[141,37,150,51,"routes"],[141,43,150,57],[141,44,150,58,"slice"],[141,49,150,63],[141,50,150,64],[141,51,150,65],[141,55,150,69],[141,56,150,70],[142,20,151,32],[142,21,151,33],[142,27,152,37],[143,22,153,36,"routes"],[143,28,153,42],[143,31,153,45],[143,32,153,46],[143,35,153,49,"state"],[143,40,153,54],[143,41,153,55,"routes"],[143,47,153,61],[143,48,153,62],[144,20,154,32],[145,18,155,28],[145,19,155,29],[145,25,156,33],[146,20,157,32,"routes"],[146,26,157,38],[146,29,157,41],[146,30,157,42],[146,33,157,45,"state"],[146,38,157,50],[146,39,157,51,"routes"],[146,45,157,57],[146,46,157,58],[147,18,158,28],[148,18,159,28],[149,18,160,28],[150,18,161,28],[150,22,161,34,"key"],[150,25,161,37],[150,28,161,40,"routes"],[150,34,161,46],[150,35,161,47,"length"],[150,41,161,53],[150,46,161,58,"state"],[150,51,161,63],[150,52,161,64,"routes"],[150,58,161,70],[150,59,161,71,"length"],[150,65,161,77],[150,69,161,81],[150,70,161,82,"isPreviewAction"],[150,85,161,97],[150,86,161,98,"action"],[150,92,161,104],[150,93,161,105],[150,96,162,34],[150,99,162,37,"action"],[150,105,162,43],[150,106,162,44,"payload"],[150,113,162,51],[150,114,162,52,"name"],[150,118,162,56],[150,122,162,60],[150,123,162,61],[150,124,162,62],[150,126,162,64,"non_secure_1"],[150,138,162,76],[150,139,162,77,"nanoid"],[150,145,162,83],[150,147,162,85],[150,148,162,86],[150,150,162,88],[150,153,163,34,"route"],[150,158,163,39],[150,159,163,40,"key"],[150,162,163,43],[151,18,164,28,"routes"],[151,24,164,34],[151,25,164,35,"push"],[151,29,164,39],[151,30,164,40],[152,20,165,32],[152,23,165,35,"route"],[152,28,165,40],[153,20,166,32,"key"],[153,23,166,35],[154,20,167,32,"path"],[154,24,167,36],[154,26,167,38,"action"],[154,32,167,44],[154,33,167,45,"type"],[154,37,167,49],[154,42,167,54],[154,52,167,64],[154,56,167,68,"action"],[154,62,167,74],[154,63,167,75,"payload"],[154,70,167,82],[154,71,167,83,"path"],[154,75,167,87],[154,80,167,92,"undefined"],[154,89,167,101],[154,92,168,38,"action"],[154,98,168,44],[154,99,168,45,"payload"],[154,106,168,52],[154,107,168,53,"path"],[154,111,168,57],[154,114,169,38,"route"],[154,119,169,43],[154,120,169,44,"path"],[154,124,169,48],[155,20,170,32,"params"],[156,18,171,28],[156,19,171,29],[156,20,171,30],[157,18,172,28],[158,18,173,28],[159,18,174,28],[160,18,175,28],[161,18,176,28],[162,18,177,28],[163,18,178,28],[164,18,179,28],[165,18,180,28],[166,18,181,28],[167,16,182,24],[168,14,183,20],[168,15,183,21],[168,21,184,25],[169,16,185,24,"routes"],[169,22,185,30],[169,25,185,33],[169,26,186,28],[169,29,186,31,"state"],[169,34,186,36],[169,35,186,37,"routes"],[169,41,186,43],[169,43,187,28],[170,18,188,32,"key"],[170,21,188,35],[170,23,188,37],[170,26,188,40,"action"],[170,32,188,46],[170,33,188,47,"payload"],[170,40,188,54],[170,41,188,55,"name"],[170,45,188,59],[170,49,188,63],[170,50,188,64],[170,51,188,65],[170,53,188,67,"non_secure_1"],[170,65,188,79],[170,66,188,80,"nanoid"],[170,72,188,86],[170,74,188,88],[170,75,188,89],[170,77,188,91],[171,18,189,32,"name"],[171,22,189,36],[171,24,189,38,"action"],[171,30,189,44],[171,31,189,45,"payload"],[171,38,189,52],[171,39,189,53,"name"],[171,43,189,57],[172,18,190,32,"path"],[172,22,190,36],[172,24,190,38,"action"],[172,30,190,44],[172,31,190,45,"type"],[172,35,190,49],[172,40,190,54],[172,50,190,64],[172,53,190,67,"action"],[172,59,190,73],[172,60,190,74,"payload"],[172,67,190,81],[172,68,190,82,"path"],[172,72,190,86],[172,75,190,89,"undefined"],[172,84,190,98],[173,18,191,32,"params"],[174,16,192,28],[174,17,192,29],[174,18,193,25],[175,14,194,20],[176,14,195,20],[177,14,196,20],[178,14,197,20],[178,18,197,26,"result"],[178,24,197,32],[178,27,197,35],[179,16,198,24],[179,19,198,27,"state"],[179,24,198,32],[180,16,199,24,"index"],[180,21,199,29],[180,23,199,31,"routes"],[180,29,199,37],[180,30,199,38,"length"],[180,36,199,44],[180,39,199,47],[180,40,199,48],[181,16,200,24,"preloadedRoutes"],[181,31,200,39],[181,33,200,41,"state"],[181,38,200,46],[181,39,200,47,"preloadedRoutes"],[181,54,200,62],[181,55,200,63,"filter"],[181,61,200,69],[181,62,200,71,"route"],[181,67,200,76],[181,71,200,81,"routes"],[181,77,200,87],[181,78,200,88,"routes"],[181,84,200,94],[181,85,200,95,"length"],[181,91,200,101],[181,94,200,104],[181,95,200,105],[181,96,200,106],[181,97,200,107,"key"],[181,100,200,110],[181,105,200,115,"route"],[181,110,200,120],[181,111,200,121,"key"],[181,114,200,124],[181,115,200,125],[182,16,201,24,"routes"],[183,14,202,20],[183,15,202,21],[184,14,203,20],[184,18,203,24,"actionSingularOptions"],[184,39,203,45],[184,41,203,47],[185,16,204,24],[185,23,204,31,"filterSingular"],[185,37,204,45],[185,38,204,46,"result"],[185,44,204,52],[185,46,204,54,"getId"],[185,51,204,59],[185,52,204,60],[186,14,205,20],[187,14,206,20],[187,21,206,27,"result"],[187,27,206,33],[188,14,207,20],[189,14,208,20],[190,14,209,20],[191,14,210,20],[192,14,211,20],[193,14,212,20],[194,14,213,20],[195,14,214,20],[196,14,215,20],[197,12,216,16],[198,10,217,16],[198,15,217,21],[198,24,217,30],[199,12,217,32],[200,14,218,20],[201,14,219,20],[202,14,220,20],[202,18,220,24],[202,19,220,25,"state"],[202,24,220,30],[202,25,220,31,"routeNames"],[202,35,220,41],[202,36,220,42,"includes"],[202,44,220,50],[202,45,220,51,"action"],[202,51,220,57],[202,52,220,58,"payload"],[202,59,220,65],[202,60,220,66,"name"],[202,64,220,70],[202,65,220,71],[202,67,220,73],[203,16,221,24],[203,23,221,31],[203,27,221,35],[204,14,222,20],[205,14,223,20],[206,14,224,20],[206,18,224,26,"getId"],[206,24,224,31],[206,27,224,34,"options"],[206,34,224,41],[206,35,224,42,"routeGetIdList"],[206,49,224,56],[206,50,224,57,"action"],[206,56,224,63],[206,57,224,64,"payload"],[206,64,224,71],[206,65,224,72,"name"],[206,69,224,76],[206,70,224,77],[207,14,225,20],[207,18,225,26,"id"],[207,21,225,28],[207,24,225,31,"getId"],[207,30,225,36],[207,33,225,39],[208,16,225,41,"params"],[208,22,225,47],[208,24,225,49,"action"],[208,30,225,55],[208,31,225,56,"payload"],[208,38,225,63],[208,39,225,64,"params"],[209,14,225,71],[209,15,225,72],[209,16,225,73],[210,14,226,20],[210,18,226,24,"route"],[210,24,226,29],[211,14,227,20],[211,18,227,24,"id"],[211,21,227,26],[211,26,227,31,"undefined"],[211,35,227,40],[211,37,227,42],[212,16,228,24,"route"],[212,22,228,29],[212,25,228,32,"state"],[212,30,228,37],[212,31,228,38,"routes"],[212,37,228,44],[212,38,228,45,"find"],[212,42,228,49],[212,43,228,51,"route"],[212,48,228,56],[212,52,228,61,"route"],[212,57,228,66],[212,58,228,67,"name"],[212,62,228,71],[212,67,228,76,"action"],[212,73,228,82],[212,74,228,83,"payload"],[212,81,228,90],[212,82,228,91,"name"],[212,86,228,95],[212,90,228,99,"id"],[212,93,228,101],[212,98,228,106,"getId"],[212,104,228,111],[212,107,228,114],[213,18,228,116,"params"],[213,24,228,122],[213,26,228,124,"route"],[213,31,228,129],[213,32,228,130,"params"],[214,16,228,137],[214,17,228,138],[214,18,228,139],[214,19,228,140],[215,14,229,20],[216,14,230,20],[216,18,230,24,"route"],[216,24,230,29],[216,26,230,31],[217,16,231,24],[217,23,231,31],[218,18,232,28],[218,21,232,31,"state"],[218,26,232,36],[219,18,233,28,"routes"],[219,24,233,34],[219,26,233,36,"state"],[219,31,233,41],[219,32,233,42,"routes"],[219,38,233,48],[219,39,233,49,"map"],[219,42,233,52],[219,43,233,54,"r"],[219,44,233,55],[219,48,233,60],[220,20,234,32],[220,24,234,36,"r"],[220,25,234,37],[220,26,234,38,"key"],[220,29,234,41],[220,34,234,46,"route"],[220,40,234,51],[220,42,234,53,"key"],[220,45,234,56],[220,47,234,58],[221,22,235,36],[221,29,235,43,"r"],[221,30,235,44],[222,20,236,32],[223,20,237,32],[223,27,237,39],[224,22,238,36],[224,25,238,39,"r"],[224,26,238,40],[225,22,239,36,"params"],[225,28,239,42],[225,30,239,44,"routeParamList"],[225,44,239,58],[225,45,239,59,"action"],[225,51,239,65],[225,52,239,66,"payload"],[225,59,239,73],[225,60,239,74,"name"],[225,64,239,78],[225,65,239,79],[225,70,239,84,"undefined"],[225,79,239,93],[225,82,240,42],[226,24,241,44],[226,27,241,47,"routeParamList"],[226,41,241,61],[226,42,241,62,"action"],[226,48,241,68],[226,49,241,69,"payload"],[226,56,241,76],[226,57,241,77,"name"],[226,61,241,81],[226,62,241,82],[227,24,242,44],[227,27,242,47,"action"],[227,33,242,53],[227,34,242,54,"payload"],[227,41,242,61],[227,42,242,62,"params"],[228,22,243,40],[228,23,243,41],[228,26,244,42,"action"],[228,32,244,48],[228,33,244,49,"payload"],[228,40,244,56],[228,41,244,57,"params"],[229,20,245,32],[229,21,245,33],[230,18,246,28],[230,19,246,29],[231,16,247,24],[231,17,247,25],[232,14,248,20],[232,15,248,21],[232,21,249,25],[233,16,250,24],[234,16,251,24],[234,20,251,30,"currentPreloadedRoute"],[234,41,251,51],[234,44,251,54],[235,18,252,28,"key"],[235,21,252,31],[235,23,252,33],[235,26,252,36,"action"],[235,32,252,42],[235,33,252,43,"payload"],[235,40,252,50],[235,41,252,51,"name"],[235,45,252,55],[235,49,252,59],[235,50,252,60],[235,51,252,61],[235,53,252,63,"non_secure_1"],[235,65,252,75],[235,66,252,76,"nanoid"],[235,72,252,82],[235,74,252,84],[235,75,252,85],[235,77,252,87],[236,18,253,28,"name"],[236,22,253,32],[236,24,253,34,"action"],[236,30,253,40],[236,31,253,41,"payload"],[236,38,253,48],[236,39,253,49,"name"],[236,43,253,53],[237,18,254,28,"params"],[237,24,254,34],[237,26,254,36,"routeParamList"],[237,40,254,50],[237,41,254,51,"action"],[237,47,254,57],[237,48,254,58,"payload"],[237,55,254,65],[237,56,254,66,"name"],[237,60,254,70],[237,61,254,71],[237,66,254,76,"undefined"],[237,75,254,85],[237,78,255,34],[238,20,256,36],[238,23,256,39,"routeParamList"],[238,37,256,53],[238,38,256,54,"action"],[238,44,256,60],[238,45,256,61,"payload"],[238,52,256,68],[238,53,256,69,"name"],[238,57,256,73],[238,58,256,74],[239,20,257,36],[239,23,257,39,"action"],[239,29,257,45],[239,30,257,46,"payload"],[239,37,257,53],[239,38,257,54,"params"],[240,18,258,32],[240,19,258,33],[240,22,259,34,"action"],[240,28,259,40],[240,29,259,41,"payload"],[240,36,259,48],[240,37,259,49,"params"],[241,16,260,24],[241,17,260,25],[242,16,261,24],[243,16,262,24],[243,23,262,31],[244,18,263,28],[244,21,263,31,"state"],[244,26,263,36],[245,18,264,28],[246,18,265,28],[247,18,266,28],[248,18,267,28],[249,18,268,28],[250,18,269,28],[251,18,270,28,"preloadedRoutes"],[251,33,270,43],[251,35,270,45],[251,36,270,46,"currentPreloadedRoute"],[251,57,270,67],[251,58,270,68],[251,59,270,69,"concat"],[251,65,270,75],[251,66,270,76,"state"],[251,71,270,81],[251,72,270,82,"preloadedRoutes"],[251,87,270,97],[251,88,270,98,"filter"],[251,94,270,104],[251,95,270,106,"r"],[251,96,270,107],[251,100,270,112,"r"],[251,101,270,113],[251,102,270,114,"name"],[251,106,270,118],[251,111,270,123,"action"],[251,117,270,129],[251,118,270,130,"payload"],[251,125,270,137],[251,126,270,138,"name"],[251,130,270,142],[251,134,270,146,"id"],[251,137,270,148],[251,142,270,153,"getId"],[251,148,270,158],[251,151,270,161],[252,20,270,163,"params"],[252,26,270,169],[252,28,270,171,"r"],[252,29,270,172],[252,30,270,173,"params"],[253,18,270,180],[253,19,270,181],[253,20,270,182],[253,21,270,183],[254,18,271,28],[255,18,272,28],[256,18,273,28],[257,18,274,28],[258,18,275,28],[259,18,276,28],[260,18,277,28],[261,18,278,28],[262,18,279,28],[263,18,280,28],[264,18,281,28],[265,18,282,28],[266,18,283,28],[267,18,284,28],[268,18,285,28],[269,18,286,28],[270,18,287,28],[271,18,288,28],[272,16,289,24],[272,17,289,25],[273,14,290,20],[274,12,291,16],[275,10,292,16],[276,12,292,25],[277,14,293,20],[277,21,293,27,"original"],[277,29,293,35],[277,30,293,36,"getStateForAction"],[277,47,293,53],[277,48,293,54,"state"],[277,53,293,59],[277,55,293,61,"action"],[277,61,293,67],[277,63,293,69,"options"],[277,70,293,76],[277,71,293,77],[278,12,294,16],[279,8,295,12],[280,6,296,8],[281,4,297,4],[281,5,297,5],[282,2,298,0],[282,3,298,1],[283,2,299,0,"exports"],[283,9,299,7],[283,10,299,8,"stackRouterOverride"],[283,29,299,27],[283,32,299,30,"stackRouterOverride"],[283,51,299,49],[284,2,300,0],[284,11,300,9,"getActionSingularIdFn"],[284,32,300,30,"getActionSingularIdFn"],[284,33,300,31,"actionGetId"],[284,44,300,42],[284,46,300,44,"name"],[284,50,300,48],[284,52,300,50],[285,4,301,4],[285,8,301,8],[285,15,301,15,"actionGetId"],[285,26,301,26],[285,31,301,31],[285,41,301,41],[285,43,301,43],[286,6,302,8],[286,13,302,16,"options"],[286,20,302,23],[286,24,302,28,"actionGetId"],[286,35,302,39],[286,36,302,40,"name"],[286,40,302,44],[286,42,302,46,"options"],[286,49,302,53],[286,50,302,54,"params"],[286,56,302,60],[286,60,302,64],[286,61,302,65],[286,62,302,66],[286,63,302,67],[287,4,303,4],[287,5,303,5],[287,11,304,9],[287,15,304,13,"actionGetId"],[287,26,304,24],[287,31,304,29],[287,35,304,33],[287,37,304,35],[288,6,305,8],[288,13,305,16,"options"],[288,20,305,23],[288,24,305,28],[288,25,305,29],[288,26,305,30],[288,28,305,32,"useScreens_1"],[288,40,305,44],[288,41,305,45,"getSingularId"],[288,54,305,58],[288,56,305,60,"name"],[288,60,305,64],[288,62,305,66,"options"],[288,69,305,73],[288,70,305,74],[289,4,306,4],[290,4,307,4],[290,11,307,11,"undefined"],[290,20,307,20],[291,2,308,0],[292,2,309,0],[293,0,310,0],[294,0,311,0],[295,0,312,0],[296,2,313,0],[296,11,313,9,"filterSingular"],[296,25,313,23,"filterSingular"],[296,26,313,24,"state"],[296,31,313,29],[296,33,313,31,"getId"],[296,38,313,36],[296,40,313,38],[297,4,314,4],[297,8,314,8],[297,9,314,9,"state"],[297,14,314,14],[297,16,314,16],[298,6,315,8],[298,13,315,15,"state"],[298,18,315,20],[299,4,316,4],[300,4,317,4],[300,8,317,8],[300,9,317,9,"state"],[300,14,317,14],[300,15,317,15,"routes"],[300,21,317,21],[300,23,317,23],[301,6,318,8],[301,13,318,15,"state"],[301,18,318,20],[302,4,319,4],[303,4,320,4],[303,8,320,10,"currentIndex"],[303,20,320,22],[303,23,320,25,"state"],[303,28,320,30],[303,29,320,31,"index"],[303,34,320,36],[303,38,320,40,"state"],[303,43,320,45],[303,44,320,46,"routes"],[303,50,320,52],[303,51,320,53,"length"],[303,57,320,59],[303,60,320,62],[303,61,320,63],[304,4,321,4],[304,8,321,10,"current"],[304,15,321,17],[304,18,321,20,"state"],[304,23,321,25],[304,24,321,26,"routes"],[304,30,321,32],[304,31,321,33,"currentIndex"],[304,43,321,45],[304,44,321,46],[305,4,322,4],[305,8,322,10,"name"],[305,12,322,14],[305,15,322,17,"current"],[305,22,322,24],[305,23,322,25,"name"],[305,27,322,29],[306,4,323,4],[306,8,323,10,"id"],[306,10,323,12],[306,13,323,15,"getId"],[306,18,323,20],[306,21,323,23],[307,6,323,25,"params"],[307,12,323,31],[307,14,323,33,"current"],[307,21,323,40],[307,22,323,41,"params"],[308,4,323,48],[308,5,323,49],[308,6,323,50],[309,4,324,4],[309,8,324,8],[309,9,324,9,"id"],[309,11,324,11],[309,13,324,13],[310,6,325,8],[310,13,325,15,"state"],[310,18,325,20],[311,4,326,4],[312,4,327,4],[313,4,328,4],[313,8,328,8,"routes"],[313,14,328,14],[313,17,328,17,"state"],[313,22,328,22],[313,23,328,23,"routes"],[313,29,328,29],[314,4,329,4,"routes"],[314,10,329,10],[314,13,329,13,"routes"],[314,19,329,19],[314,20,329,20,"filter"],[314,26,329,26],[314,27,329,27],[314,28,329,28,"route"],[314,33,329,33],[314,35,329,35,"index"],[314,40,329,40],[314,45,329,45],[315,6,330,8],[316,6,331,8],[316,10,331,12,"index"],[316,15,331,17],[316,20,331,22,"currentIndex"],[316,32,331,34],[316,34,331,36],[317,8,332,12],[317,15,332,19],[317,19,332,23],[318,6,333,8],[319,6,334,8],[320,6,335,8],[320,13,335,15,"name"],[320,17,335,19],[320,22,335,24,"route"],[320,27,335,29],[320,28,335,30,"name"],[320,32,335,34],[320,36,335,38,"id"],[320,38,335,40],[320,43,335,45,"getId"],[320,48,335,50],[320,51,335,53],[321,8,335,55,"params"],[321,14,335,61],[321,16,335,63,"route"],[321,21,335,68],[321,22,335,69,"params"],[322,6,335,76],[322,7,335,77],[322,8,335,78],[323,4,336,4],[323,5,336,5],[323,6,336,6],[324,4,337,4],[324,11,337,11],[325,6,338,8],[325,9,338,11,"state"],[325,14,338,16],[326,6,339,8,"index"],[326,11,339,13],[326,13,339,15,"routes"],[326,19,339,21],[326,20,339,22,"length"],[326,26,339,28],[326,29,339,31],[326,30,339,32],[327,6,340,8,"routes"],[328,4,341,4],[328,5,341,5],[329,2,342,0],[330,2,343,0],[330,6,343,6,"Stack"],[330,11,343,11],[330,14,343,14,"Object"],[330,20,343,20],[330,21,343,21,"assign"],[330,27,343,27],[330,28,343,29,"props"],[330,33,343,34],[330,37,343,39],[331,4,344,4],[331,8,344,4,"_ref"],[331,12,344,4],[331,15,344,41],[331,16,344,42],[331,17,344,43],[331,19,344,45,"LinkPreviewContext_1"],[331,39,344,65],[331,40,344,66,"useLinkPreviewContext"],[331,61,344,87],[331,63,344,89],[331,64,344,90],[332,6,344,12,"isStackAnimationDisabled"],[332,30,344,36],[332,33,344,36,"_ref"],[332,37,344,36],[332,38,344,12,"isStackAnimationDisabled"],[332,62,344,36],[333,4,345,4],[333,8,345,10,"screenOptions"],[333,21,345,23],[333,24,345,26],[333,25,345,27],[333,26,345,28],[333,28,345,30,"react_1"],[333,35,345,37],[333,36,345,38,"useMemo"],[333,43,345,45],[333,45,345,47],[333,51,345,53],[334,6,346,8],[334,10,346,14,"condition"],[334,19,346,23],[334,22,346,26,"isStackAnimationDisabled"],[334,46,346,50],[334,49,346,53],[334,55,346,59],[334,59,346,63],[334,62,346,66,"shouldDisableAnimationBasedOnParams"],[334,97,346,101],[335,6,347,8],[335,13,347,15,"disableAnimationInScreenOptions"],[335,44,347,46],[335,45,347,47,"props"],[335,50,347,52],[335,51,347,53,"screenOptions"],[335,64,347,66],[335,66,347,68,"condition"],[335,75,347,77],[335,76,347,78],[336,4,348,4],[336,5,348,5],[336,7,348,7],[336,8,348,8,"props"],[336,13,348,13],[336,14,348,14,"screenOptions"],[336,27,348,27],[336,29,348,29,"isStackAnimationDisabled"],[336,53,348,53],[336,54,348,54],[336,55,348,55],[337,4,349,4],[337,24,349,12,"_reactJsxRuntime"],[337,40,349,12],[337,41,349,12,"jsx"],[337,44,349,12],[337,45,349,13,"RNStack"],[337,52,349,20],[338,6,349,20],[338,9,349,25,"props"],[338,14,349,30],[339,6,349,32,"screenOptions"],[339,19,349,45],[339,21,349,47,"screenOptions"],[339,34,349,61],[340,6,349,62,"UNSTABLE_router"],[340,21,349,77],[340,23,349,79,"exports"],[340,30,349,86],[340,31,349,87,"stackRouterOverride"],[341,4,349,107],[341,5,349,108],[341,6,349,109],[342,2,350,0],[342,3,350,1],[342,5,350,3],[343,4,351,4,"Screen"],[343,10,351,10],[343,12,351,12,"RNStack"],[343,19,351,19],[343,20,351,20,"Screen"],[343,26,351,26],[344,4,352,4,"Protected"],[344,13,352,13],[344,15,352,15,"Protected_1"],[344,26,352,26],[344,27,352,27,"Protected"],[345,2,353,0],[345,3,353,1],[345,4,353,2],[346,2,354,0],[346,11,354,9,"disableAnimationInScreenOptions"],[346,42,354,40,"disableAnimationInScreenOptions"],[346,43,354,41,"options"],[346,50,354,48],[346,52,354,50,"condition"],[346,61,354,59],[346,63,354,61],[347,4,355,4],[347,8,355,8,"options"],[347,15,355,15],[347,19,355,19],[347,26,355,26,"options"],[347,33,355,33],[347,38,355,38],[347,48,355,48],[347,50,355,50],[348,6,356,8],[348,13,356,16,"props"],[348,18,356,21],[348,22,356,26],[349,8,357,12],[349,12,357,18,"oldOptions"],[349,22,357,28],[349,25,357,31,"options"],[349,32,357,38],[349,33,357,39,"props"],[349,38,357,44],[349,39,357,45],[350,8,358,12],[350,12,358,16,"condition"],[350,21,358,25],[350,22,358,26,"props"],[350,27,358,31],[350,28,358,32,"route"],[350,33,358,37],[350,34,358,38],[350,36,358,40],[351,10,359,16],[351,17,359,23],[352,12,360,20],[352,15,360,23,"oldOptions"],[352,25,360,33],[353,12,361,20,"animation"],[353,21,361,29],[353,23,361,31],[354,10,362,16],[354,11,362,17],[355,8,363,12],[356,8,364,12],[356,15,364,19,"oldOptions"],[356,25,364,29],[356,29,364,33],[356,30,364,34],[356,31,364,35],[357,6,365,8],[357,7,365,9],[358,4,366,4],[359,4,367,4],[359,11,367,12,"props"],[359,16,367,17],[359,20,367,22],[360,6,368,8],[360,10,368,12,"condition"],[360,19,368,21],[360,20,368,22,"props"],[360,25,368,27],[360,26,368,28,"route"],[360,31,368,33],[360,32,368,34],[360,34,368,36],[361,8,369,12],[361,15,369,19],[362,10,370,16],[362,14,370,20,"options"],[362,21,370,27],[362,25,370,31],[362,26,370,32],[362,27,370,33],[362,28,370,34],[363,10,371,16,"animation"],[363,19,371,25],[363,21,371,27],[364,8,372,12],[364,9,372,13],[365,6,373,8],[366,6,374,8],[366,13,374,15,"options"],[366,20,374,22],[366,24,374,26],[366,25,374,27],[366,26,374,28],[367,4,375,4],[367,5,375,5],[368,2,376,0],[369,2,377,0],[369,11,377,9,"shouldDisableAnimationBasedOnParams"],[369,46,377,44,"shouldDisableAnimationBasedOnParams"],[369,47,377,45,"route"],[369,52,377,50],[369,54,377,52],[370,4,378,4],[370,8,378,10,"expoParams"],[370,18,378,20],[370,21,378,23],[370,22,378,24],[370,23,378,25],[370,25,378,27,"navigationParams_1"],[370,43,378,45],[370,44,378,46,"getInternalExpoRouterParams"],[370,71,378,73],[370,73,378,75,"route"],[370,78,378,80],[370,79,378,81,"params"],[370,85,378,87],[370,86,378,88],[371,4,379,4],[371,11,379,11],[371,12,379,12],[371,13,379,13,"expoParams"],[371,23,379,23],[371,24,379,24,"__internal_expo_router_no_animation"],[371,59,379,59],[372,2,380,0],[373,2,381,0,"exports"],[373,9,381,7],[373,10,381,8,"default"],[373,17,381,15],[373,20,381,18,"Stack"],[373,25,381,23],[374,2,382,0],[374,6,382,6,"StackRouter"],[374,17,382,17],[374,20,382,21,"options"],[374,27,382,28],[374,31,382,33],[375,4,383,4],[375,8,383,10,"router"],[375,14,383,16],[375,17,383,19],[375,18,383,20],[375,19,383,21],[375,21,383,23,"native_1"],[375,29,383,31],[375,30,383,32,"StackRouter"],[375,41,383,43],[375,43,383,45,"options"],[375,50,383,52],[375,51,383,53],[376,4,384,4],[376,11,384,11],[377,6,385,8],[377,9,385,11,"router"],[377,15,385,17],[378,6,386,8],[378,9,386,11],[378,10,386,12],[378,11,386,13],[378,13,386,15,"exports"],[378,20,386,22],[378,21,386,23,"stackRouterOverride"],[378,40,386,42],[378,42,386,44,"router"],[378,48,386,50],[379,4,387,4],[379,5,387,5],[380,2,388,0],[380,3,388,1],[381,2,389,0,"exports"],[381,9,389,7],[381,10,389,8,"StackRouter"],[381,21,389,19],[381,24,389,22,"StackRouter"],[381,35,389,33],[382,0,389,34],[382,3]],"functionMap":{"names":["<global>","isStackAction","isPreviewAction","stackRouterOverride","getStateForAction","getIdFunction","state.routes.findLast$argument_0","state.preloadedRoutes.find$argument_0","state.routes.filter$argument_0","state.preloadedRoutes.filter$argument_0","state.routes.find$argument_0","state.routes.map$argument_0","getActionSingularIdFn","<anonymous>","filterSingular","routes.filter$argument_0","Object.assign$argument_0","disableAnimationInScreenOptions","shouldDisableAnimationBasedOnParams","StackRouter"],"mappings":"AAA;ACe;CDO;wBEC;+IFG;4BGU;2BCE;YCY;aDc;sDEe,yFF;0DES,6CF;2DGK,iEH;2DGI,yFH;6DI6C,0BJ;sEKyD,sDL;kDM4B,yFN;qDOK;6BPa;yGKwB,6EL;SD0B;CHE;AYE;eCE,oDD;eCG,2DD;CZG;AcK;2BCgB;KDO;CdM;4BgBC;+CHE;KGG;ChBE;AiBI;eJE;SIS;WJE;KIQ;CjBC;AkBC;ClBG;oBmBE;CnBM"},"hasCjsExports":true},"type":"js/module"}]}