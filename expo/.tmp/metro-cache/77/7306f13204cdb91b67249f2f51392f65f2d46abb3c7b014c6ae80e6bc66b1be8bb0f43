{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // lheading (---, ===)\n\n  'use strict';\n\n  module.exports = function lheading(state, startLine, endLine /*, silent*/) {\n    var content,\n      terminate,\n      i,\n      l,\n      token,\n      pos,\n      max,\n      level,\n      marker,\n      nextLine = startLine + 1,\n      oldParentType,\n      terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) {\n      return false;\n    }\n    oldParentType = state.parentType;\n    state.parentType = 'paragraph'; // use paragraph to match terminatorRules\n\n    // jump line-by-line until empty one or EOF\n    for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n      // this would be a code block normally, but after paragraph\n      // it's considered a lazy continuation regardless of what's there\n      if (state.sCount[nextLine] - state.blkIndent > 3) {\n        continue;\n      }\n\n      //\n      // Check for underline in setext header\n      //\n      if (state.sCount[nextLine] >= state.blkIndent) {\n        pos = state.bMarks[nextLine] + state.tShift[nextLine];\n        max = state.eMarks[nextLine];\n        if (pos < max) {\n          marker = state.src.charCodeAt(pos);\n          if (marker === 0x2D /* - */ || marker === 0x3D /* = */) {\n            pos = state.skipChars(pos, marker);\n            pos = state.skipSpaces(pos);\n            if (pos >= max) {\n              level = marker === 0x3D /* = */ ? 1 : 2;\n              break;\n            }\n          }\n        }\n      }\n\n      // quirk for blockquotes, this line should already be checked by that rule\n      if (state.sCount[nextLine] < 0) {\n        continue;\n      }\n\n      // Some tags can terminate paragraph without empty line.\n      terminate = false;\n      for (i = 0, l = terminatorRules.length; i < l; i++) {\n        if (terminatorRules[i](state, nextLine, endLine, true)) {\n          terminate = true;\n          break;\n        }\n      }\n      if (terminate) {\n        break;\n      }\n    }\n    if (!level) {\n      // Didn't find valid underline\n      return false;\n    }\n    content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n    state.line = nextLine + 1;\n    token = state.push('heading_open', 'h' + String(level), 1);\n    token.markup = String.fromCharCode(marker);\n    token.map = [startLine, state.line];\n    token = state.push('inline', '', 0);\n    token.content = content;\n    token.map = [startLine, state.line - 1];\n    token.children = [];\n    token = state.push('heading_close', 'h' + String(level), -1);\n    token.markup = String.fromCharCode(marker);\n    state.parentType = oldParentType;\n    return true;\n  };\n});","lineCount":89,"map":[[2,2,1,0],[4,2,3,0],[4,14,3,12],[6,2,6,0,"module"],[6,8,6,6],[6,9,6,7,"exports"],[6,16,6,14],[6,19,6,17],[6,28,6,26,"lheading"],[6,36,6,34,"lheading"],[6,37,6,35,"state"],[6,42,6,40],[6,44,6,42,"startLine"],[6,53,6,51],[6,55,6,53,"endLine"],[6,62,6,60],[6,77,6,74],[7,4,7,2],[7,8,7,6,"content"],[7,15,7,13],[8,6,7,15,"terminate"],[8,15,7,24],[9,6,7,26,"i"],[9,7,7,27],[10,6,7,29,"l"],[10,7,7,30],[11,6,7,32,"token"],[11,11,7,37],[12,6,7,39,"pos"],[12,9,7,42],[13,6,7,44,"max"],[13,9,7,47],[14,6,7,49,"level"],[14,11,7,54],[15,6,7,56,"marker"],[15,12,7,62],[16,6,8,6,"nextLine"],[16,14,8,14],[16,17,8,17,"startLine"],[16,26,8,26],[16,29,8,29],[16,30,8,30],[17,6,8,32,"oldParentType"],[17,19,8,45],[18,6,9,6,"terminatorRules"],[18,21,9,21],[18,24,9,24,"state"],[18,29,9,29],[18,30,9,30,"md"],[18,32,9,32],[18,33,9,33,"block"],[18,38,9,38],[18,39,9,39,"ruler"],[18,44,9,44],[18,45,9,45,"getRules"],[18,53,9,53],[18,54,9,54],[18,65,9,65],[18,66,9,66],[20,4,11,2],[21,4,12,2],[21,8,12,6,"state"],[21,13,12,11],[21,14,12,12,"sCount"],[21,20,12,18],[21,21,12,19,"startLine"],[21,30,12,28],[21,31,12,29],[21,34,12,32,"state"],[21,39,12,37],[21,40,12,38,"blkIndent"],[21,49,12,47],[21,53,12,51],[21,54,12,52],[21,56,12,54],[22,6,12,56],[22,13,12,63],[22,18,12,68],[23,4,12,70],[24,4,14,2,"oldParentType"],[24,17,14,15],[24,20,14,18,"state"],[24,25,14,23],[24,26,14,24,"parentType"],[24,36,14,34],[25,4,15,2,"state"],[25,9,15,7],[25,10,15,8,"parentType"],[25,20,15,18],[25,23,15,21],[25,34,15,32],[25,35,15,33],[25,36,15,34],[27,4,17,2],[28,4,18,2],[28,11,18,9,"nextLine"],[28,19,18,17],[28,22,18,20,"endLine"],[28,29,18,27],[28,33,18,31],[28,34,18,32,"state"],[28,39,18,37],[28,40,18,38,"isEmpty"],[28,47,18,45],[28,48,18,46,"nextLine"],[28,56,18,54],[28,57,18,55],[28,59,18,57,"nextLine"],[28,67,18,65],[28,69,18,67],[28,71,18,69],[29,6,19,4],[30,6,20,4],[31,6,21,4],[31,10,21,8,"state"],[31,15,21,13],[31,16,21,14,"sCount"],[31,22,21,20],[31,23,21,21,"nextLine"],[31,31,21,29],[31,32,21,30],[31,35,21,33,"state"],[31,40,21,38],[31,41,21,39,"blkIndent"],[31,50,21,48],[31,53,21,51],[31,54,21,52],[31,56,21,54],[32,8,21,56],[33,6,21,66],[35,6,23,4],[36,6,24,4],[37,6,25,4],[38,6,26,4],[38,10,26,8,"state"],[38,15,26,13],[38,16,26,14,"sCount"],[38,22,26,20],[38,23,26,21,"nextLine"],[38,31,26,29],[38,32,26,30],[38,36,26,34,"state"],[38,41,26,39],[38,42,26,40,"blkIndent"],[38,51,26,49],[38,53,26,51],[39,8,27,6,"pos"],[39,11,27,9],[39,14,27,12,"state"],[39,19,27,17],[39,20,27,18,"bMarks"],[39,26,27,24],[39,27,27,25,"nextLine"],[39,35,27,33],[39,36,27,34],[39,39,27,37,"state"],[39,44,27,42],[39,45,27,43,"tShift"],[39,51,27,49],[39,52,27,50,"nextLine"],[39,60,27,58],[39,61,27,59],[40,8,28,6,"max"],[40,11,28,9],[40,14,28,12,"state"],[40,19,28,17],[40,20,28,18,"eMarks"],[40,26,28,24],[40,27,28,25,"nextLine"],[40,35,28,33],[40,36,28,34],[41,8,30,6],[41,12,30,10,"pos"],[41,15,30,13],[41,18,30,16,"max"],[41,21,30,19],[41,23,30,21],[42,10,31,8,"marker"],[42,16,31,14],[42,19,31,17,"state"],[42,24,31,22],[42,25,31,23,"src"],[42,28,31,26],[42,29,31,27,"charCodeAt"],[42,39,31,37],[42,40,31,38,"pos"],[42,43,31,41],[42,44,31,42],[43,10,33,8],[43,14,33,12,"marker"],[43,20,33,18],[43,25,33,23],[43,29,33,27],[43,41,33,38,"marker"],[43,47,33,44],[43,52,33,49],[43,56,33,53],[43,66,33,62],[44,12,34,10,"pos"],[44,15,34,13],[44,18,34,16,"state"],[44,23,34,21],[44,24,34,22,"skipChars"],[44,33,34,31],[44,34,34,32,"pos"],[44,37,34,35],[44,39,34,37,"marker"],[44,45,34,43],[44,46,34,44],[45,12,35,10,"pos"],[45,15,35,13],[45,18,35,16,"state"],[45,23,35,21],[45,24,35,22,"skipSpaces"],[45,34,35,32],[45,35,35,33,"pos"],[45,38,35,36],[45,39,35,37],[46,12,37,10],[46,16,37,14,"pos"],[46,19,37,17],[46,23,37,21,"max"],[46,26,37,24],[46,28,37,26],[47,14,38,12,"level"],[47,19,38,17],[47,22,38,21,"marker"],[47,28,38,27],[47,33,38,32],[47,37,38,36],[47,48,38,46],[47,49,38,47],[47,52,38,50],[47,53,38,52],[48,14,39,12],[49,12,40,10],[50,10,41,8],[51,8,42,6],[52,6,43,4],[54,6,45,4],[55,6,46,4],[55,10,46,8,"state"],[55,15,46,13],[55,16,46,14,"sCount"],[55,22,46,20],[55,23,46,21,"nextLine"],[55,31,46,29],[55,32,46,30],[55,35,46,33],[55,36,46,34],[55,38,46,36],[56,8,46,38],[57,6,46,48],[59,6,48,4],[60,6,49,4,"terminate"],[60,15,49,13],[60,18,49,16],[60,23,49,21],[61,6,50,4],[61,11,50,9,"i"],[61,12,50,10],[61,15,50,13],[61,16,50,14],[61,18,50,16,"l"],[61,19,50,17],[61,22,50,20,"terminatorRules"],[61,37,50,35],[61,38,50,36,"length"],[61,44,50,42],[61,46,50,44,"i"],[61,47,50,45],[61,50,50,48,"l"],[61,51,50,49],[61,53,50,51,"i"],[61,54,50,52],[61,56,50,54],[61,58,50,56],[62,8,51,6],[62,12,51,10,"terminatorRules"],[62,27,51,25],[62,28,51,26,"i"],[62,29,51,27],[62,30,51,28],[62,31,51,29,"state"],[62,36,51,34],[62,38,51,36,"nextLine"],[62,46,51,44],[62,48,51,46,"endLine"],[62,55,51,53],[62,57,51,55],[62,61,51,59],[62,62,51,60],[62,64,51,62],[63,10,52,8,"terminate"],[63,19,52,17],[63,22,52,20],[63,26,52,24],[64,10,53,8],[65,8,54,6],[66,6,55,4],[67,6,56,4],[67,10,56,8,"terminate"],[67,19,56,17],[67,21,56,19],[68,8,56,21],[69,6,56,28],[70,4,57,2],[71,4,59,2],[71,8,59,6],[71,9,59,7,"level"],[71,14,59,12],[71,16,59,14],[72,6,60,4],[73,6,61,4],[73,13,61,11],[73,18,61,16],[74,4,62,2],[75,4,64,2,"content"],[75,11,64,9],[75,14,64,12,"state"],[75,19,64,17],[75,20,64,18,"getLines"],[75,28,64,26],[75,29,64,27,"startLine"],[75,38,64,36],[75,40,64,38,"nextLine"],[75,48,64,46],[75,50,64,48,"state"],[75,55,64,53],[75,56,64,54,"blkIndent"],[75,65,64,63],[75,67,64,65],[75,72,64,70],[75,73,64,71],[75,74,64,72,"trim"],[75,78,64,76],[75,79,64,77],[75,80,64,78],[76,4,66,2,"state"],[76,9,66,7],[76,10,66,8,"line"],[76,14,66,12],[76,17,66,15,"nextLine"],[76,25,66,23],[76,28,66,26],[76,29,66,27],[77,4,68,2,"token"],[77,9,68,7],[77,12,68,19,"state"],[77,17,68,24],[77,18,68,25,"push"],[77,22,68,29],[77,23,68,30],[77,37,68,44],[77,39,68,46],[77,42,68,49],[77,45,68,52,"String"],[77,51,68,58],[77,52,68,59,"level"],[77,57,68,64],[77,58,68,65],[77,60,68,67],[77,61,68,68],[77,62,68,69],[78,4,69,2,"token"],[78,9,69,7],[78,10,69,8,"markup"],[78,16,69,14],[78,19,69,19,"String"],[78,25,69,25],[78,26,69,26,"fromCharCode"],[78,38,69,38],[78,39,69,39,"marker"],[78,45,69,45],[78,46,69,46],[79,4,70,2,"token"],[79,9,70,7],[79,10,70,8,"map"],[79,13,70,11],[79,16,70,19],[79,17,70,21,"startLine"],[79,26,70,30],[79,28,70,32,"state"],[79,33,70,37],[79,34,70,38,"line"],[79,38,70,42],[79,39,70,44],[80,4,72,2,"token"],[80,9,72,7],[80,12,72,19,"state"],[80,17,72,24],[80,18,72,25,"push"],[80,22,72,29],[80,23,72,30],[80,31,72,38],[80,33,72,40],[80,35,72,42],[80,37,72,44],[80,38,72,45],[80,39,72,46],[81,4,73,2,"token"],[81,9,73,7],[81,10,73,8,"content"],[81,17,73,15],[81,20,73,19,"content"],[81,27,73,26],[82,4,74,2,"token"],[82,9,74,7],[82,10,74,8,"map"],[82,13,74,11],[82,16,74,19],[82,17,74,21,"startLine"],[82,26,74,30],[82,28,74,32,"state"],[82,33,74,37],[82,34,74,38,"line"],[82,38,74,42],[82,41,74,45],[82,42,74,46],[82,43,74,48],[83,4,75,2,"token"],[83,9,75,7],[83,10,75,8,"children"],[83,18,75,16],[83,21,75,19],[83,23,75,21],[84,4,77,2,"token"],[84,9,77,7],[84,12,77,19,"state"],[84,17,77,24],[84,18,77,25,"push"],[84,22,77,29],[84,23,77,30],[84,38,77,45],[84,40,77,47],[84,43,77,50],[84,46,77,53,"String"],[84,52,77,59],[84,53,77,60,"level"],[84,58,77,65],[84,59,77,66],[84,63,77,70],[84,64,77,71],[85,4,78,2,"token"],[85,9,78,7],[85,10,78,8,"markup"],[85,16,78,14],[85,19,78,19,"String"],[85,25,78,25],[85,26,78,26,"fromCharCode"],[85,38,78,38],[85,39,78,39,"marker"],[85,45,78,45],[85,46,78,46],[86,4,80,2,"state"],[86,9,80,7],[86,10,80,8,"parentType"],[86,20,80,18],[86,23,80,21,"oldParentType"],[86,36,80,34],[87,4,82,2],[87,11,82,9],[87,15,82,13],[88,2,83,0],[88,3,83,1],[89,0,83,2],[89,3]],"functionMap":{"names":["<global>","lheading"],"mappings":"AAA;iBCK;CD6E"},"hasCjsExports":true},"type":"js/module"}]}