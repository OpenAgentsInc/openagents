{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/callSuper","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"378KbBHdmndC3iMXZ2Ix8oB3LeE=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":414},"end":{"line":9,"column":31,"index":445}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":481},"end":{"line":11,"column":34,"index":515}}],"key":"4HPAaDQ25ZwZ2dzTLatXuUucZUM=","exportNames":["*"],"imports":1}},{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":516},"end":{"line":24,"column":22,"index":714}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g=","exportNames":["*"],"imports":1}},{"name":"../handlers/PanGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":33,"column":0,"index":856},"end":{"line":33,"column":66,"index":922}}],"key":"Z7WldcovRqVbXERv5Mkjp/bqHuA=","exportNames":["*"],"imports":1}},{"name":"../handlers/TapGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":38,"column":0,"index":1052},"end":{"line":38,"column":66,"index":1118}}],"key":"+Msf+8iAdn6txPXicJvQZ0hdOZ0=","exportNames":["*"],"imports":1}},{"name":"../State","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":39,"column":0,"index":1119},"end":{"line":39,"column":33,"index":1152}}],"key":"ISRoyBmrsYyTcSqLDCBIFNoRZWE=","exportNames":["*"],"imports":1}},{"name":"react/jsx-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"3suYSPX9nHbHZ1xNTsKXtKj0atE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return DrawerLayout;\n    }\n  });\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[0]);\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[1]);\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _babelRuntimeHelpersCallSuper = require(_dependencyMap[2]);\n  var _callSuper = _interopDefault(_babelRuntimeHelpersCallSuper);\n  var _babelRuntimeHelpersInherits = require(_dependencyMap[3]);\n  var _inherits = _interopDefault(_babelRuntimeHelpersInherits);\n  var _react = require(_dependencyMap[4]);\n  var React = _interopNamespace(_react);\n  var _invariant = require(_dependencyMap[5]);\n  var invariant = _interopDefault(_invariant);\n  var _reactNative = require(_dependencyMap[6]);\n  var _handlersPanGestureHandler = require(_dependencyMap[7]);\n  var _handlersTapGestureHandler = require(_dependencyMap[8]);\n  var _State = require(_dependencyMap[9]);\n  var _reactJsxRuntime = require(_dependencyMap[10]);\n  // This component is based on RN's DrawerLayoutAndroid API\n  //\n  // It perhaps deserves to be put in a separate repo, but since it relies on\n  // react-native-gesture-handler library which isn't very popular at the moment I\n  // decided to keep it here for the time being. It will allow us to move faster\n  // and fix issues that may arise in gesture handler library that could be found\n  // when using the drawer component\n\n  var DRAG_TOSS = 0.05;\n  var IDLE = 'Idle';\n  var DRAGGING = 'Dragging';\n  var SETTLING = 'Settling';\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  // Animated.AnimatedInterpolation has been converted to a generic type\n  // in @types/react-native 0.70. This way we can maintain compatibility\n  // with all versions of @types/react-native`\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n  /**\n   * @deprecated use Reanimated version of DrawerLayout instead\n   */\n  var DrawerLayout = /*#__PURE__*/function (_Component) {\n    function DrawerLayout(_props) {\n      var _this;\n      (0, _classCallCheck.default)(this, DrawerLayout);\n      _this = (0, _callSuper.default)(this, DrawerLayout, [_props]);\n      _this.accessibilityIsModalView = /*#__PURE__*/React.createRef();\n      _this.pointerEventsView = /*#__PURE__*/React.createRef();\n      _this.panGestureHandler = /*#__PURE__*/React.createRef();\n      _this.drawerShown = false;\n      _this.updateAnimatedEvent = (props, state) => {\n        // Event definition is based on\n        var drawerPosition = props.drawerPosition,\n          drawerWidth = props.drawerWidth,\n          drawerType = props.drawerType;\n        var dragXValue = state.dragX,\n          touchXValue = state.touchX,\n          drawerTranslation = state.drawerTranslation,\n          containerWidth = state.containerWidth;\n        var dragX = dragXValue;\n        var touchX = touchXValue;\n        if (drawerPosition !== 'left') {\n          // Most of the code is written in a way to handle left-side drawer. In\n          // order to handle right-side drawer the only thing we need to do is to\n          // reverse events coming from gesture handler in a way they emulate\n          // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n          // calulcated by subtracing real touchX from the width of the container\n          // (such that when touch happens at the right edge the value is simply 0)\n          dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue); // TODO(TS): (for all \"as\" in this file) make sure we can map this\n          touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;\n          touchXValue.setValue(containerWidth);\n        } else {\n          touchXValue.setValue(0);\n        }\n\n        // While closing the drawer when user starts gesture outside of its area (in greyed\n        // out part of the window), we want the drawer to follow only once finger reaches the\n        // edge of the drawer.\n        // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n        // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n        // an arrow pointing left\n        // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    +---------------+    +---------------+    +---------------+    +---------------+\n        //\n        // For the above to work properly we define animated value that will keep\n        // start position of the gesture. Then we use that value to calculate how\n        // much we need to subtract from the dragX. If the gesture started on the\n        // greyed out area we take the distance from the edge of the drawer to the\n        // start position. Otherwise we don't subtract at all and the drawer be\n        // pulled back as soon as you start the pan.\n        //\n        // This is used only when drawerType is \"front\"\n        //\n        var translationX = dragX;\n        if (drawerType === 'front') {\n          var startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));\n          var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n            inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n            outputRange: [0, 0, 1]\n          });\n          translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above\n        }\n        _this.openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({\n          inputRange: [0, drawerWidth],\n          outputRange: [0, 1],\n          extrapolate: 'clamp'\n        });\n        var gestureOptions = {\n          useNativeDriver: props.useNativeAnimations\n        };\n        if (_this.props.onDrawerSlide) {\n          gestureOptions.listener = ev => {\n            var translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n            var position = translationX / _this.state.containerWidth;\n            _this.props.onDrawerSlide?.(position);\n          };\n        }\n        _this.onGestureEvent = _reactNative.Animated.event([{\n          nativeEvent: {\n            translationX: dragXValue,\n            x: touchXValue\n          }\n        }], gestureOptions);\n      };\n      _this.handleContainerLayout = _ref => {\n        var nativeEvent = _ref.nativeEvent;\n        _this.setState({\n          containerWidth: nativeEvent.layout.width\n        });\n      };\n      _this.emitStateChanged = (newState, drawerWillShow) => {\n        _this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n      };\n      _this.openingHandlerStateChange = _ref2 => {\n        var nativeEvent = _ref2.nativeEvent;\n        if (nativeEvent.oldState === _State.State.ACTIVE) {\n          _this.handleRelease({\n            nativeEvent\n          });\n        } else if (nativeEvent.state === _State.State.ACTIVE) {\n          _this.emitStateChanged(DRAGGING, false);\n          _this.setState({\n            drawerState: DRAGGING\n          });\n          if (_this.props.keyboardDismissMode === 'on-drag') {\n            _reactNative.Keyboard.dismiss();\n          }\n          if (_this.props.hideStatusBar) {\n            _reactNative.StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n          }\n        }\n      };\n      _this.onTapHandlerStateChange = _ref3 => {\n        var nativeEvent = _ref3.nativeEvent;\n        if (_this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n          _this.closeDrawer();\n        }\n      };\n      _this.handleRelease = _ref4 => {\n        var nativeEvent = _ref4.nativeEvent;\n        var _this$props = _this.props,\n          drawerWidth = _this$props.drawerWidth,\n          drawerPosition = _this$props.drawerPosition,\n          drawerType = _this$props.drawerType;\n        var containerWidth = _this.state.containerWidth;\n        var dragX = nativeEvent.translationX,\n          velocityX = nativeEvent.velocityX,\n          touchX = nativeEvent.x;\n        if (drawerPosition !== 'left') {\n          // See description in _updateAnimatedEvent about why events are flipped\n          // for right-side drawer\n          dragX = -dragX;\n          touchX = containerWidth - touchX;\n          velocityX = -velocityX;\n        }\n        var gestureStartX = touchX - dragX;\n        var dragOffsetBasedOnStart = 0;\n        if (drawerType === 'front') {\n          dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n        }\n        var startOffsetX = dragX + dragOffsetBasedOnStart + (_this.drawerShown ? drawerWidth : 0);\n        var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n        var shouldOpen = projOffsetX > drawerWidth / 2;\n        if (shouldOpen) {\n          _this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n        } else {\n          _this.animateDrawer(startOffsetX, 0, velocityX);\n        }\n      };\n      _this.updateShowing = showing => {\n        _this.drawerShown = showing;\n        _this.accessibilityIsModalView.current?.setNativeProps({\n          accessibilityViewIsModal: showing\n        });\n        _this.pointerEventsView.current?.setNativeProps({\n          pointerEvents: showing ? 'auto' : 'none'\n        });\n        var _this$props2 = _this.props,\n          drawerPosition = _this$props2.drawerPosition,\n          minSwipeDistance = _this$props2.minSwipeDistance,\n          edgeWidth = _this$props2.edgeWidth;\n        var fromLeft = drawerPosition === 'left';\n        // gestureOrientation is 1 if the expected gesture is from left to right and\n        // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n        // to right gesture, thus orientation will be 1.\n        var gestureOrientation = (fromLeft ? 1 : -1) * (_this.drawerShown ? -1 : 1);\n        // When drawer is closed we want the hitSlop to be horizontally shorter than\n        // the container size by the value of SLOP. This will make it only activate\n        // when gesture happens not further than SLOP away from the edge\n        var hitSlop = fromLeft ? {\n          left: 0,\n          width: showing ? undefined : edgeWidth\n        } : {\n          right: 0,\n          width: showing ? undefined : edgeWidth\n        };\n        // @ts-ignore internal API, maybe could be fixed in handler types\n        _this.panGestureHandler.current?.setNativeProps({\n          hitSlop,\n          activeOffsetX: gestureOrientation * minSwipeDistance\n        });\n      };\n      _this.animateDrawer = (fromValue, toValue, velocity, speed) => {\n        _this.state.dragX.setValue(0);\n        _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n        if (fromValue != null) {\n          var nextFramePosition = fromValue;\n          if (_this.props.useNativeAnimations) {\n            // When using native driver, we predict the next position of the\n            // animation because it takes one frame of a roundtrip to pass RELEASE\n            // event from native driver to JS before we can start animating. Without\n            // it, it is more noticable that the frame is dropped.\n            if (fromValue < toValue && velocity > 0) {\n              nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n            } else if (fromValue > toValue && velocity < 0) {\n              nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n            }\n          }\n          _this.state.drawerTranslation.setValue(nextFramePosition);\n        }\n        var willShow = toValue !== 0;\n        _this.updateShowing(willShow);\n        _this.emitStateChanged(SETTLING, willShow);\n        _this.setState({\n          drawerState: SETTLING\n        });\n        if (_this.props.hideStatusBar) {\n          _reactNative.StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n        }\n        _reactNative.Animated.spring(_this.state.drawerTranslation, {\n          velocity,\n          bounciness: 0,\n          toValue,\n          useNativeDriver: _this.props.useNativeAnimations,\n          speed: speed ?? undefined\n        }).start(_ref5 => {\n          var finished = _ref5.finished;\n          if (finished) {\n            _this.emitStateChanged(IDLE, willShow);\n            _this.setState({\n              drawerOpened: willShow\n            });\n            if (_this.state.drawerState !== DRAGGING) {\n              // It's possilbe that user started drag while the drawer\n              // was settling, don't override state in this case\n              _this.setState({\n                drawerState: IDLE\n              });\n            }\n            if (willShow) {\n              _this.props.onDrawerOpen?.();\n            } else {\n              _this.props.onDrawerClose?.();\n            }\n          }\n        });\n      };\n      // eslint-disable-next-line @eslint-react/no-unused-class-component-members\n      _this.openDrawer = function () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _this.animateDrawer(\n        // TODO: decide if it should be null or undefined is the proper value\n        undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed);\n\n        // We need to force the update, otherwise the overlay is not rerendered and\n        // it would not be clickable\n        _this.forceUpdate();\n      };\n      _this.closeDrawer = function () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        // TODO: decide if it should be null or undefined is the proper value\n        _this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed);\n\n        // We need to force the update, otherwise the overlay is not rerendered and\n        // it would be still clickable\n        _this.forceUpdate();\n      };\n      _this.renderOverlay = () => {\n        /* Overlay styles */\n        (0, invariant.default)(_this.openValue, 'should be set');\n        var overlayOpacity;\n        if (_this.state.drawerState !== IDLE) {\n          overlayOpacity = _this.openValue;\n        } else {\n          overlayOpacity = _this.state.drawerOpened ? 1 : 0;\n        }\n        var dynamicOverlayStyles = {\n          opacity: overlayOpacity,\n          backgroundColor: _this.props.overlayColor\n        };\n        return /*#__PURE__*/(0, _reactJsxRuntime.jsx)(_handlersTapGestureHandler.TapGestureHandler, {\n          onHandlerStateChange: _this.onTapHandlerStateChange,\n          children: /*#__PURE__*/(0, _reactJsxRuntime.jsx)(_reactNative.Animated.View, {\n            pointerEvents: _this.drawerShown ? 'auto' : 'none',\n            ref: _this.pointerEventsView,\n            style: [styles.overlay, dynamicOverlayStyles]\n          })\n        });\n      };\n      _this.renderDrawer = () => {\n        var _this$props3 = _this.props,\n          drawerBackgroundColor = _this$props3.drawerBackgroundColor,\n          drawerWidth = _this$props3.drawerWidth,\n          drawerPosition = _this$props3.drawerPosition,\n          drawerType = _this$props3.drawerType,\n          drawerContainerStyle = _this$props3.drawerContainerStyle,\n          contentContainerStyle = _this$props3.contentContainerStyle;\n        var fromLeft = drawerPosition === 'left';\n        var drawerSlide = drawerType !== 'back';\n        var containerSlide = drawerType !== 'front';\n\n        // We rely on row and row-reverse flex directions to position the drawer\n        // properly. Apparently for RTL these are flipped which requires us to use\n        // the opposite setting for the drawer to appear from left or right\n        // according to the drawerPosition prop\n        var reverseContentDirection = _reactNative.I18nManager.isRTL ? fromLeft : !fromLeft;\n        var dynamicDrawerStyles = {\n          backgroundColor: drawerBackgroundColor,\n          width: drawerWidth\n        };\n        var openValue = _this.openValue;\n        (0, invariant.default)(openValue, 'should be set');\n        var containerStyles;\n        if (containerSlide) {\n          var containerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n            extrapolate: 'clamp'\n          });\n          containerStyles = {\n            transform: [{\n              translateX: containerTranslateX\n            }]\n          };\n        }\n        var drawerTranslateX = 0;\n        if (drawerSlide) {\n          var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n          if (_this.state.drawerState !== IDLE) {\n            drawerTranslateX = openValue.interpolate({\n              inputRange: [0, 1],\n              outputRange: [closedDrawerOffset, 0],\n              extrapolate: 'clamp'\n            });\n          } else {\n            drawerTranslateX = _this.state.drawerOpened ? 0 : closedDrawerOffset;\n          }\n        }\n        var drawerStyles = {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n        };\n        return /*#__PURE__*/(0, _reactJsxRuntime.jsxs)(_reactNative.Animated.View, {\n          style: styles.main,\n          onLayout: _this.handleContainerLayout,\n          children: [/*#__PURE__*/(0, _reactJsxRuntime.jsxs)(_reactNative.Animated.View, {\n            style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n            importantForAccessibility: _this.drawerShown ? 'no-hide-descendants' : 'yes',\n            children: [typeof _this.props.children === 'function' ? _this.props.children(_this.openValue) : _this.props.children, _this.renderOverlay()]\n          }), /*#__PURE__*/(0, _reactJsxRuntime.jsx)(_reactNative.Animated.View, {\n            pointerEvents: \"box-none\",\n            ref: _this.accessibilityIsModalView,\n            accessibilityViewIsModal: _this.drawerShown,\n            style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n            children: /*#__PURE__*/(0, _reactJsxRuntime.jsx)(_reactNative.View, {\n              style: dynamicDrawerStyles,\n              children: _this.props.renderNavigationView(_this.openValue)\n            })\n          })]\n        });\n      };\n      _this.setPanGestureRef = ref => {\n        // TODO(TS): make sure it is OK taken from\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n        _this.panGestureHandler.current = ref;\n        _this.props.onGestureRef?.(ref);\n      };\n      var _dragX = new _reactNative.Animated.Value(0);\n      var _touchX = new _reactNative.Animated.Value(0);\n      var _drawerTranslation = new _reactNative.Animated.Value(0);\n      _this.state = {\n        dragX: _dragX,\n        touchX: _touchX,\n        drawerTranslation: _drawerTranslation,\n        containerWidth: 0,\n        drawerState: IDLE,\n        drawerOpened: false\n      };\n      _this.updateAnimatedEvent(_props, _this.state);\n      return _this;\n    }\n    (0, _inherits.default)(DrawerLayout, _Component);\n    return (0, _createClass.default)(DrawerLayout, [{\n      key: \"shouldComponentUpdate\",\n      value: function shouldComponentUpdate(props, state) {\n        if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n          this.updateAnimatedEvent(props, state);\n        }\n        return true;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props4 = this.props,\n          drawerPosition = _this$props4.drawerPosition,\n          drawerLockMode = _this$props4.drawerLockMode,\n          edgeWidth = _this$props4.edgeWidth,\n          minSwipeDistance = _this$props4.minSwipeDistance;\n        var fromLeft = drawerPosition === 'left';\n\n        // gestureOrientation is 1 if the expected gesture is from left to right and\n        // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n        // to right gesture, thus orientation will be 1.\n        var gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n        // When drawer is closed we want the hitSlop to be horizontally shorter than\n        // the container size by the value of SLOP. This will make it only activate\n        // when gesture happens not further than SLOP away from the edge\n        var hitSlop = fromLeft ? {\n          left: 0,\n          width: this.drawerShown ? undefined : edgeWidth\n        } : {\n          right: 0,\n          width: this.drawerShown ? undefined : edgeWidth\n        };\n        return /*#__PURE__*/(0, _reactJsxRuntime.jsx)(_handlersPanGestureHandler.PanGestureHandler // @ts-ignore could be fixed in handler types\n        , {\n          userSelect: this.props.userSelect,\n          activeCursor: this.props.activeCursor,\n          mouseButton: this.props.mouseButton,\n          enableContextMenu: this.props.enableContextMenu,\n          ref: this.setPanGestureRef,\n          hitSlop: hitSlop,\n          activeOffsetX: gestureOrientation * minSwipeDistance,\n          failOffsetY: [-15, 15],\n          onGestureEvent: this.onGestureEvent,\n          onHandlerStateChange: this.openingHandlerStateChange,\n          enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n          enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n          children: this.renderDrawer()\n        });\n      }\n    }]);\n  }(_react.Component);\n  DrawerLayout.defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false\n  };\n  DrawerLayout.positions = {\n    Left: 'left',\n    Right: 'right'\n  };\n  var styles = _reactNative.StyleSheet.create({\n    drawerContainer: {\n      ..._reactNative.StyleSheet.absoluteFillObject,\n      zIndex: 1001,\n      flexDirection: 'row'\n    },\n    containerInFront: {\n      ..._reactNative.StyleSheet.absoluteFillObject,\n      zIndex: 1002\n    },\n    containerOnBack: {\n      ..._reactNative.StyleSheet.absoluteFillObject\n    },\n    main: {\n      flex: 1,\n      zIndex: 0,\n      overflow: 'hidden'\n    },\n    overlay: {\n      ..._reactNative.StyleSheet.absoluteFillObject,\n      zIndex: 1000\n    }\n  });\n});","lineCount":571,"map":[[30,13,231,21,"DrawerLayout"],[30,25,231,33],[31,4,231,33],[32,2,231,33],[33,2,231,33],[33,6,231,33,"_babelRuntimeHelpersClassCallCheck"],[33,40,231,33],[33,43,231,33,"require"],[33,50,231,33],[33,51,231,33,"_dependencyMap"],[33,65,231,33],[34,2,231,33],[34,6,231,33,"_classCallCheck"],[34,21,231,33],[34,24,231,33,"_interopDefault"],[34,39,231,33],[34,40,231,33,"_babelRuntimeHelpersClassCallCheck"],[34,74,231,33],[35,2,231,33],[35,6,231,33,"_babelRuntimeHelpersCreateClass"],[35,37,231,33],[35,40,231,33,"require"],[35,47,231,33],[35,48,231,33,"_dependencyMap"],[35,62,231,33],[36,2,231,33],[36,6,231,33,"_createClass"],[36,18,231,33],[36,21,231,33,"_interopDefault"],[36,36,231,33],[36,37,231,33,"_babelRuntimeHelpersCreateClass"],[36,68,231,33],[37,2,231,33],[37,6,231,33,"_babelRuntimeHelpersCallSuper"],[37,35,231,33],[37,38,231,33,"require"],[37,45,231,33],[37,46,231,33,"_dependencyMap"],[37,60,231,33],[38,2,231,33],[38,6,231,33,"_callSuper"],[38,16,231,33],[38,19,231,33,"_interopDefault"],[38,34,231,33],[38,35,231,33,"_babelRuntimeHelpersCallSuper"],[38,64,231,33],[39,2,231,33],[39,6,231,33,"_babelRuntimeHelpersInherits"],[39,34,231,33],[39,37,231,33,"require"],[39,44,231,33],[39,45,231,33,"_dependencyMap"],[39,59,231,33],[40,2,231,33],[40,6,231,33,"_inherits"],[40,15,231,33],[40,18,231,33,"_interopDefault"],[40,33,231,33],[40,34,231,33,"_babelRuntimeHelpersInherits"],[40,62,231,33],[41,2,9,0],[41,6,9,0,"_react"],[41,12,9,0],[41,15,9,0,"require"],[41,22,9,0],[41,23,9,0,"_dependencyMap"],[41,37,9,0],[42,2,9,0],[42,6,9,0,"React"],[42,11,9,0],[42,14,9,0,"_interopNamespace"],[42,31,9,0],[42,32,9,0,"_react"],[42,38,9,0],[43,2,11,0],[43,6,11,0,"_invariant"],[43,16,11,0],[43,19,11,0,"require"],[43,26,11,0],[43,27,11,0,"_dependencyMap"],[43,41,11,0],[44,2,11,0],[44,6,11,0,"invariant"],[44,15,11,0],[44,18,11,0,"_interopDefault"],[44,33,11,0],[44,34,11,0,"_invariant"],[44,44,11,0],[45,2,12,0],[45,6,12,0,"_reactNative"],[45,18,12,0],[45,21,12,0,"require"],[45,28,12,0],[45,29,12,0,"_dependencyMap"],[45,43,12,0],[46,2,33,0],[46,6,33,0,"_handlersPanGestureHandler"],[46,32,33,0],[46,35,33,0,"require"],[46,42,33,0],[46,43,33,0,"_dependencyMap"],[46,57,33,0],[47,2,38,0],[47,6,38,0,"_handlersTapGestureHandler"],[47,32,38,0],[47,35,38,0,"require"],[47,42,38,0],[47,43,38,0,"_dependencyMap"],[47,57,38,0],[48,2,39,0],[48,6,39,0,"_State"],[48,12,39,0],[48,15,39,0,"require"],[48,22,39,0],[48,23,39,0,"_dependencyMap"],[48,37,39,0],[49,2,39,33],[49,6,39,33,"_reactJsxRuntime"],[49,22,39,33],[49,25,39,33,"require"],[49,32,39,33],[49,33,39,33,"_dependencyMap"],[49,47,39,33],[50,2,1,0],[51,2,2,0],[52,2,3,0],[53,2,4,0],[54,2,5,0],[55,2,6,0],[56,2,7,0],[58,2,41,0],[58,6,41,6,"DRAG_TOSS"],[58,15,41,15],[58,18,41,18],[58,22,41,22],[59,2,43,0],[59,6,43,6,"IDLE"],[59,10,43,23],[59,13,43,26],[59,19,43,32],[60,2,44,0],[60,6,44,6,"DRAGGING"],[60,14,44,27],[60,17,44,30],[60,27,44,40],[61,2,45,0],[61,6,45,6,"SETTLING"],[61,14,45,27],[61,17,45,30],[61,27,45,40],[63,2,47,0],[64,0,48,0],[65,0,49,0],[67,2,52,0],[68,0,53,0],[69,0,54,0],[71,2,57,0],[72,0,58,0],[73,0,59,0],[75,2,62,0],[76,0,63,0],[77,0,64,0],[79,2,67,0],[80,0,68,0],[81,0,69,0],[83,2,72,0],[84,2,73,0],[85,2,74,0],[87,2,77,0],[88,0,78,0],[89,0,79,0],[91,2,208,0],[92,0,209,0],[93,0,210,0],[95,2,220,0],[96,0,221,0],[97,0,222,0],[98,2,228,0],[99,0,229,0],[100,0,230,0],[101,2,228,0],[101,6,231,21,"DrawerLayout"],[101,18,231,33],[101,44,231,33,"_Component"],[101,54,231,33],[102,4,247,2],[102,13,247,2,"DrawerLayout"],[102,26,247,14,"props"],[102,32,247,38],[102,34,247,40],[103,6,247,40],[103,10,247,40,"_this"],[103,15,247,40],[104,6,247,40],[104,10,247,40,"_classCallCheck"],[104,25,247,40],[104,26,247,40,"default"],[104,33,247,40],[104,41,247,40,"DrawerLayout"],[104,53,247,40],[105,6,248,4,"_this"],[105,11,248,4],[105,18,248,4,"_callSuper"],[105,28,248,4],[105,29,248,4,"default"],[105,36,248,4],[105,44,248,4,"DrawerLayout"],[105,56,248,4],[105,59,248,10,"props"],[105,65,248,15],[106,6,248,17,"_this"],[106,11,248,17],[106,12,283,10,"accessibilityIsModalView"],[106,36,283,34],[106,52,284,4,"React"],[106,57,284,9],[106,58,284,10,"createRef"],[106,67,284,19],[106,68,284,53],[106,69,284,54],[107,6,284,54,"_this"],[107,11,284,54],[107,12,285,10,"pointerEventsView"],[107,29,285,27],[107,45,286,4,"React"],[107,50,286,9],[107,51,286,10,"createRef"],[107,60,286,19],[107,61,286,53],[107,62,286,54],[108,6,286,54,"_this"],[108,11,286,54],[108,12,287,10,"panGestureHandler"],[108,29,287,27],[108,45,287,30,"React"],[108,50,287,35],[108,51,287,36,"createRef"],[108,60,287,45],[108,61,287,72],[108,62,287,73],[109,6,287,73,"_this"],[109,11,287,73],[109,12,288,10,"drawerShown"],[109,23,288,21],[109,26,288,24],[109,31,288,29],[110,6,288,29,"_this"],[110,11,288,29],[110,12,295,10,"updateAnimatedEvent"],[110,31,295,29],[110,34,295,32],[110,35,296,4,"props"],[110,40,296,28],[110,42,297,4,"state"],[110,47,297,28],[110,52,298,7],[111,8,299,4],[112,8,300,4],[112,12,300,12,"drawerPosition"],[112,26,300,26],[112,29,300,56,"props"],[112,34,300,61],[112,35,300,12,"drawerPosition"],[112,49,300,26],[113,10,300,28,"drawerWidth"],[113,21,300,39],[113,24,300,56,"props"],[113,29,300,61],[113,30,300,28,"drawerWidth"],[113,41,300,39],[114,10,300,41,"drawerType"],[114,20,300,51],[114,23,300,56,"props"],[114,28,300,61],[114,29,300,41,"drawerType"],[114,39,300,51],[115,8,301,4],[115,12,302,13,"dragXValue"],[115,22,302,23],[115,25,306,8,"state"],[115,30,306,13],[115,31,302,6,"dragX"],[115,36,302,11],[116,10,303,14,"touchXValue"],[116,21,303,25],[116,24,306,8,"state"],[116,29,306,13],[116,30,303,6,"touchX"],[116,36,303,12],[117,10,304,6,"drawerTranslation"],[117,27,304,23],[117,30,306,8,"state"],[117,35,306,13],[117,36,304,6,"drawerTranslation"],[117,53,304,23],[118,10,305,6,"containerWidth"],[118,24,305,20],[118,27,306,8,"state"],[118,32,306,13],[118,33,305,6,"containerWidth"],[118,47,305,20],[119,8,308,4],[119,12,308,8,"dragX"],[119,17,308,13],[119,20,308,16,"dragXValue"],[119,30,308,26],[120,8,309,4],[120,12,309,8,"touchX"],[120,18,309,14],[120,21,309,17,"touchXValue"],[120,32,309,28],[121,8,311,4],[121,12,311,8,"drawerPosition"],[121,26,311,22],[121,31,311,27],[121,37,311,33],[121,39,311,35],[122,10,312,6],[123,10,313,6],[124,10,314,6],[125,10,315,6],[126,10,316,6],[127,10,317,6],[128,10,318,6,"dragX"],[128,15,318,11],[128,18,318,14,"Animated"],[128,30,318,22],[128,31,318,22,"Animated"],[128,39,318,22],[128,40,318,23,"multiply"],[128,48,318,31],[128,49,319,8],[128,53,319,12,"Animated"],[128,65,319,20],[128,66,319,20,"Animated"],[128,74,319,20],[128,75,319,21,"Value"],[128,80,319,26],[128,83,319,29],[128,84,319,30],[128,86,320,8,"dragXValue"],[128,96,321,6],[128,97,321,25],[128,98,321,26],[128,99,321,27],[129,10,322,6,"touchX"],[129,16,322,12],[129,19,322,15,"Animated"],[129,31,322,23],[129,32,322,23,"Animated"],[129,40,322,23],[129,41,322,24,"add"],[129,44,322,27],[129,45,323,8],[129,49,323,12,"Animated"],[129,61,323,20],[129,62,323,20,"Animated"],[129,70,323,20],[129,71,323,21,"Value"],[129,76,323,26],[129,77,323,27,"containerWidth"],[129,91,323,41],[129,92,323,42],[129,94,324,8,"Animated"],[129,106,324,16],[129,107,324,16,"Animated"],[129,115,324,16],[129,116,324,17,"multiply"],[129,124,324,25],[129,125,324,26],[129,129,324,30,"Animated"],[129,141,324,38],[129,142,324,38,"Animated"],[129,150,324,38],[129,151,324,39,"Value"],[129,156,324,44],[129,159,324,47],[129,160,324,48],[129,162,324,50,"touchXValue"],[129,173,324,61],[129,174,325,6],[129,175,325,25],[129,176,325,26],[129,177,325,27],[130,10,326,6,"touchXValue"],[130,21,326,17],[130,22,326,18,"setValue"],[130,30,326,26],[130,31,326,27,"containerWidth"],[130,45,326,41],[130,46,326,42],[131,8,327,4],[131,9,327,5],[131,15,327,11],[132,10,328,6,"touchXValue"],[132,21,328,17],[132,22,328,18,"setValue"],[132,30,328,26],[132,31,328,27],[132,32,328,28],[132,33,328,29],[133,8,329,4],[135,8,331,4],[136,8,332,4],[137,8,333,4],[138,8,334,4],[139,8,335,4],[140,8,336,4],[141,8,337,4],[142,8,338,4],[143,8,339,4],[144,8,340,4],[145,8,341,4],[146,8,342,4],[147,8,343,4],[148,8,344,4],[149,8,345,4],[150,8,346,4],[151,8,347,4],[152,8,348,4],[153,8,349,4],[154,8,350,4],[155,8,351,4],[156,8,352,4],[157,8,353,4],[158,8,354,4],[159,8,355,4],[160,8,356,4],[160,12,356,8,"translationX"],[160,24,356,20],[160,27,356,23,"dragX"],[160,32,356,28],[161,8,357,4],[161,12,357,8,"drawerType"],[161,22,357,18],[161,27,357,23],[161,34,357,30],[161,36,357,32],[162,10,358,6],[162,14,358,12,"startPositionX"],[162,28,358,26],[162,31,358,29,"Animated"],[162,43,358,37],[162,44,358,37,"Animated"],[162,52,358,37],[162,53,358,38,"add"],[162,56,358,41],[162,57,359,8,"touchX"],[162,63,359,14],[162,65,360,8,"Animated"],[162,77,360,16],[162,78,360,16,"Animated"],[162,86,360,16],[162,87,360,17,"multiply"],[162,95,360,25],[162,96,360,26],[162,100,360,30,"Animated"],[162,112,360,38],[162,113,360,38,"Animated"],[162,121,360,38],[162,122,360,39,"Value"],[162,127,360,44],[162,130,360,47],[162,131,360,48],[162,133,360,50,"dragX"],[162,138,360,55],[162,139,361,6],[162,140,361,7],[163,10,363,6],[163,14,363,12,"dragOffsetFromOnStartPosition"],[163,43,363,41],[163,46,363,44,"startPositionX"],[163,60,363,58],[163,61,363,59,"interpolate"],[163,72,363,70],[163,73,363,71],[164,12,364,8,"inputRange"],[164,22,364,18],[164,24,364,20],[164,25,364,21,"drawerWidth"],[164,36,364,32],[164,39,364,36],[164,40,364,37],[164,42,364,39,"drawerWidth"],[164,53,364,50],[164,55,364,53,"drawerWidth"],[164,66,364,64],[164,69,364,68],[164,70,364,69],[164,71,364,70],[165,12,365,8,"outputRange"],[165,23,365,19],[165,25,365,21],[165,26,365,22],[165,27,365,23],[165,29,365,25],[165,30,365,26],[165,32,365,28],[165,33,365,29],[166,10,366,6],[166,11,366,7],[166,12,366,8],[167,10,367,6,"translationX"],[167,22,367,18],[167,25,367,21,"Animated"],[167,37,367,29],[167,38,367,29,"Animated"],[167,46,367,29],[167,47,367,30,"add"],[167,50,367,33],[167,51,368,8,"dragX"],[167,56,368,13],[167,58,369,8,"dragOffsetFromOnStartPosition"],[167,87,370,6],[167,88,370,25],[167,89,370,26],[167,90,370,27],[168,8,371,4],[169,8,373,4,"_this"],[169,13,373,4],[169,14,373,9,"openValue"],[169,23,373,18],[169,26,373,21,"Animated"],[169,38,373,29],[169,39,373,29,"Animated"],[169,47,373,29],[169,48,373,30,"add"],[169,51,373,33],[169,52,373,34,"translationX"],[169,64,373,46],[169,66,373,48,"drawerTranslation"],[169,83,373,65],[169,84,373,66],[169,85,373,67,"interpolate"],[169,96,373,78],[169,97,373,79],[170,10,374,6,"inputRange"],[170,20,374,16],[170,22,374,18],[170,23,374,19],[170,24,374,20],[170,26,374,22,"drawerWidth"],[170,37,374,33],[170,38,374,35],[171,10,375,6,"outputRange"],[171,21,375,17],[171,23,375,19],[171,24,375,20],[171,25,375,21],[171,27,375,23],[171,28,375,24],[171,29,375,25],[172,10,376,6,"extrapolate"],[172,21,376,17],[172,23,376,19],[173,8,377,4],[173,9,377,5],[173,10,377,6],[174,8,379,4],[174,12,379,10,"gestureOptions"],[174,26,385,5],[174,29,385,8],[175,10,386,6,"useNativeDriver"],[175,25,386,21],[175,27,386,23,"props"],[175,32,386,28],[175,33,386,29,"useNativeAnimations"],[176,8,387,4],[176,9,387,5],[177,8,389,4],[177,12,389,8,"_this"],[177,17,389,8],[177,18,389,13,"props"],[177,23,389,18],[177,24,389,19,"onDrawerSlide"],[177,37,389,32],[177,39,389,34],[178,10,390,6,"gestureOptions"],[178,24,390,20],[178,25,390,21,"listener"],[178,33,390,29],[178,36,390,33,"ev"],[178,38,390,35],[178,42,390,40],[179,12,391,8],[179,16,391,14,"translationX"],[179,28,391,26],[179,31,391,29,"Math"],[179,35,391,33],[179,36,391,34,"floor"],[179,41,391,39],[179,42,391,40,"Math"],[179,46,391,44],[179,47,391,45,"abs"],[179,50,391,48],[179,51,391,49,"ev"],[179,53,391,51],[179,54,391,52,"nativeEvent"],[179,65,391,63],[179,66,391,64,"translationX"],[179,78,391,76],[179,79,391,77],[179,80,391,78],[180,12,392,8],[180,16,392,14,"position"],[180,24,392,22],[180,27,392,25,"translationX"],[180,39,392,37],[180,42,392,40,"_this"],[180,47,392,40],[180,48,392,45,"state"],[180,53,392,50],[180,54,392,51,"containerWidth"],[180,68,392,65],[181,12,394,8,"_this"],[181,17,394,8],[181,18,394,13,"props"],[181,23,394,18],[181,24,394,19,"onDrawerSlide"],[181,37,394,32],[181,40,394,35,"position"],[181,48,394,43],[181,49,394,44],[182,10,395,6],[182,11,395,7],[183,8,396,4],[184,8,398,4,"_this"],[184,13,398,4],[184,14,398,9,"onGestureEvent"],[184,28,398,23],[184,31,398,26,"Animated"],[184,43,398,34],[184,44,398,34,"Animated"],[184,52,398,34],[184,53,398,35,"event"],[184,58,398,40],[184,59,399,6],[184,60,399,7],[185,10,399,9,"nativeEvent"],[185,21,399,20],[185,23,399,22],[186,12,399,24,"translationX"],[186,24,399,36],[186,26,399,38,"dragXValue"],[186,36,399,48],[187,12,399,50,"x"],[187,13,399,51],[187,15,399,53,"touchXValue"],[188,10,399,65],[189,8,399,67],[189,9,399,68],[189,10,399,69],[189,12,400,6,"gestureOptions"],[189,26,401,4],[189,27,401,5],[190,6,402,2],[190,7,402,3],[191,6,402,3,"_this"],[191,11,402,3],[191,12,404,10,"handleContainerLayout"],[191,33,404,31],[191,36,404,34,"_ref"],[191,40,404,34],[191,44,404,74],[192,8,404,74],[192,12,404,37,"nativeEvent"],[192,23,404,48],[192,26,404,48,"_ref"],[192,30,404,48],[192,31,404,37,"nativeEvent"],[192,42,404,48],[193,8,405,4,"_this"],[193,13,405,4],[193,14,405,9,"setState"],[193,22,405,17],[193,23,405,18],[194,10,405,20,"containerWidth"],[194,24,405,34],[194,26,405,36,"nativeEvent"],[194,37,405,47],[194,38,405,48,"layout"],[194,44,405,54],[194,45,405,55,"width"],[195,8,405,61],[195,9,405,62],[195,10,405,63],[196,6,406,2],[196,7,406,3],[197,6,406,3,"_this"],[197,11,406,3],[197,12,408,10,"emitStateChanged"],[197,28,408,26],[197,31,408,29],[197,32,409,4,"newState"],[197,40,409,25],[197,42,410,4,"drawerWillShow"],[197,56,410,27],[197,61,411,7],[198,8,412,4,"_this"],[198,13,412,4],[198,14,412,9,"props"],[198,19,412,14],[198,20,412,15,"onDrawerStateChanged"],[198,40,412,35],[198,43,412,38,"newState"],[198,51,412,46],[198,53,412,48,"drawerWillShow"],[198,67,412,62],[198,68,412,63],[199,6,413,2],[199,7,413,3],[200,6,413,3,"_this"],[200,11,413,3],[200,12,415,10,"openingHandlerStateChange"],[200,37,415,35],[200,40,415,38,"_ref2"],[200,45,415,38],[200,49,417,64],[201,8,417,64],[201,12,416,4,"nativeEvent"],[201,23,416,15],[201,26,416,15,"_ref2"],[201,31,416,15],[201,32,416,4,"nativeEvent"],[201,43,416,15],[202,8,418,4],[202,12,418,8,"nativeEvent"],[202,23,418,19],[202,24,418,20,"oldState"],[202,32,418,28],[202,37,418,33,"State"],[202,43,418,38],[202,44,418,38,"State"],[202,49,418,38],[202,50,418,39,"ACTIVE"],[202,56,418,45],[202,58,418,47],[203,10,419,6,"_this"],[203,15,419,6],[203,16,419,11,"handleRelease"],[203,29,419,24],[203,30,419,25],[204,12,419,27,"nativeEvent"],[205,10,419,39],[205,11,419,40],[205,12,419,41],[206,8,420,4],[206,9,420,5],[206,15,420,11],[206,19,420,15,"nativeEvent"],[206,30,420,26],[206,31,420,27,"state"],[206,36,420,32],[206,41,420,37,"State"],[206,47,420,42],[206,48,420,42,"State"],[206,53,420,42],[206,54,420,43,"ACTIVE"],[206,60,420,49],[206,62,420,51],[207,10,421,6,"_this"],[207,15,421,6],[207,16,421,11,"emitStateChanged"],[207,32,421,27],[207,33,421,28,"DRAGGING"],[207,41,421,36],[207,43,421,38],[207,48,421,43],[207,49,421,44],[208,10,422,6,"_this"],[208,15,422,6],[208,16,422,11,"setState"],[208,24,422,19],[208,25,422,20],[209,12,422,22,"drawerState"],[209,23,422,33],[209,25,422,35,"DRAGGING"],[210,10,422,44],[210,11,422,45],[210,12,422,46],[211,10,423,6],[211,14,423,10,"_this"],[211,19,423,10],[211,20,423,15,"props"],[211,25,423,20],[211,26,423,21,"keyboardDismissMode"],[211,45,423,40],[211,50,423,45],[211,59,423,54],[211,61,423,56],[212,12,424,8,"Keyboard"],[212,24,424,16],[212,25,424,16,"Keyboard"],[212,33,424,16],[212,34,424,17,"dismiss"],[212,41,424,24],[212,42,424,25],[212,43,424,26],[213,10,425,6],[214,10,426,6],[214,14,426,10,"_this"],[214,19,426,10],[214,20,426,15,"props"],[214,25,426,20],[214,26,426,21,"hideStatusBar"],[214,39,426,34],[214,41,426,36],[215,12,427,8,"StatusBar"],[215,24,427,17],[215,25,427,17,"StatusBar"],[215,34,427,17],[215,35,427,18,"setHidden"],[215,44,427,27],[215,45,427,28],[215,49,427,32],[215,51,427,34,"_this"],[215,56,427,34],[215,57,427,39,"props"],[215,62,427,44],[215,63,427,45,"statusBarAnimation"],[215,81,427,63],[215,85,427,67],[215,92,427,74],[215,93,427,75],[216,10,428,6],[217,8,429,4],[218,6,430,2],[218,7,430,3],[219,6,430,3,"_this"],[219,11,430,3],[219,12,432,10,"onTapHandlerStateChange"],[219,35,432,33],[219,38,432,36,"_ref3"],[219,43,432,36],[219,47,434,64],[220,8,434,64],[220,12,433,4,"nativeEvent"],[220,23,433,15],[220,26,433,15,"_ref3"],[220,31,433,15],[220,32,433,4,"nativeEvent"],[220,43,433,15],[221,8,435,4],[221,12,436,6,"_this"],[221,17,436,6],[221,18,436,11,"drawerShown"],[221,29,436,22],[221,33,437,6,"nativeEvent"],[221,44,437,17],[221,45,437,18,"oldState"],[221,53,437,26],[221,58,437,31,"State"],[221,64,437,36],[221,65,437,36,"State"],[221,70,437,36],[221,71,437,37,"ACTIVE"],[221,77,437,43],[221,81,438,6,"_this"],[221,86,438,6],[221,87,438,11,"props"],[221,92,438,16],[221,93,438,17,"drawerLockMode"],[221,107,438,31],[221,112,438,36],[221,125,438,49],[221,127,439,6],[222,10,440,6,"_this"],[222,15,440,6],[222,16,440,11,"closeDrawer"],[222,27,440,22],[222,28,440,23],[222,29,440,24],[223,8,441,4],[224,6,442,2],[224,7,442,3],[225,6,442,3,"_this"],[225,11,442,3],[225,12,444,10,"handleRelease"],[225,25,444,23],[225,28,444,26,"_ref4"],[225,33,444,26],[225,37,446,64],[226,8,446,64],[226,12,445,4,"nativeEvent"],[226,23,445,15],[226,26,445,15,"_ref4"],[226,31,445,15],[226,32,445,4,"nativeEvent"],[226,43,445,15],[227,8,447,4],[227,12,447,4,"_this$props"],[227,23,447,4],[227,26,447,56,"_this"],[227,31,447,56],[227,32,447,61,"props"],[227,37,447,66],[228,10,447,12,"drawerWidth"],[228,21,447,23],[228,24,447,23,"_this$props"],[228,35,447,23],[228,36,447,12,"drawerWidth"],[228,47,447,23],[229,10,447,25,"drawerPosition"],[229,24,447,39],[229,27,447,39,"_this$props"],[229,38,447,39],[229,39,447,25,"drawerPosition"],[229,53,447,39],[230,10,447,41,"drawerType"],[230,20,447,51],[230,23,447,51,"_this$props"],[230,34,447,51],[230,35,447,41,"drawerType"],[230,45,447,51],[231,8,448,4],[231,12,448,12,"containerWidth"],[231,26,448,26],[231,29,448,31,"_this"],[231,34,448,31],[231,35,448,36,"state"],[231,40,448,41],[231,41,448,12,"containerWidth"],[231,55,448,26],[232,8,449,4],[232,12,449,24,"dragX"],[232,17,449,29],[232,20,449,56,"nativeEvent"],[232,31,449,67],[232,32,449,10,"translationX"],[232,44,449,22],[233,10,449,31,"velocityX"],[233,19,449,40],[233,22,449,56,"nativeEvent"],[233,33,449,67],[233,34,449,31,"velocityX"],[233,43,449,40],[234,10,449,45,"touchX"],[234,16,449,51],[234,19,449,56,"nativeEvent"],[234,30,449,67],[234,31,449,42,"x"],[234,32,449,43],[235,8,451,4],[235,12,451,8,"drawerPosition"],[235,26,451,22],[235,31,451,27],[235,37,451,33],[235,39,451,35],[236,10,452,6],[237,10,453,6],[238,10,454,6,"dragX"],[238,15,454,11],[238,18,454,14],[238,19,454,15,"dragX"],[238,24,454,20],[239,10,455,6,"touchX"],[239,16,455,12],[239,19,455,15,"containerWidth"],[239,33,455,29],[239,36,455,32,"touchX"],[239,42,455,38],[240,10,456,6,"velocityX"],[240,19,456,15],[240,22,456,18],[240,23,456,19,"velocityX"],[240,32,456,28],[241,8,457,4],[242,8,459,4],[242,12,459,10,"gestureStartX"],[242,25,459,23],[242,28,459,26,"touchX"],[242,34,459,32],[242,37,459,35,"dragX"],[242,42,459,40],[243,8,460,4],[243,12,460,8,"dragOffsetBasedOnStart"],[243,34,460,30],[243,37,460,33],[243,38,460,34],[244,8,462,4],[244,12,462,8,"drawerType"],[244,22,462,18],[244,27,462,23],[244,34,462,30],[244,36,462,32],[245,10,463,6,"dragOffsetBasedOnStart"],[245,32,463,28],[245,35,464,8,"gestureStartX"],[245,48,464,21],[245,51,464,24,"drawerWidth"],[245,62,464,36],[245,65,464,39,"gestureStartX"],[245,78,464,52],[245,81,464,55,"drawerWidth"],[245,92,464,67],[245,95,464,70],[245,96,464,71],[246,8,465,4],[247,8,467,4],[247,12,467,10,"startOffsetX"],[247,24,467,22],[247,27,468,6,"dragX"],[247,32,468,11],[247,35,468,14,"dragOffsetBasedOnStart"],[247,57,468,36],[247,61,468,40,"_this"],[247,66,468,40],[247,67,468,45,"drawerShown"],[247,78,468,56],[247,81,468,59,"drawerWidth"],[247,92,468,70],[247,95,468,74],[247,96,468,75],[247,97,468,76],[248,8,469,4],[248,12,469,10,"projOffsetX"],[248,23,469,21],[248,26,469,24,"startOffsetX"],[248,38,469,36],[248,41,469,39,"DRAG_TOSS"],[248,50,469,48],[248,53,469,51,"velocityX"],[248,62,469,60],[249,8,471,4],[249,12,471,10,"shouldOpen"],[249,22,471,20],[249,25,471,23,"projOffsetX"],[249,36,471,34],[249,39,471,37,"drawerWidth"],[249,50,471,48],[249,53,471,52],[249,54,471,53],[250,8,473,4],[250,12,473,8,"shouldOpen"],[250,22,473,18],[250,24,473,20],[251,10,474,6,"_this"],[251,15,474,6],[251,16,474,11,"animateDrawer"],[251,29,474,24],[251,30,474,25,"startOffsetX"],[251,42,474,37],[251,44,474,39,"drawerWidth"],[251,55,474,50],[251,57,474,53,"velocityX"],[251,66,474,62],[251,67,474,63],[252,8,475,4],[252,9,475,5],[252,15,475,11],[253,10,476,6,"_this"],[253,15,476,6],[253,16,476,11,"animateDrawer"],[253,29,476,24],[253,30,476,25,"startOffsetX"],[253,42,476,37],[253,44,476,39],[253,45,476,40],[253,47,476,42,"velocityX"],[253,56,476,51],[253,57,476,52],[254,8,477,4],[255,6,478,2],[255,7,478,3],[256,6,478,3,"_this"],[256,11,478,3],[256,12,480,10,"updateShowing"],[256,25,480,23],[256,28,480,27,"showing"],[256,35,480,43],[256,39,480,48],[257,8,481,4,"_this"],[257,13,481,4],[257,14,481,9,"drawerShown"],[257,25,481,20],[257,28,481,23,"showing"],[257,35,481,30],[258,8,482,4,"_this"],[258,13,482,4],[258,14,482,9,"accessibilityIsModalView"],[258,38,482,33],[258,39,482,34,"current"],[258,46,482,41],[258,48,482,43,"setNativeProps"],[258,62,482,57],[258,63,482,58],[259,10,483,6,"accessibilityViewIsModal"],[259,34,483,30],[259,36,483,32,"showing"],[260,8,484,4],[260,9,484,5],[260,10,484,6],[261,8,485,4,"_this"],[261,13,485,4],[261,14,485,9,"pointerEventsView"],[261,31,485,26],[261,32,485,27,"current"],[261,39,485,34],[261,41,485,36,"setNativeProps"],[261,55,485,50],[261,56,485,51],[262,10,486,6,"pointerEvents"],[262,23,486,19],[262,25,486,21,"showing"],[262,32,486,28],[262,35,486,31],[262,41,486,37],[262,44,486,40],[263,8,487,4],[263,9,487,5],[263,10,487,6],[264,8,488,4],[264,12,488,4,"_this$props2"],[264,24,488,4],[264,27,488,60,"_this"],[264,32,488,60],[264,33,488,65,"props"],[264,38,488,70],[265,10,488,12,"drawerPosition"],[265,24,488,26],[265,27,488,26,"_this$props2"],[265,39,488,26],[265,40,488,12,"drawerPosition"],[265,54,488,26],[266,10,488,28,"minSwipeDistance"],[266,26,488,44],[266,29,488,44,"_this$props2"],[266,41,488,44],[266,42,488,28,"minSwipeDistance"],[266,58,488,44],[267,10,488,46,"edgeWidth"],[267,19,488,55],[267,22,488,55,"_this$props2"],[267,34,488,55],[267,35,488,46,"edgeWidth"],[267,44,488,55],[268,8,489,4],[268,12,489,10,"fromLeft"],[268,20,489,18],[268,23,489,21,"drawerPosition"],[268,37,489,35],[268,42,489,40],[268,48,489,46],[269,8,490,4],[270,8,491,4],[271,8,492,4],[272,8,493,4],[272,12,493,10,"gestureOrientation"],[272,30,493,28],[272,33,494,6],[272,34,494,7,"fromLeft"],[272,42,494,15],[272,45,494,18],[272,46,494,19],[272,51,494,24],[272,56,494,29,"_this"],[272,61,494,29],[272,62,494,34,"drawerShown"],[272,73,494,45],[272,81,494,53],[272,82,494,54],[272,83,494,55],[273,8,495,4],[274,8,496,4],[275,8,497,4],[276,8,498,4],[276,12,498,10,"hitSlop"],[276,19,498,17],[276,22,498,20,"fromLeft"],[276,30,498,28],[276,33,499,8],[277,10,499,10,"left"],[277,14,499,14],[277,16,499,16],[277,17,499,17],[278,10,499,19,"width"],[278,15,499,24],[278,17,499,26,"showing"],[278,24,499,33],[278,27,499,36,"undefined"],[278,36,499,45],[278,39,499,48,"edgeWidth"],[279,8,499,58],[279,9,499,59],[279,12,500,8],[280,10,500,10,"right"],[280,15,500,15],[280,17,500,17],[280,18,500,18],[281,10,500,20,"width"],[281,15,500,25],[281,17,500,27,"showing"],[281,24,500,34],[281,27,500,37,"undefined"],[281,36,500,46],[281,39,500,49,"edgeWidth"],[282,8,500,59],[282,9,500,60],[283,8,501,4],[284,8,502,4,"_this"],[284,13,502,4],[284,14,502,9,"panGestureHandler"],[284,31,502,26],[284,32,502,27,"current"],[284,39,502,34],[284,41,502,36,"setNativeProps"],[284,55,502,50],[284,56,502,51],[285,10,503,6,"hitSlop"],[285,17,503,13],[286,10,504,6,"activeOffsetX"],[286,23,504,19],[286,25,504,21,"gestureOrientation"],[286,43,504,39],[286,46,504,42,"minSwipeDistance"],[287,8,505,4],[287,9,505,5],[287,10,505,6],[288,6,506,2],[288,7,506,3],[289,6,506,3,"_this"],[289,11,506,3],[289,12,508,10,"animateDrawer"],[289,25,508,23],[289,28,508,26],[289,29,509,4,"fromValue"],[289,38,509,40],[289,40,510,4,"toValue"],[289,47,510,19],[289,49,511,4,"velocity"],[289,57,511,20],[289,59,512,4,"speed"],[289,64,512,18],[289,69,513,7],[290,8,514,4,"_this"],[290,13,514,4],[290,14,514,9,"state"],[290,19,514,14],[290,20,514,15,"dragX"],[290,25,514,20],[290,26,514,21,"setValue"],[290,34,514,29],[290,35,514,30],[290,36,514,31],[290,37,514,32],[291,8,515,4,"_this"],[291,13,515,4],[291,14,515,9,"state"],[291,19,515,14],[291,20,515,15,"touchX"],[291,26,515,21],[291,27,515,22,"setValue"],[291,35,515,30],[291,36,516,6,"_this"],[291,41,516,6],[291,42,516,11,"props"],[291,47,516,16],[291,48,516,17,"drawerPosition"],[291,62,516,31],[291,67,516,36],[291,73,516,42],[291,76,516,45],[291,77,516,46],[291,80,516,49,"_this"],[291,85,516,49],[291,86,516,54,"state"],[291,91,516,59],[291,92,516,60,"containerWidth"],[291,106,517,4],[291,107,517,5],[292,8,519,4],[292,12,519,8,"fromValue"],[292,21,519,17],[292,25,519,21],[292,29,519,25],[292,31,519,27],[293,10,520,6],[293,14,520,10,"nextFramePosition"],[293,31,520,27],[293,34,520,30,"fromValue"],[293,43,520,39],[294,10,521,6],[294,14,521,10,"_this"],[294,19,521,10],[294,20,521,15,"props"],[294,25,521,20],[294,26,521,21,"useNativeAnimations"],[294,45,521,40],[294,47,521,42],[295,12,522,8],[296,12,523,8],[297,12,524,8],[298,12,525,8],[299,12,526,8],[299,16,526,12,"fromValue"],[299,25,526,21],[299,28,526,24,"toValue"],[299,35,526,31],[299,39,526,35,"velocity"],[299,47,526,43],[299,50,526,46],[299,51,526,47],[299,53,526,49],[300,14,527,10,"nextFramePosition"],[300,31,527,27],[300,34,527,30,"Math"],[300,38,527,34],[300,39,527,35,"min"],[300,42,527,38],[300,43,527,39,"fromValue"],[300,52,527,48],[300,55,527,51,"velocity"],[300,63,527,59],[300,66,527,62],[300,70,527,66],[300,72,527,68,"toValue"],[300,79,527,75],[300,80,527,76],[301,12,528,8],[301,13,528,9],[301,19,528,15],[301,23,528,19,"fromValue"],[301,32,528,28],[301,35,528,31,"toValue"],[301,42,528,38],[301,46,528,42,"velocity"],[301,54,528,50],[301,57,528,53],[301,58,528,54],[301,60,528,56],[302,14,529,10,"nextFramePosition"],[302,31,529,27],[302,34,529,30,"Math"],[302,38,529,34],[302,39,529,35,"max"],[302,42,529,38],[302,43,529,39,"fromValue"],[302,52,529,48],[302,55,529,51,"velocity"],[302,63,529,59],[302,66,529,62],[302,70,529,66],[302,72,529,68,"toValue"],[302,79,529,75],[302,80,529,76],[303,12,530,8],[304,10,531,6],[305,10,532,6,"_this"],[305,15,532,6],[305,16,532,11,"state"],[305,21,532,16],[305,22,532,17,"drawerTranslation"],[305,39,532,34],[305,40,532,35,"setValue"],[305,48,532,43],[305,49,532,44,"nextFramePosition"],[305,66,532,61],[305,67,532,62],[306,8,533,4],[307,8,535,4],[307,12,535,10,"willShow"],[307,20,535,18],[307,23,535,21,"toValue"],[307,30,535,28],[307,35,535,33],[307,36,535,34],[308,8,536,4,"_this"],[308,13,536,4],[308,14,536,9,"updateShowing"],[308,27,536,22],[308,28,536,23,"willShow"],[308,36,536,31],[308,37,536,32],[309,8,537,4,"_this"],[309,13,537,4],[309,14,537,9,"emitStateChanged"],[309,30,537,25],[309,31,537,26,"SETTLING"],[309,39,537,34],[309,41,537,36,"willShow"],[309,49,537,44],[309,50,537,45],[310,8,538,4,"_this"],[310,13,538,4],[310,14,538,9,"setState"],[310,22,538,17],[310,23,538,18],[311,10,538,20,"drawerState"],[311,21,538,31],[311,23,538,33,"SETTLING"],[312,8,538,42],[312,9,538,43],[312,10,538,44],[313,8,539,4],[313,12,539,8,"_this"],[313,17,539,8],[313,18,539,13,"props"],[313,23,539,18],[313,24,539,19,"hideStatusBar"],[313,37,539,32],[313,39,539,34],[314,10,540,6,"StatusBar"],[314,22,540,15],[314,23,540,15,"StatusBar"],[314,32,540,15],[314,33,540,16,"setHidden"],[314,42,540,25],[314,43,540,26,"willShow"],[314,51,540,34],[314,53,540,36,"_this"],[314,58,540,36],[314,59,540,41,"props"],[314,64,540,46],[314,65,540,47,"statusBarAnimation"],[314,83,540,65],[314,87,540,69],[314,94,540,76],[314,95,540,77],[315,8,541,4],[316,8,542,4,"Animated"],[316,20,542,12],[316,21,542,12,"Animated"],[316,29,542,12],[316,30,542,13,"spring"],[316,36,542,19],[316,37,542,20,"_this"],[316,42,542,20],[316,43,542,25,"state"],[316,48,542,30],[316,49,542,31,"drawerTranslation"],[316,66,542,48],[316,68,542,50],[317,10,543,6,"velocity"],[317,18,543,14],[318,10,544,6,"bounciness"],[318,20,544,16],[318,22,544,18],[318,23,544,19],[319,10,545,6,"toValue"],[319,17,545,13],[320,10,546,6,"useNativeDriver"],[320,25,546,21],[320,27,546,23,"_this"],[320,32,546,23],[320,33,546,28,"props"],[320,38,546,33],[320,39,546,34,"useNativeAnimations"],[320,58,546,54],[321,10,547,6,"speed"],[321,15,547,11],[321,17,547,13,"speed"],[321,22,547,18],[321,26,547,22,"undefined"],[322,8,548,4],[322,9,548,5],[322,10,548,6],[322,11,548,7,"start"],[322,16,548,12],[322,17,548,13,"_ref5"],[322,22,548,13],[322,26,548,31],[323,10,548,31],[323,14,548,16,"finished"],[323,22,548,24],[323,25,548,24,"_ref5"],[323,30,548,24],[323,31,548,16,"finished"],[323,39,548,24],[324,10,549,6],[324,14,549,10,"finished"],[324,22,549,18],[324,24,549,20],[325,12,550,8,"_this"],[325,17,550,8],[325,18,550,13,"emitStateChanged"],[325,34,550,29],[325,35,550,30,"IDLE"],[325,39,550,34],[325,41,550,36,"willShow"],[325,49,550,44],[325,50,550,45],[326,12,551,8,"_this"],[326,17,551,8],[326,18,551,13,"setState"],[326,26,551,21],[326,27,551,22],[327,14,551,24,"drawerOpened"],[327,26,551,36],[327,28,551,38,"willShow"],[328,12,551,47],[328,13,551,48],[328,14,551,49],[329,12,552,8],[329,16,552,12,"_this"],[329,21,552,12],[329,22,552,17,"state"],[329,27,552,22],[329,28,552,23,"drawerState"],[329,39,552,34],[329,44,552,39,"DRAGGING"],[329,52,552,47],[329,54,552,49],[330,14,553,10],[331,14,554,10],[332,14,555,10,"_this"],[332,19,555,10],[332,20,555,15,"setState"],[332,28,555,23],[332,29,555,24],[333,16,555,26,"drawerState"],[333,27,555,37],[333,29,555,39,"IDLE"],[334,14,555,44],[334,15,555,45],[334,16,555,46],[335,12,556,8],[336,12,557,8],[336,16,557,12,"willShow"],[336,24,557,20],[336,26,557,22],[337,14,558,10,"_this"],[337,19,558,10],[337,20,558,15,"props"],[337,25,558,20],[337,26,558,21,"onDrawerOpen"],[337,38,558,33],[337,41,558,36],[337,42,558,37],[338,12,559,8],[338,13,559,9],[338,19,559,15],[339,14,560,10,"_this"],[339,19,560,10],[339,20,560,15,"props"],[339,25,560,20],[339,26,560,21,"onDrawerClose"],[339,39,560,34],[339,42,560,37],[339,43,560,38],[340,12,561,8],[341,10,562,6],[342,8,563,4],[342,9,563,5],[342,10,563,6],[343,6,564,2],[343,7,564,3],[344,6,566,2],[345,6,566,2,"_this"],[345,11,566,2],[345,12,567,2,"openDrawer"],[345,22,567,12],[345,25,567,15],[345,37,567,55],[346,8,567,55],[346,12,567,16,"options"],[346,19,567,45],[346,22,567,45,"arguments"],[346,31,567,45],[346,32,567,45,"length"],[346,38,567,45],[346,46,567,45,"arguments"],[346,55,567,45],[346,63,567,45,"undefined"],[346,72,567,45],[346,75,567,45,"arguments"],[346,84,567,45],[346,90,567,48],[346,91,567,49],[346,92,567,50],[347,8,568,4,"_this"],[347,13,568,4],[347,14,568,9,"animateDrawer"],[347,27,568,22],[348,8,569,6],[349,8,570,6,"undefined"],[349,17,570,15],[349,19,571,6,"_this"],[349,24,571,6],[349,25,571,11,"props"],[349,30,571,16],[349,31,571,17,"drawerWidth"],[349,42,571,28],[349,44,572,6,"options"],[349,51,572,13],[349,52,572,14,"velocity"],[349,60,572,22],[349,63,572,25,"options"],[349,70,572,32],[349,71,572,33,"velocity"],[349,79,572,41],[349,82,572,44],[349,83,572,45],[349,85,573,6,"options"],[349,92,573,13],[349,93,573,14,"speed"],[349,98,574,4],[349,99,574,5],[351,8,576,4],[352,8,577,4],[353,8,578,4,"_this"],[353,13,578,4],[353,14,578,9,"forceUpdate"],[353,25,578,20],[353,26,578,21],[353,27,578,22],[354,6,579,2],[354,7,579,3],[355,6,579,3,"_this"],[355,11,579,3],[355,12,581,2,"closeDrawer"],[355,23,581,13],[355,26,581,16],[355,38,581,56],[356,8,581,56],[356,12,581,17,"options"],[356,19,581,46],[356,22,581,46,"arguments"],[356,31,581,46],[356,32,581,46,"length"],[356,38,581,46],[356,46,581,46,"arguments"],[356,55,581,46],[356,63,581,46,"undefined"],[356,72,581,46],[356,75,581,46,"arguments"],[356,84,581,46],[356,90,581,49],[356,91,581,50],[356,92,581,51],[357,8,582,4],[358,8,583,4,"_this"],[358,13,583,4],[358,14,583,9,"animateDrawer"],[358,27,583,22],[358,28,584,6,"undefined"],[358,37,584,15],[358,39,585,6],[358,40,585,7],[358,42,586,6,"options"],[358,49,586,13],[358,50,586,14,"velocity"],[358,58,586,22],[358,61,586,25,"options"],[358,68,586,32],[358,69,586,33,"velocity"],[358,77,586,41],[358,80,586,44],[358,81,586,45],[358,83,587,6,"options"],[358,90,587,13],[358,91,587,14,"speed"],[358,96,588,4],[358,97,588,5],[360,8,590,4],[361,8,591,4],[362,8,592,4,"_this"],[362,13,592,4],[362,14,592,9,"forceUpdate"],[362,25,592,20],[362,26,592,21],[362,27,592,22],[363,6,593,2],[363,7,593,3],[364,6,593,3,"_this"],[364,11,593,3],[364,12,595,10,"renderOverlay"],[364,25,595,23],[364,28,595,26],[364,34,595,32],[365,8,596,4],[366,8,597,4],[366,12,597,4,"invariant"],[366,21,597,13],[366,22,597,13,"default"],[366,29,597,13],[366,31,597,14,"_this"],[366,36,597,14],[366,37,597,19,"openValue"],[366,46,597,28],[366,48,597,30],[366,63,597,45],[366,64,597,46],[367,8,598,4],[367,12,598,8,"overlayOpacity"],[367,26,598,22],[368,8,600,4],[368,12,600,8,"_this"],[368,17,600,8],[368,18,600,13,"state"],[368,23,600,18],[368,24,600,19,"drawerState"],[368,35,600,30],[368,40,600,35,"IDLE"],[368,44,600,39],[368,46,600,41],[369,10,601,6,"overlayOpacity"],[369,24,601,20],[369,27,601,23,"_this"],[369,32,601,23],[369,33,601,28,"openValue"],[369,42,601,37],[370,8,602,4],[370,9,602,5],[370,15,602,11],[371,10,603,6,"overlayOpacity"],[371,24,603,20],[371,27,603,23,"_this"],[371,32,603,23],[371,33,603,28,"state"],[371,38,603,33],[371,39,603,34,"drawerOpened"],[371,51,603,46],[371,54,603,49],[371,55,603,50],[371,58,603,53],[371,59,603,54],[372,8,604,4],[373,8,606,4],[373,12,606,10,"dynamicOverlayStyles"],[373,32,606,30],[373,35,606,33],[374,10,607,6,"opacity"],[374,17,607,13],[374,19,607,15,"overlayOpacity"],[374,33,607,29],[375,10,608,6,"backgroundColor"],[375,25,608,21],[375,27,608,23,"_this"],[375,32,608,23],[375,33,608,28,"props"],[375,38,608,33],[375,39,608,34,"overlayColor"],[376,8,609,4],[376,9,609,5],[377,8,611,4],[377,28,612,6],[377,32,612,6,"_reactJsxRuntime"],[377,48,612,6],[377,49,612,6,"jsx"],[377,52,612,6],[377,54,612,7,"_handlersTapGestureHandler"],[377,80,612,24],[377,81,612,24,"TapGestureHandler"],[377,98,612,24],[378,10,612,25,"onHandlerStateChange"],[378,30,612,45],[378,32,612,47,"_this"],[378,37,612,47],[378,38,612,52,"onTapHandlerStateChange"],[378,61,612,76],[379,10,612,76,"children"],[379,18,612,76],[379,33,613,8],[379,37,613,8,"_reactJsxRuntime"],[379,53,613,8],[379,54,613,8,"jsx"],[379,57,613,8],[379,59,613,9,"_reactNative"],[379,71,613,17],[379,72,613,17,"Animated"],[379,80,613,17],[379,81,613,18,"View"],[379,85,613,22],[380,12,614,10,"pointerEvents"],[380,25,614,23],[380,27,614,25,"_this"],[380,32,614,25],[380,33,614,30,"drawerShown"],[380,44,614,41],[380,47,614,44],[380,53,614,50],[380,56,614,53],[380,62,614,60],[381,12,615,10,"ref"],[381,15,615,13],[381,17,615,15,"_this"],[381,22,615,15],[381,23,615,20,"pointerEventsView"],[381,40,615,38],[382,12,616,10,"style"],[382,17,616,15],[382,19,616,17],[382,20,616,18,"styles"],[382,26,616,24],[382,27,616,25,"overlay"],[382,34,616,32],[382,36,616,34,"dynamicOverlayStyles"],[382,56,616,54],[383,10,616,56],[383,11,617,9],[384,8,617,10],[384,9,618,25],[384,10,618,26],[385,6,620,2],[385,7,620,3],[386,6,620,3,"_this"],[386,11,620,3],[386,12,622,10,"renderDrawer"],[386,24,622,22],[386,27,622,25],[386,33,622,31],[387,8,623,4],[387,12,623,4,"_this$props3"],[387,24,623,4],[387,27,630,8,"_this"],[387,32,630,8],[387,33,630,13,"props"],[387,38,630,18],[388,10,624,6,"drawerBackgroundColor"],[388,31,624,27],[388,34,624,27,"_this$props3"],[388,46,624,27],[388,47,624,6,"drawerBackgroundColor"],[388,68,624,27],[389,10,625,6,"drawerWidth"],[389,21,625,17],[389,24,625,17,"_this$props3"],[389,36,625,17],[389,37,625,6,"drawerWidth"],[389,48,625,17],[390,10,626,6,"drawerPosition"],[390,24,626,20],[390,27,626,20,"_this$props3"],[390,39,626,20],[390,40,626,6,"drawerPosition"],[390,54,626,20],[391,10,627,6,"drawerType"],[391,20,627,16],[391,23,627,16,"_this$props3"],[391,35,627,16],[391,36,627,6,"drawerType"],[391,46,627,16],[392,10,628,6,"drawerContainerStyle"],[392,30,628,26],[392,33,628,26,"_this$props3"],[392,45,628,26],[392,46,628,6,"drawerContainerStyle"],[392,66,628,26],[393,10,629,6,"contentContainerStyle"],[393,31,629,27],[393,34,629,27,"_this$props3"],[393,46,629,27],[393,47,629,6,"contentContainerStyle"],[393,68,629,27],[394,8,632,4],[394,12,632,10,"fromLeft"],[394,20,632,18],[394,23,632,21,"drawerPosition"],[394,37,632,35],[394,42,632,40],[394,48,632,46],[395,8,633,4],[395,12,633,10,"drawerSlide"],[395,23,633,21],[395,26,633,24,"drawerType"],[395,36,633,34],[395,41,633,39],[395,47,633,45],[396,8,634,4],[396,12,634,10,"containerSlide"],[396,26,634,24],[396,29,634,27,"drawerType"],[396,39,634,37],[396,44,634,42],[396,51,634,49],[398,8,636,4],[399,8,637,4],[400,8,638,4],[401,8,639,4],[402,8,640,4],[402,12,640,10,"reverseContentDirection"],[402,35,640,33],[402,38,640,36,"I18nManager"],[402,50,640,47],[402,51,640,47,"I18nManager"],[402,62,640,47],[402,63,640,48,"isRTL"],[402,68,640,53],[402,71,640,56,"fromLeft"],[402,79,640,64],[402,82,640,67],[402,83,640,68,"fromLeft"],[402,91,640,76],[403,8,642,4],[403,12,642,10,"dynamicDrawerStyles"],[403,31,642,29],[403,34,642,32],[404,10,643,6,"backgroundColor"],[404,25,643,21],[404,27,643,23,"drawerBackgroundColor"],[404,48,643,44],[405,10,644,6,"width"],[405,15,644,11],[405,17,644,13,"drawerWidth"],[406,8,645,4],[406,9,645,5],[407,8,646,4],[407,12,646,10,"openValue"],[407,21,646,19],[407,24,646,22,"_this"],[407,29,646,22],[407,30,646,27,"openValue"],[407,39,646,36],[408,8,647,4],[408,12,647,4,"invariant"],[408,21,647,13],[408,22,647,13,"default"],[408,29,647,13],[408,31,647,14,"openValue"],[408,40,647,23],[408,42,647,25],[408,57,647,40],[408,58,647,41],[409,8,649,4],[409,12,649,8,"containerStyles"],[409,27,649,23],[410,8,650,4],[410,12,650,8,"containerSlide"],[410,26,650,22],[410,28,650,24],[411,10,651,6],[411,14,651,12,"containerTranslateX"],[411,33,651,31],[411,36,651,34,"openValue"],[411,45,651,43],[411,46,651,44,"interpolate"],[411,57,651,55],[411,58,651,56],[412,12,652,8,"inputRange"],[412,22,652,18],[412,24,652,20],[412,25,652,21],[412,26,652,22],[412,28,652,24],[412,29,652,25],[412,30,652,26],[413,12,653,8,"outputRange"],[413,23,653,19],[413,25,653,21,"fromLeft"],[413,33,653,29],[413,36,653,32],[413,37,653,33],[413,38,653,34],[413,40,653,36,"drawerWidth"],[413,51,653,47],[413,52,653,49],[413,55,653,52],[413,56,653,53],[413,57,653,54],[413,59,653,56],[413,60,653,57,"drawerWidth"],[413,71,653,69],[413,72,653,70],[414,12,654,8,"extrapolate"],[414,23,654,19],[414,25,654,21],[415,10,655,6],[415,11,655,7],[415,12,655,8],[416,10,656,6,"containerStyles"],[416,25,656,21],[416,28,656,24],[417,12,657,8,"transform"],[417,21,657,17],[417,23,657,19],[417,24,657,20],[418,14,657,22,"translateX"],[418,24,657,32],[418,26,657,34,"containerTranslateX"],[419,12,657,54],[419,13,657,55],[420,10,658,6],[420,11,658,7],[421,8,659,4],[422,8,661,4],[422,12,661,8,"drawerTranslateX"],[422,28,661,56],[422,31,661,59],[422,32,661,60],[423,8,662,4],[423,12,662,8,"drawerSlide"],[423,23,662,19],[423,25,662,21],[424,10,663,6],[424,14,663,12,"closedDrawerOffset"],[424,32,663,30],[424,35,663,33,"fromLeft"],[424,43,663,41],[424,46,663,44],[424,47,663,45,"drawerWidth"],[424,58,663,57],[424,61,663,60,"drawerWidth"],[424,72,663,72],[425,10,664,6],[425,14,664,10,"_this"],[425,19,664,10],[425,20,664,15,"state"],[425,25,664,20],[425,26,664,21,"drawerState"],[425,37,664,32],[425,42,664,37,"IDLE"],[425,46,664,41],[425,48,664,43],[426,12,665,8,"drawerTranslateX"],[426,28,665,24],[426,31,665,27,"openValue"],[426,40,665,36],[426,41,665,37,"interpolate"],[426,52,665,48],[426,53,665,49],[427,14,666,10,"inputRange"],[427,24,666,20],[427,26,666,22],[427,27,666,23],[427,28,666,24],[427,30,666,26],[427,31,666,27],[427,32,666,28],[428,14,667,10,"outputRange"],[428,25,667,21],[428,27,667,23],[428,28,667,24,"closedDrawerOffset"],[428,46,667,42],[428,48,667,44],[428,49,667,45],[428,50,667,46],[429,14,668,10,"extrapolate"],[429,25,668,21],[429,27,668,23],[430,12,669,8],[430,13,669,9],[430,14,669,10],[431,10,670,6],[431,11,670,7],[431,17,670,13],[432,12,671,8,"drawerTranslateX"],[432,28,671,24],[432,31,671,27,"_this"],[432,36,671,27],[432,37,671,32,"state"],[432,42,671,37],[432,43,671,38,"drawerOpened"],[432,55,671,50],[432,58,671,53],[432,59,671,54],[432,62,671,57,"closedDrawerOffset"],[432,80,671,75],[433,10,672,6],[434,8,673,4],[435,8,674,4],[435,12,674,10,"drawerStyles"],[435,24,677,5],[435,27,677,8],[436,10,678,6,"transform"],[436,19,678,15],[436,21,678,17],[436,22,678,18],[437,12,678,20,"translateX"],[437,22,678,30],[437,24,678,32,"drawerTranslateX"],[438,10,678,49],[438,11,678,50],[438,12,678,51],[439,10,679,6,"flexDirection"],[439,23,679,19],[439,25,679,21,"reverseContentDirection"],[439,48,679,44],[439,51,679,47],[439,64,679,60],[439,67,679,63],[440,8,680,4],[440,9,680,5],[441,8,682,4],[441,28,683,6],[441,32,683,6,"_reactJsxRuntime"],[441,48,683,6],[441,49,683,6,"jsxs"],[441,53,683,6],[441,55,683,7,"_reactNative"],[441,67,683,15],[441,68,683,15,"Animated"],[441,76,683,15],[441,77,683,16,"View"],[441,81,683,20],[442,10,683,21,"style"],[442,15,683,26],[442,17,683,28,"styles"],[442,23,683,34],[442,24,683,35,"main"],[442,28,683,40],[443,10,683,41,"onLayout"],[443,18,683,49],[443,20,683,51,"_this"],[443,25,683,51],[443,26,683,56,"handleContainerLayout"],[443,47,683,78],[444,10,683,78,"children"],[444,18,683,78],[444,34,684,8],[444,38,684,8,"_reactJsxRuntime"],[444,54,684,8],[444,55,684,8,"jsxs"],[444,59,684,8],[444,61,684,9,"_reactNative"],[444,73,684,17],[444,74,684,17,"Animated"],[444,82,684,17],[444,83,684,18,"View"],[444,87,684,22],[445,12,685,10,"style"],[445,17,685,15],[445,19,685,17],[445,20,686,12,"drawerType"],[445,30,686,22],[445,35,686,27],[445,42,686,34],[445,45,687,16,"styles"],[445,51,687,22],[445,52,687,23,"containerOnBack"],[445,67,687,38],[445,70,688,16,"styles"],[445,76,688,22],[445,77,688,23,"containerInFront"],[445,93,688,39],[445,95,689,12,"containerStyles"],[445,110,689,27],[445,112,690,12,"contentContainerStyle"],[445,133,690,33],[445,134,691,12],[446,12,692,10,"importantForAccessibility"],[446,37,692,35],[446,39,693,12,"_this"],[446,44,693,12],[446,45,693,17,"drawerShown"],[446,56,693,28],[446,59,693,31],[446,80,693,52],[446,83,693,55],[446,88,694,11],[447,12,694,11,"children"],[447,20,694,11],[447,23,695,11],[447,30,695,18,"_this"],[447,35,695,18],[447,36,695,23,"props"],[447,41,695,28],[447,42,695,29,"children"],[447,50,695,37],[447,55,695,42],[447,65,695,52],[447,68,696,14,"_this"],[447,73,696,14],[447,74,696,19,"props"],[447,79,696,24],[447,80,696,25,"children"],[447,88,696,33],[447,89,696,34,"_this"],[447,94,696,34],[447,95,696,39,"openValue"],[447,104,696,48],[447,105,696,49],[447,108,697,14,"_this"],[447,113,697,14],[447,114,697,19,"props"],[447,119,697,24],[447,120,697,25,"children"],[447,128,697,33],[447,130,698,11,"_this"],[447,135,698,11],[447,136,698,16,"renderOverlay"],[447,149,698,29],[447,150,698,30],[447,151,698,31],[448,10,698,31],[448,11,699,23],[448,12,699,24],[448,27,700,8],[448,31,700,8,"_reactJsxRuntime"],[448,47,700,8],[448,48,700,8,"jsx"],[448,51,700,8],[448,53,700,9,"_reactNative"],[448,65,700,17],[448,66,700,17,"Animated"],[448,74,700,17],[448,75,700,18,"View"],[448,79,700,22],[449,12,701,10,"pointerEvents"],[449,25,701,23],[449,27,701,24],[449,37,701,34],[450,12,702,10,"ref"],[450,15,702,13],[450,17,702,15,"_this"],[450,22,702,15],[450,23,702,20,"accessibilityIsModalView"],[450,47,702,45],[451,12,703,10,"accessibilityViewIsModal"],[451,36,703,34],[451,38,703,36,"_this"],[451,43,703,36],[451,44,703,41,"drawerShown"],[451,55,703,53],[452,12,704,10,"style"],[452,17,704,15],[452,19,704,17],[452,20,704,18,"styles"],[452,26,704,24],[452,27,704,25,"drawerContainer"],[452,42,704,40],[452,44,704,42,"drawerStyles"],[452,56,704,54],[452,58,704,56,"drawerContainerStyle"],[452,78,704,76],[452,79,704,78],[453,12,704,78,"children"],[453,20,704,78],[453,35,705,10],[453,39,705,10,"_reactJsxRuntime"],[453,55,705,10],[453,56,705,10,"jsx"],[453,59,705,10],[453,61,705,11,"_reactNative"],[453,73,705,15],[453,74,705,15,"View"],[453,78,705,15],[454,14,705,16,"style"],[454,19,705,21],[454,21,705,23,"dynamicDrawerStyles"],[454,40,705,43],[455,14,705,43,"children"],[455,22,705,43],[455,24,706,13,"_this"],[455,29,706,13],[455,30,706,18,"props"],[455,35,706,23],[455,36,706,24,"renderNavigationView"],[455,56,706,44],[455,57,706,45,"_this"],[455,62,706,45],[455,63,706,50,"openValue"],[455,72,706,77],[456,12,706,78],[456,13,707,16],[457,10,707,17],[457,11,708,23],[457,12,708,24],[458,8,708,24],[458,9,709,21],[458,10,709,22],[459,6,711,2],[459,7,711,3],[460,6,711,3,"_this"],[460,11,711,3],[460,12,713,10,"setPanGestureRef"],[460,28,713,26],[460,31,713,30,"ref"],[460,34,713,52],[460,38,713,57],[461,8,714,4],[462,8,715,4],[463,8,717,6,"_this"],[463,13,717,6],[463,14,717,11,"panGestureHandler"],[463,31,717,28],[463,32,718,6,"current"],[463,39,718,13],[463,42,718,16,"ref"],[463,45,718,19],[464,8,719,4,"_this"],[464,13,719,4],[464,14,719,9,"props"],[464,19,719,14],[464,20,719,15,"onGestureRef"],[464,32,719,27],[464,35,719,30,"ref"],[464,38,719,33],[464,39,719,34],[465,6,720,2],[465,7,720,3],[466,6,250,4],[466,10,250,10,"dragX"],[466,16,250,15],[466,19,250,18],[466,23,250,22,"Animated"],[466,35,250,30],[466,36,250,30,"Animated"],[466,44,250,30],[466,45,250,31,"Value"],[466,50,250,36],[466,51,250,37],[466,52,250,38],[466,53,250,39],[467,6,251,4],[467,10,251,10,"touchX"],[467,17,251,16],[467,20,251,19],[467,24,251,23,"Animated"],[467,36,251,31],[467,37,251,31,"Animated"],[467,45,251,31],[467,46,251,32,"Value"],[467,51,251,37],[467,52,251,38],[467,53,251,39],[467,54,251,40],[468,6,252,4],[468,10,252,10,"drawerTranslation"],[468,28,252,27],[468,31,252,30],[468,35,252,34,"Animated"],[468,47,252,42],[468,48,252,42,"Animated"],[468,56,252,42],[468,57,252,43,"Value"],[468,62,252,48],[468,63,252,49],[468,64,252,50],[468,65,252,51],[469,6,254,4,"_this"],[469,11,254,4],[469,12,254,9,"state"],[469,17,254,14],[469,20,254,17],[470,8,255,6,"dragX"],[470,13,255,11],[470,15,255,6,"dragX"],[470,21,255,11],[471,8,256,6,"touchX"],[471,14,256,12],[471,16,256,6,"touchX"],[471,23,256,12],[472,8,257,6,"drawerTranslation"],[472,25,257,23],[472,27,257,6,"drawerTranslation"],[472,45,257,23],[473,8,258,6,"containerWidth"],[473,22,258,20],[473,24,258,22],[473,25,258,23],[474,8,259,6,"drawerState"],[474,19,259,17],[474,21,259,19,"IDLE"],[474,25,259,23],[475,8,260,6,"drawerOpened"],[475,20,260,18],[475,22,260,20],[476,6,261,4],[476,7,261,5],[477,6,263,4,"_this"],[477,11,263,4],[477,12,263,9,"updateAnimatedEvent"],[477,31,263,28],[477,32,263,29,"props"],[477,38,263,34],[477,40,263,36,"_this"],[477,45,263,36],[477,46,263,41,"state"],[477,51,263,46],[477,52,263,47],[478,6,263,48],[478,13,263,48,"_this"],[478,18,263,48],[479,4,264,2],[480,4,264,3],[480,8,264,3,"_inherits"],[480,17,264,3],[480,18,264,3,"default"],[480,25,264,3],[480,27,264,3,"DrawerLayout"],[480,39,264,3],[480,41,264,3,"_Component"],[480,51,264,3],[481,4,264,3],[481,15,264,3,"_createClass"],[481,27,264,3],[481,28,264,3,"default"],[481,35,264,3],[481,37,264,3,"DrawerLayout"],[481,49,264,3],[482,6,264,3,"key"],[482,9,264,3],[483,6,264,3,"value"],[483,11,264,3],[483,13,266,2],[483,22,266,2,"shouldComponentUpdate"],[483,43,266,23,"shouldComponentUpdate"],[483,44,266,24,"props"],[483,49,266,48],[483,51,266,50,"state"],[483,56,266,74],[483,58,266,76],[484,8,267,4],[484,12,268,6],[484,16,268,10],[484,17,268,11,"props"],[484,22,268,16],[484,23,268,17,"drawerPosition"],[484,37,268,31],[484,42,268,36,"props"],[484,47,268,41],[484,48,268,42,"drawerPosition"],[484,62,268,56],[484,66,269,6],[484,70,269,10],[484,71,269,11,"props"],[484,76,269,16],[484,77,269,17,"drawerWidth"],[484,88,269,28],[484,93,269,33,"props"],[484,98,269,38],[484,99,269,39,"drawerWidth"],[484,110,269,50],[484,114,270,6],[484,118,270,10],[484,119,270,11,"props"],[484,124,270,16],[484,125,270,17,"drawerType"],[484,135,270,27],[484,140,270,32,"props"],[484,145,270,37],[484,146,270,38,"drawerType"],[484,156,270,48],[484,160,271,6],[484,164,271,10],[484,165,271,11,"state"],[484,170,271,16],[484,171,271,17,"containerWidth"],[484,185,271,31],[484,190,271,36,"state"],[484,195,271,41],[484,196,271,42,"containerWidth"],[484,210,271,56],[484,212,272,6],[485,10,273,6],[485,14,273,10],[485,15,273,11,"updateAnimatedEvent"],[485,34,273,30],[485,35,273,31,"props"],[485,40,273,36],[485,42,273,38,"state"],[485,47,273,43],[485,48,273,44],[486,8,274,4],[487,8,276,4],[487,15,276,11],[487,19,276,15],[488,6,277,2],[489,4,277,3],[490,6,277,3,"key"],[490,9,277,3],[491,6,277,3,"value"],[491,11,277,3],[491,13,722,2],[491,22,722,2,"render"],[491,28,722,8,"render"],[491,29,722,8],[491,31,722,11],[492,8,723,4],[492,12,723,4,"_this$props4"],[492,24,723,4],[492,27,724,6],[492,31,724,10],[492,32,724,11,"props"],[492,37,724,16],[493,10,723,12,"drawerPosition"],[493,24,723,26],[493,27,723,26,"_this$props4"],[493,39,723,26],[493,40,723,12,"drawerPosition"],[493,54,723,26],[494,10,723,28,"drawerLockMode"],[494,24,723,42],[494,27,723,42,"_this$props4"],[494,39,723,42],[494,40,723,28,"drawerLockMode"],[494,54,723,42],[495,10,723,44,"edgeWidth"],[495,19,723,53],[495,22,723,53,"_this$props4"],[495,34,723,53],[495,35,723,44,"edgeWidth"],[495,44,723,53],[496,10,723,55,"minSwipeDistance"],[496,26,723,71],[496,29,723,71,"_this$props4"],[496,41,723,71],[496,42,723,55,"minSwipeDistance"],[496,58,723,71],[497,8,726,4],[497,12,726,10,"fromLeft"],[497,20,726,18],[497,23,726,21,"drawerPosition"],[497,37,726,35],[497,42,726,40],[497,48,726,46],[499,8,728,4],[500,8,729,4],[501,8,730,4],[502,8,731,4],[502,12,731,10,"gestureOrientation"],[502,30,731,28],[502,33,732,6],[502,34,732,7,"fromLeft"],[502,42,732,15],[502,45,732,18],[502,46,732,19],[502,51,732,24],[502,56,732,29],[502,60,732,33],[502,61,732,34,"drawerShown"],[502,72,732,45],[502,80,732,53],[502,81,732,54],[502,82,732,55],[504,8,734,4],[505,8,735,4],[506,8,736,4],[507,8,737,4],[507,12,737,10,"hitSlop"],[507,19,737,17],[507,22,737,20,"fromLeft"],[507,30,737,28],[507,33,738,8],[508,10,738,10,"left"],[508,14,738,14],[508,16,738,16],[508,17,738,17],[509,10,738,19,"width"],[509,15,738,24],[509,17,738,26],[509,21,738,30],[509,22,738,31,"drawerShown"],[509,33,738,42],[509,36,738,45,"undefined"],[509,45,738,54],[509,48,738,57,"edgeWidth"],[510,8,738,67],[510,9,738,68],[510,12,739,8],[511,10,739,10,"right"],[511,15,739,15],[511,17,739,17],[511,18,739,18],[512,10,739,20,"width"],[512,15,739,25],[512,17,739,27],[512,21,739,31],[512,22,739,32,"drawerShown"],[512,33,739,43],[512,36,739,46,"undefined"],[512,45,739,55],[512,48,739,58,"edgeWidth"],[513,8,739,68],[513,9,739,69],[514,8,741,4],[514,28,742,6],[514,32,742,6,"_reactJsxRuntime"],[514,48,742,6],[514,49,742,6,"jsx"],[514,52,742,6],[514,54,742,7,"_handlersPanGestureHandler"],[514,80,742,24],[514,81,742,24,"PanGestureHandler"],[514,98,742,24],[514,99,743,8],[515,8,743,8],[516,10,744,8,"userSelect"],[516,20,744,18],[516,22,744,20],[516,26,744,24],[516,27,744,25,"props"],[516,32,744,30],[516,33,744,31,"userSelect"],[516,43,744,42],[517,10,745,8,"activeCursor"],[517,22,745,20],[517,24,745,22],[517,28,745,26],[517,29,745,27,"props"],[517,34,745,32],[517,35,745,33,"activeCursor"],[517,47,745,46],[518,10,746,8,"mouseButton"],[518,21,746,19],[518,23,746,21],[518,27,746,25],[518,28,746,26,"props"],[518,33,746,31],[518,34,746,32,"mouseButton"],[518,45,746,44],[519,10,747,8,"enableContextMenu"],[519,27,747,25],[519,29,747,27],[519,33,747,31],[519,34,747,32,"props"],[519,39,747,37],[519,40,747,38,"enableContextMenu"],[519,57,747,56],[520,10,748,8,"ref"],[520,13,748,11],[520,15,748,13],[520,19,748,17],[520,20,748,18,"setPanGestureRef"],[520,36,748,35],[521,10,749,8,"hitSlop"],[521,17,749,15],[521,19,749,17,"hitSlop"],[521,26,749,25],[522,10,750,8,"activeOffsetX"],[522,23,750,21],[522,25,750,23,"gestureOrientation"],[522,43,750,41],[522,46,750,44,"minSwipeDistance"],[522,62,750,62],[523,10,751,8,"failOffsetY"],[523,21,751,19],[523,23,751,21],[523,29,751,27],[523,31,751,29],[523,32,751,31],[524,10,752,8,"onGestureEvent"],[524,24,752,22],[524,26,752,24],[524,30,752,28],[524,31,752,29,"onGestureEvent"],[524,45,752,44],[525,10,753,8,"onHandlerStateChange"],[525,30,753,28],[525,32,753,30],[525,36,753,34],[525,37,753,35,"openingHandlerStateChange"],[525,62,753,61],[526,10,754,8,"enableTrackpadTwoFingerGesture"],[526,40,754,38],[526,42,755,10],[526,46,755,14],[526,47,755,15,"props"],[526,52,755,20],[526,53,755,21,"enableTrackpadTwoFingerGesture"],[526,83,756,9],[527,10,757,8,"enabled"],[527,17,757,15],[527,19,758,10,"drawerLockMode"],[527,33,758,24],[527,38,758,29],[527,53,758,44],[527,57,758,48,"drawerLockMode"],[527,71,758,62],[527,76,758,67],[527,89,759,9],[528,10,759,9,"children"],[528,18,759,9],[528,20,760,9],[528,24,760,13],[528,25,760,14,"renderDrawer"],[528,37,760,26],[528,38,760,27],[529,8,760,28],[529,9,761,25],[529,10,761,26],[530,6,763,2],[531,4,763,3],[532,2,763,3],[532,4,231,42,"Component"],[532,10,231,51],[532,11,231,51,"Component"],[532,20,231,51],[533,2,231,21,"DrawerLayout"],[533,14,231,33],[533,15,235,9,"defaultProps"],[533,27,235,21],[533,30,235,24],[534,4,236,4,"drawerWidth"],[534,15,236,15],[534,17,236,17],[534,20,236,20],[535,4,237,4,"drawerPosition"],[535,18,237,18],[535,20,237,20],[535,26,237,26],[536,4,238,4,"useNativeAnimations"],[536,23,238,23],[536,25,238,25],[536,29,238,29],[537,4,239,4,"drawerType"],[537,14,239,14],[537,16,239,16],[537,23,239,23],[538,4,240,4,"edgeWidth"],[538,13,240,13],[538,15,240,15],[538,17,240,17],[539,4,241,4,"minSwipeDistance"],[539,20,241,20],[539,22,241,22],[539,23,241,23],[540,4,242,4,"overlayColor"],[540,16,242,16],[540,18,242,18],[540,38,242,38],[541,4,243,4,"drawerLockMode"],[541,18,243,18],[541,20,243,20],[541,30,243,30],[542,4,244,4,"enableTrackpadTwoFingerGesture"],[542,34,244,34],[542,36,244,36],[543,2,245,2],[543,3,245,3],[544,2,231,21,"DrawerLayout"],[544,14,231,33],[544,15,290,9,"positions"],[544,24,290,18],[544,27,290,21],[545,4,291,4,"Left"],[545,8,291,8],[545,10,291,10],[545,16,291,16],[546,4,292,4,"Right"],[546,9,292,9],[546,11,292,11],[547,2,293,2],[547,3,293,3],[548,2,766,0],[548,6,766,6,"styles"],[548,12,766,12],[548,15,766,15,"StyleSheet"],[548,27,766,25],[548,28,766,25,"StyleSheet"],[548,38,766,25],[548,39,766,26,"create"],[548,45,766,32],[548,46,766,33],[549,4,767,2,"drawerContainer"],[549,19,767,17],[549,21,767,19],[550,6,768,4],[550,9,768,7,"StyleSheet"],[550,21,768,17],[550,22,768,17,"StyleSheet"],[550,32,768,17],[550,33,768,18,"absoluteFillObject"],[550,51,768,36],[551,6,769,4,"zIndex"],[551,12,769,10],[551,14,769,12],[551,18,769,16],[552,6,770,4,"flexDirection"],[552,19,770,17],[552,21,770,19],[553,4,771,2],[553,5,771,3],[554,4,772,2,"containerInFront"],[554,20,772,18],[554,22,772,20],[555,6,773,4],[555,9,773,7,"StyleSheet"],[555,21,773,17],[555,22,773,17,"StyleSheet"],[555,32,773,17],[555,33,773,18,"absoluteFillObject"],[555,51,773,36],[556,6,774,4,"zIndex"],[556,12,774,10],[556,14,774,12],[557,4,775,2],[557,5,775,3],[558,4,776,2,"containerOnBack"],[558,19,776,17],[558,21,776,19],[559,6,777,4],[559,9,777,7,"StyleSheet"],[559,21,777,17],[559,22,777,17,"StyleSheet"],[559,32,777,17],[559,33,777,18,"absoluteFillObject"],[560,4,778,2],[560,5,778,3],[561,4,779,2,"main"],[561,8,779,6],[561,10,779,8],[562,6,780,4,"flex"],[562,10,780,8],[562,12,780,10],[562,13,780,11],[563,6,781,4,"zIndex"],[563,12,781,10],[563,14,781,12],[563,15,781,13],[564,6,782,4,"overflow"],[564,14,782,12],[564,16,782,14],[565,4,783,2],[565,5,783,3],[566,4,784,2,"overlay"],[566,11,784,9],[566,13,784,11],[567,6,785,4],[567,9,785,7,"StyleSheet"],[567,21,785,17],[567,22,785,17,"StyleSheet"],[567,32,785,17],[567,33,785,18,"absoluteFillObject"],[567,51,785,36],[568,6,786,4,"zIndex"],[568,12,786,10],[568,14,786,12],[569,4,787,2],[570,2,788,0],[570,3,788,1],[570,4,788,2],[571,0,788,3],[571,3]],"functionMap":{"names":["<global>","DrawerLayout","constructor","shouldComponentUpdate","updateAnimatedEvent","gestureOptions.listener","handleContainerLayout","emitStateChanged","openingHandlerStateChange","onTapHandlerStateChange","handleRelease","updateShowing","animateDrawer","Animated.spring.start$argument_0","openDrawer","closeDrawer","renderOverlay","renderDrawer","setPanGestureRef","render"],"mappings":"AAA;eCsO;ECgB;GDiB;EEE;GFW;gCGkB;gCC+F;ODK;GHO;kCKE;GLE;6BME;GNK;sCOE;GPe;oCQE;GRU;0BSE;GTkC;0BUE;GV0B;0BWE;aCwC;KDe;GXC;eaG;GbY;gBcE;GdY;0BeE;GfyB;yBgBE;GhByF;6BiBE;GjBO;EkBE;GlByC;CDC"},"hasCjsExports":false},"type":"js/module"}]}