{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":66,"index":66}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./ClipboardPasteButton","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":67},"end":{"line":2,"column":62,"index":129}}],"key":"LUcIX+CIhB4XU+2a8Ub9n3L2I8w=","exportNames":["*"],"imports":1}},{"name":"./ExpoClipboard","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":130},"end":{"line":3,"column":44,"index":174}}],"key":"64y7yRjbBRJxCbEo7THAGLu8m4I=","exportNames":["*"],"imports":1}},{"name":"./Clipboard.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":216,"column":0,"index":7899},"end":{"line":216,"column":34,"index":7933}}],"key":"meqRnb9IzYBTuycFxx1YZMmO78c=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.getStringAsync = getStringAsync;\n  exports.setStringAsync = setStringAsync;\n  exports.setString = setString;\n  exports.hasStringAsync = hasStringAsync;\n  exports.getUrlAsync = getUrlAsync;\n  exports.setUrlAsync = setUrlAsync;\n  exports.hasUrlAsync = hasUrlAsync;\n  exports.getImageAsync = getImageAsync;\n  exports.setImageAsync = setImageAsync;\n  exports.hasImageAsync = hasImageAsync;\n  exports.addClipboardListener = addClipboardListener;\n  exports.removeClipboardListener = removeClipboardListener;\n  Object.defineProperty(exports, \"isPasteButtonAvailable\", {\n    enumerable: true,\n    get: function () {\n      return isPasteButtonAvailable;\n    }\n  });\n  Object.defineProperty(exports, \"ClipboardPasteButton\", {\n    enumerable: true,\n    get: function () {\n      return _ClipboardPasteButton.ClipboardPasteButton;\n    }\n  });\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0]);\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _expoModulesCore = require(_dependencyMap[1]);\n  var _ClipboardPasteButton = require(_dependencyMap[2]);\n  var _ExpoClipboard = require(_dependencyMap[3]);\n  var ExpoClipboard = _interopDefault(_ExpoClipboard);\n  var _ClipboardTypes = require(_dependencyMap[4]);\n  Object.keys(_ClipboardTypes).forEach(function (k) {\n    if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) {\n      Object.defineProperty(exports, k, {\n        enumerable: true,\n        get: function () {\n          return _ClipboardTypes[k];\n        }\n      });\n    }\n  });\n  var onClipboardEventName = 'onClipboardChanged';\n  /**\n   * Gets the content of the user's clipboard. Calling this method on web will prompt\n   * the user to grant your app permission to \"see text and images copied to the clipboard.\"\n   *\n   * @param options Options for the clipboard content to be retrieved.\n   * @returns A promise that resolves to the content of the clipboard.\n   */\n  function getStringAsync() {\n    return _getStringAsync.apply(this, arguments);\n  }\n  /**\n   * Sets the content of the user's clipboard.\n   *\n   * @param text The string to save to the clipboard.\n   * @param options Options for the clipboard content to be set.\n   * @returns On web, this returns a promise that fulfills to a boolean value indicating whether or not\n   * the string was saved to the user's clipboard. On iOS and Android, the promise always resolves to `true`.\n   */\n  function _getStringAsync() {\n    _getStringAsync = (0, _asyncToGenerator.default)(function* () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (!ExpoClipboard.default.getStringAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'getStringAsync');\n      }\n      return yield ExpoClipboard.default.getStringAsync(options);\n    });\n    return _getStringAsync.apply(this, arguments);\n  }\n  function setStringAsync(_x) {\n    return _setStringAsync.apply(this, arguments);\n  }\n  /**\n   * Sets the content of the user's clipboard.\n   * @deprecated Use [`setStringAsync()`](#setstringasynctext-options) instead.\n   *\n   * @returns On web, this returns a boolean value indicating whether or not the string was saved to\n   * the user's clipboard. On iOS and Android, nothing is returned.\n   */\n  function _setStringAsync() {\n    _setStringAsync = (0, _asyncToGenerator.default)(function* (text) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!ExpoClipboard.default.setStringAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'setStringAsync');\n      }\n      return ExpoClipboard.default.setStringAsync(text, options);\n    });\n    return _setStringAsync.apply(this, arguments);\n  }\n  function setString(text) {\n    {\n      setStringAsync(text);\n    }\n  }\n  /**\n   * Returns whether the clipboard has text content. Returns true for both plain text and rich text (e.g. HTML).\n   *\n   * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n   *\n   * @returns A promise that fulfills to `true` if clipboard has text content, resolves to `false` otherwise.\n   */\n  function hasStringAsync() {\n    if (!ExpoClipboard.default.hasStringAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'hasStringAsync');\n    }\n    return ExpoClipboard.default.hasStringAsync();\n  }\n  /**\n   * Gets the URL from the user's clipboard.\n   *\n   * @returns A promise that fulfills to the URL in the clipboard.\n   * @platform ios\n   */\n  function getUrlAsync() {\n    return _getUrlAsync.apply(this, arguments);\n  }\n  /**\n   * Sets a URL in the user's clipboard.\n   *\n   * This function behaves the same as [`setStringAsync()`](#setstringasynctext-options), except that\n   * it sets the clipboard content type to be a URL. It lets your app or other apps know that the\n   * clipboard contains a URL and behave accordingly.\n   *\n   * @param url The URL to save to the clipboard.\n   * @platform ios\n   */\n  function _getUrlAsync() {\n    _getUrlAsync = (0, _asyncToGenerator.default)(function* () {\n      if (!ExpoClipboard.default.getUrlAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'getUrlAsync');\n      }\n      return yield ExpoClipboard.default.getUrlAsync();\n    });\n    return _getUrlAsync.apply(this, arguments);\n  }\n  function setUrlAsync(_x2) {\n    return _setUrlAsync.apply(this, arguments);\n  }\n  /**\n   * Returns whether the clipboard has a URL content.\n   *\n   * @returns A promise that fulfills to `true` if clipboard has URL content, resolves to `false` otherwise.\n   * @platform ios\n   */\n  function _setUrlAsync() {\n    _setUrlAsync = (0, _asyncToGenerator.default)(function* (url) {\n      if (!ExpoClipboard.default.setUrlAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'setUrlAsync');\n      }\n      return ExpoClipboard.default.setUrlAsync(url);\n    });\n    return _setUrlAsync.apply(this, arguments);\n  }\n  function hasUrlAsync() {\n    return _hasUrlAsync.apply(this, arguments);\n  }\n  /**\n   * Gets the image from the user's clipboard and returns it in the specified\n   * format. Calling this method on web will prompt the user to grant your app\n   * permission to \"see text and images copied to the clipboard.\"\n   *\n   * @param options A `GetImageOptions` object to specify the desired format of the image.\n   * @returns If there was an image in the clipboard, the promise resolves to\n   * a [`ClipboardImage`](#clipboardimage) object containing the base64 string and metadata of the image.\n   * Otherwise, it resolves to `null`.\n   *\n   * @example\n   * ```tsx\n   * const img = await Clipboard.getImageAsync({ format: 'png' });\n   * // ...\n   * <Image source={{ uri: img?.data }} style={{ width: 200, height: 200 }} />\n   * ```\n   */\n  function _hasUrlAsync() {\n    _hasUrlAsync = (0, _asyncToGenerator.default)(function* () {\n      if (!ExpoClipboard.default.hasUrlAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'hasUrlAsync');\n      }\n      return yield ExpoClipboard.default.hasUrlAsync();\n    });\n    return _hasUrlAsync.apply(this, arguments);\n  }\n  function getImageAsync(_x3) {\n    return _getImageAsync.apply(this, arguments);\n  }\n  /**\n   * Sets an image in the user's clipboard.\n   *\n   * @param base64Image Image encoded as a base64 string, without MIME type.\n   *\n   * @example\n   * ```tsx\n   * const result = await ImagePicker.launchImageLibraryAsync({\n   *   mediaTypes: ImagePicker.MediaTypeOptions.Images,\n   *   base64: true,\n   * });\n   * await Clipboard.setImageAsync(result.base64);\n   * ```\n   */\n  function _getImageAsync() {\n    _getImageAsync = (0, _asyncToGenerator.default)(function* (options) {\n      if (!ExpoClipboard.default.getImageAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'getImageAsync');\n      }\n      return yield ExpoClipboard.default.getImageAsync(options);\n    });\n    return _getImageAsync.apply(this, arguments);\n  }\n  function setImageAsync(_x4) {\n    return _setImageAsync.apply(this, arguments);\n  }\n  /**\n   * Returns whether the clipboard has an image content.\n   *\n   * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n   *\n   * @returns A promise that fulfills to `true` if clipboard has image content, resolves to `false` otherwise.\n   */\n  function _setImageAsync() {\n    _setImageAsync = (0, _asyncToGenerator.default)(function* (base64Image) {\n      if (!ExpoClipboard.default.setImageAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'setImageAsync');\n      }\n      return ExpoClipboard.default.setImageAsync(base64Image);\n    });\n    return _setImageAsync.apply(this, arguments);\n  }\n  function hasImageAsync() {\n    return _hasImageAsync.apply(this, arguments);\n  }\n  /**\n   * Adds a listener that will fire whenever the content of the user's clipboard changes. This method\n   * is a no-op on Web.\n   *\n   * @param listener Callback to execute when listener is triggered. The callback is provided a\n   * single argument that is an object containing information about clipboard contents.\n   *\n   * @example\n   * ```typescript\n   * Clipboard.addClipboardListener(({ contentTypes }: ClipboardEvent) => {\n   *   if (contentTypes.includes(Clipboard.ContentType.PLAIN_TEXT)) {\n   *     Clipboard.getStringAsync().then(content => {\n   *       alert('Copy pasta! Here\\'s the string that was copied: ' + content)\n   *     });\n   *   } else if (contentTypes.includes(Clipboard.ContentType.IMAGE)) {\n   *     alert('Yay! Clipboard contains an image');\n   *   }\n   * });\n   * ```\n   */\n  function _hasImageAsync() {\n    _hasImageAsync = (0, _asyncToGenerator.default)(function* () {\n      if (!ExpoClipboard.default.hasImageAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'hasImageAsync');\n      }\n      return ExpoClipboard.default.hasImageAsync();\n    });\n    return _hasImageAsync.apply(this, arguments);\n  }\n  function addClipboardListener(listener) {\n    // TODO: Get rid of this wrapper once we remove deprecated `content` property (not before SDK47)\n    var listenerWrapper = event => {\n      var wrappedEvent = {\n        ...event,\n        get content() {\n          console.warn(\"The 'content' property of the clipboard event is deprecated. Use 'getStringAsync()' instead to get clipboard content\");\n          return '';\n        }\n      };\n      listener(wrappedEvent);\n    };\n    return ExpoClipboard.default.addListener(onClipboardEventName, listenerWrapper);\n  }\n  /**\n   * Removes the listener added by addClipboardListener. This method is a no-op on Web.\n   *\n   * @param subscription The subscription to remove (created by addClipboardListener).\n   *\n   * @example\n   * ```typescript\n   * const subscription = addClipboardListener(() => {\n   *   alert('Copy pasta!');\n   * });\n   * removeClipboardListener(subscription);\n   * ```\n   */\n  function removeClipboardListener(subscription) {\n    subscription.remove();\n  }\n  /**\n   * Property that determines if the `ClipboardPasteButton` is available.\n   *\n   * This requires the users device to be using at least iOS 16.\n   *\n   * `true` if the component is available, and `false` otherwise.\n   */\n  var isPasteButtonAvailable = ExpoClipboard.default.isPasteButtonAvailable;\n});","lineCount":310,"map":[[12,2,12,0,"exports"],[12,9,12,0],[12,10,12,0,"getStringAsync"],[12,24,12,0],[12,27,12,0,"getStringAsync"],[12,41,12,0],[13,2,26,0,"exports"],[13,9,26,0],[13,10,26,0,"setStringAsync"],[13,24,26,0],[13,27,26,0,"setStringAsync"],[13,41,26,0],[14,2,39,0,"exports"],[14,9,39,0],[14,10,39,0,"setString"],[14,19,39,0],[14,22,39,0,"setString"],[14,31,39,0],[15,2,56,0,"exports"],[15,9,56,0],[15,10,56,0,"hasStringAsync"],[15,24,56,0],[15,27,56,0,"hasStringAsync"],[15,41,56,0],[16,2,68,0,"exports"],[16,9,68,0],[16,10,68,0,"getUrlAsync"],[16,21,68,0],[16,24,68,0,"getUrlAsync"],[16,35,68,0],[17,2,84,0,"exports"],[17,9,84,0],[17,10,84,0,"setUrlAsync"],[17,21,84,0],[17,24,84,0,"setUrlAsync"],[17,35,84,0],[18,2,96,0,"exports"],[18,9,96,0],[18,10,96,0,"hasUrlAsync"],[18,21,96,0],[18,24,96,0,"hasUrlAsync"],[18,35,96,0],[19,2,119,0,"exports"],[19,9,119,0],[19,10,119,0,"getImageAsync"],[19,23,119,0],[19,26,119,0,"getImageAsync"],[19,39,119,0],[20,2,139,0,"exports"],[20,9,139,0],[20,10,139,0,"setImageAsync"],[20,23,139,0],[20,26,139,0,"setImageAsync"],[20,39,139,0],[21,2,152,0,"exports"],[21,9,152,0],[21,10,152,0,"hasImageAsync"],[21,23,152,0],[21,26,152,0,"hasImageAsync"],[21,39,152,0],[22,2,178,0,"exports"],[22,9,178,0],[22,10,178,0,"addClipboardListener"],[22,30,178,0],[22,33,178,0,"addClipboardListener"],[22,53,178,0],[23,2,205,0,"exports"],[23,9,205,0],[23,10,205,0,"removeClipboardListener"],[23,33,205,0],[23,36,205,0,"removeClipboardListener"],[23,59,205,0],[24,2,215,0,"Object"],[24,8,215,0],[24,9,215,0,"defineProperty"],[24,23,215,0],[24,24,215,0,"exports"],[24,31,215,0],[25,4,215,0,"enumerable"],[25,14,215,0],[26,4,215,0,"get"],[26,7,215,0],[26,18,215,0,"get"],[26,19,215,0],[27,6,215,0],[27,13,215,0,"isPasteButtonAvailable"],[27,35,215,0],[28,4,215,0],[29,2,215,0],[30,2,217,0,"Object"],[30,8,217,0],[30,9,217,0,"defineProperty"],[30,23,217,0],[30,24,217,0,"exports"],[30,31,217,0],[31,4,217,0,"enumerable"],[31,14,217,0],[32,4,217,0,"get"],[32,7,217,0],[32,18,217,0,"get"],[32,19,217,0],[33,6,217,0],[33,13,217,9,"ClipboardPasteButton"],[33,34,217,29],[33,35,217,29,"ClipboardPasteButton"],[33,55,217,29],[34,4,217,29],[35,2,217,29],[36,2,217,32],[36,6,217,32,"_babelRuntimeHelpersAsyncToGenerator"],[36,42,217,32],[36,45,217,32,"require"],[36,52,217,32],[36,53,217,32,"_dependencyMap"],[36,67,217,32],[37,2,217,32],[37,6,217,32,"_asyncToGenerator"],[37,23,217,32],[37,26,217,32,"_interopDefault"],[37,41,217,32],[37,42,217,32,"_babelRuntimeHelpersAsyncToGenerator"],[37,78,217,32],[38,2,1,0],[38,6,1,0,"_expoModulesCore"],[38,22,1,0],[38,25,1,0,"require"],[38,32,1,0],[38,33,1,0,"_dependencyMap"],[38,47,1,0],[39,2,2,0],[39,6,2,0,"_ClipboardPasteButton"],[39,27,2,0],[39,30,2,0,"require"],[39,37,2,0],[39,38,2,0,"_dependencyMap"],[39,52,2,0],[40,2,3,0],[40,6,3,0,"_ExpoClipboard"],[40,20,3,0],[40,23,3,0,"require"],[40,30,3,0],[40,31,3,0,"_dependencyMap"],[40,45,3,0],[41,2,3,0],[41,6,3,0,"ExpoClipboard"],[41,19,3,0],[41,22,3,0,"_interopDefault"],[41,37,3,0],[41,38,3,0,"_ExpoClipboard"],[41,52,3,0],[42,2,216,0],[42,6,216,0,"_ClipboardTypes"],[42,21,216,0],[42,24,216,0,"require"],[42,31,216,0],[42,32,216,0,"_dependencyMap"],[42,46,216,0],[43,2,216,0,"Object"],[43,8,216,0],[43,9,216,0,"keys"],[43,13,216,0],[43,14,216,0,"_ClipboardTypes"],[43,29,216,0],[43,31,216,0,"forEach"],[43,38,216,0],[43,49,216,0,"k"],[43,50,216,0],[44,4,216,0],[44,8,216,0,"k"],[44,9,216,0],[44,28,216,0,"Object"],[44,34,216,0],[44,35,216,0,"prototype"],[44,44,216,0],[44,45,216,0,"hasOwnProperty"],[44,59,216,0],[44,60,216,0,"call"],[44,64,216,0],[44,65,216,0,"exports"],[44,72,216,0],[44,74,216,0,"k"],[44,75,216,0],[45,6,216,0,"Object"],[45,12,216,0],[45,13,216,0,"defineProperty"],[45,27,216,0],[45,28,216,0,"exports"],[45,35,216,0],[45,37,216,0,"k"],[45,38,216,0],[46,8,216,0,"enumerable"],[46,18,216,0],[47,8,216,0,"get"],[47,11,216,0],[47,22,216,0,"get"],[47,23,216,0],[48,10,216,0],[48,17,216,0,"_ClipboardTypes"],[48,32,216,0],[48,33,216,0,"k"],[48,34,216,0],[49,8,216,0],[50,6,216,0],[51,4,216,0],[52,2,216,0],[53,2,4,0],[53,6,4,6,"onClipboardEventName"],[53,26,4,26],[53,29,4,29],[53,49,4,49],[54,2,5,0],[55,0,6,0],[56,0,7,0],[57,0,8,0],[58,0,9,0],[59,0,10,0],[60,0,11,0],[61,2,5,0],[61,11,12,22,"getStringAsync"],[61,25,12,36,"getStringAsync"],[61,26,12,36],[62,4,12,36],[62,11,12,36,"_getStringAsync"],[62,26,12,36],[62,27,12,36,"apply"],[62,32,12,36],[62,39,12,36,"arguments"],[62,48,12,36],[63,2,12,36],[64,2,18,0],[65,0,19,0],[66,0,20,0],[67,0,21,0],[68,0,22,0],[69,0,23,0],[70,0,24,0],[71,0,25,0],[72,2,18,0],[72,11,18,0,"_getStringAsync"],[72,27,18,0],[73,4,18,0,"_getStringAsync"],[73,19,18,0],[73,26,18,0,"_asyncToGenerator"],[73,43,18,0],[73,44,18,0,"default"],[73,51,18,0],[73,53,12,7],[73,66,12,51],[74,6,12,51],[74,10,12,37,"options"],[74,17,12,44],[74,20,12,44,"arguments"],[74,29,12,44],[74,30,12,44,"length"],[74,36,12,44],[74,44,12,44,"arguments"],[74,53,12,44],[74,61,12,44,"undefined"],[74,70,12,44],[74,73,12,44,"arguments"],[74,82,12,44],[74,88,12,47],[74,89,12,48],[74,90,12,49],[75,6,13,4],[75,10,13,8],[75,11,13,9,"ExpoClipboard"],[75,24,13,22],[75,25,13,22,"default"],[75,32,13,22],[75,33,13,23,"getStringAsync"],[75,47,13,37],[75,49,13,39],[76,8,14,8],[76,14,14,14],[76,18,14,18,"UnavailabilityError"],[76,34,14,37],[76,35,14,37,"UnavailabilityError"],[76,54,14,37],[76,55,14,38],[76,66,14,49],[76,68,14,51],[76,84,14,67],[76,85,14,68],[77,6,15,4],[78,6,16,4],[78,19,16,17,"ExpoClipboard"],[78,32,16,30],[78,33,16,30,"default"],[78,40,16,30],[78,41,16,31,"getStringAsync"],[78,55,16,45],[78,56,16,46,"options"],[78,63,16,53],[78,64,16,54],[79,4,17,0],[79,5,17,1],[80,4,17,1],[80,11,17,1,"_getStringAsync"],[80,26,17,1],[80,27,17,1,"apply"],[80,32,17,1],[80,39,17,1,"arguments"],[80,48,17,1],[81,2,17,1],[82,2,17,1],[82,11,26,22,"setStringAsync"],[82,25,26,36,"setStringAsync"],[82,26,26,36,"_x"],[82,28,26,36],[83,4,26,36],[83,11,26,36,"_setStringAsync"],[83,26,26,36],[83,27,26,36,"apply"],[83,32,26,36],[83,39,26,36,"arguments"],[83,48,26,36],[84,2,26,36],[85,2,32,0],[86,0,33,0],[87,0,34,0],[88,0,35,0],[89,0,36,0],[90,0,37,0],[91,0,38,0],[92,2,32,0],[92,11,32,0,"_setStringAsync"],[92,27,32,0],[93,4,32,0,"_setStringAsync"],[93,19,32,0],[93,26,32,0,"_asyncToGenerator"],[93,43,32,0],[93,44,32,0,"default"],[93,51,32,0],[93,53,26,7],[93,64,26,37,"text"],[93,68,26,41],[93,70,26,57],[94,6,26,57],[94,10,26,43,"options"],[94,17,26,50],[94,20,26,50,"arguments"],[94,29,26,50],[94,30,26,50,"length"],[94,36,26,50],[94,44,26,50,"arguments"],[94,53,26,50],[94,61,26,50,"undefined"],[94,70,26,50],[94,73,26,50,"arguments"],[94,82,26,50],[94,88,26,53],[94,89,26,54],[94,90,26,55],[95,6,27,4],[95,10,27,8],[95,11,27,9,"ExpoClipboard"],[95,24,27,22],[95,25,27,22,"default"],[95,32,27,22],[95,33,27,23,"setStringAsync"],[95,47,27,37],[95,49,27,39],[96,8,28,8],[96,14,28,14],[96,18,28,18,"UnavailabilityError"],[96,34,28,37],[96,35,28,37,"UnavailabilityError"],[96,54,28,37],[96,55,28,38],[96,66,28,49],[96,68,28,51],[96,84,28,67],[96,85,28,68],[97,6,29,4],[98,6,30,4],[98,13,30,11,"ExpoClipboard"],[98,26,30,24],[98,27,30,24,"default"],[98,34,30,24],[98,35,30,25,"setStringAsync"],[98,49,30,39],[98,50,30,40,"text"],[98,54,30,44],[98,56,30,46,"options"],[98,63,30,53],[98,64,30,54],[99,4,31,0],[99,5,31,1],[100,4,31,1],[100,11,31,1,"_setStringAsync"],[100,26,31,1],[100,27,31,1,"apply"],[100,32,31,1],[100,39,31,1,"arguments"],[100,48,31,1],[101,2,31,1],[102,2,39,7],[102,11,39,16,"setString"],[102,20,39,25,"setString"],[102,21,39,26,"text"],[102,25,39,30],[102,27,39,32],[103,4,45,9],[104,6,46,8,"setStringAsync"],[104,20,46,22],[104,21,46,23,"text"],[104,25,46,27],[104,26,46,28],[105,4,47,4],[106,2,48,0],[107,2,49,0],[108,0,50,0],[109,0,51,0],[110,0,52,0],[111,0,53,0],[112,0,54,0],[113,0,55,0],[114,2,56,7],[114,11,56,16,"hasStringAsync"],[114,25,56,30,"hasStringAsync"],[114,26,56,30],[114,28,56,33],[115,4,57,4],[115,8,57,8],[115,9,57,9,"ExpoClipboard"],[115,22,57,22],[115,23,57,22,"default"],[115,30,57,22],[115,31,57,23,"hasStringAsync"],[115,45,57,37],[115,47,57,39],[116,6,58,8],[116,12,58,14],[116,16,58,18,"UnavailabilityError"],[116,32,58,37],[116,33,58,37,"UnavailabilityError"],[116,52,58,37],[116,53,58,38],[116,64,58,49],[116,66,58,51],[116,82,58,67],[116,83,58,68],[117,4,59,4],[118,4,60,4],[118,11,60,11,"ExpoClipboard"],[118,24,60,24],[118,25,60,24,"default"],[118,32,60,24],[118,33,60,25,"hasStringAsync"],[118,47,60,39],[118,48,60,40],[118,49,60,41],[119,2,61,0],[120,2,62,0],[121,0,63,0],[122,0,64,0],[123,0,65,0],[124,0,66,0],[125,0,67,0],[126,2,62,0],[126,11,68,22,"getUrlAsync"],[126,22,68,33,"getUrlAsync"],[126,23,68,33],[127,4,68,33],[127,11,68,33,"_getUrlAsync"],[127,23,68,33],[127,24,68,33,"apply"],[127,29,68,33],[127,36,68,33,"arguments"],[127,45,68,33],[128,2,68,33],[129,2,74,0],[130,0,75,0],[131,0,76,0],[132,0,77,0],[133,0,78,0],[134,0,79,0],[135,0,80,0],[136,0,81,0],[137,0,82,0],[138,0,83,0],[139,2,74,0],[139,11,74,0,"_getUrlAsync"],[139,24,74,0],[140,4,74,0,"_getUrlAsync"],[140,16,74,0],[140,23,74,0,"_asyncToGenerator"],[140,40,74,0],[140,41,74,0,"default"],[140,48,74,0],[140,50,68,7],[140,63,68,36],[141,6,69,4],[141,10,69,8],[141,11,69,9,"ExpoClipboard"],[141,24,69,22],[141,25,69,22,"default"],[141,32,69,22],[141,33,69,23,"getUrlAsync"],[141,44,69,34],[141,46,69,36],[142,8,70,8],[142,14,70,14],[142,18,70,18,"UnavailabilityError"],[142,34,70,37],[142,35,70,37,"UnavailabilityError"],[142,54,70,37],[142,55,70,38],[142,66,70,49],[142,68,70,51],[142,81,70,64],[142,82,70,65],[143,6,71,4],[144,6,72,4],[144,19,72,17,"ExpoClipboard"],[144,32,72,30],[144,33,72,30,"default"],[144,40,72,30],[144,41,72,31,"getUrlAsync"],[144,52,72,42],[144,53,72,43],[144,54,72,44],[145,4,73,0],[145,5,73,1],[146,4,73,1],[146,11,73,1,"_getUrlAsync"],[146,23,73,1],[146,24,73,1,"apply"],[146,29,73,1],[146,36,73,1,"arguments"],[146,45,73,1],[147,2,73,1],[148,2,73,1],[148,11,84,22,"setUrlAsync"],[148,22,84,33,"setUrlAsync"],[148,23,84,33,"_x2"],[148,26,84,33],[149,4,84,33],[149,11,84,33,"_setUrlAsync"],[149,23,84,33],[149,24,84,33,"apply"],[149,29,84,33],[149,36,84,33,"arguments"],[149,45,84,33],[150,2,84,33],[151,2,90,0],[152,0,91,0],[153,0,92,0],[154,0,93,0],[155,0,94,0],[156,0,95,0],[157,2,90,0],[157,11,90,0,"_setUrlAsync"],[157,24,90,0],[158,4,90,0,"_setUrlAsync"],[158,16,90,0],[158,23,90,0,"_asyncToGenerator"],[158,40,90,0],[158,41,90,0,"default"],[158,48,90,0],[158,50,84,7],[158,61,84,34,"url"],[158,64,84,37],[158,66,84,39],[159,6,85,4],[159,10,85,8],[159,11,85,9,"ExpoClipboard"],[159,24,85,22],[159,25,85,22,"default"],[159,32,85,22],[159,33,85,23,"setUrlAsync"],[159,44,85,34],[159,46,85,36],[160,8,86,8],[160,14,86,14],[160,18,86,18,"UnavailabilityError"],[160,34,86,37],[160,35,86,37,"UnavailabilityError"],[160,54,86,37],[160,55,86,38],[160,66,86,49],[160,68,86,51],[160,81,86,64],[160,82,86,65],[161,6,87,4],[162,6,88,4],[162,13,88,11,"ExpoClipboard"],[162,26,88,24],[162,27,88,24,"default"],[162,34,88,24],[162,35,88,25,"setUrlAsync"],[162,46,88,36],[162,47,88,37,"url"],[162,50,88,40],[162,51,88,41],[163,4,89,0],[163,5,89,1],[164,4,89,1],[164,11,89,1,"_setUrlAsync"],[164,23,89,1],[164,24,89,1,"apply"],[164,29,89,1],[164,36,89,1,"arguments"],[164,45,89,1],[165,2,89,1],[166,2,89,1],[166,11,96,22,"hasUrlAsync"],[166,22,96,33,"hasUrlAsync"],[166,23,96,33],[167,4,96,33],[167,11,96,33,"_hasUrlAsync"],[167,23,96,33],[167,24,96,33,"apply"],[167,29,96,33],[167,36,96,33,"arguments"],[167,45,96,33],[168,2,96,33],[169,2,102,0],[170,0,103,0],[171,0,104,0],[172,0,105,0],[173,0,106,0],[174,0,107,0],[175,0,108,0],[176,0,109,0],[177,0,110,0],[178,0,111,0],[179,0,112,0],[180,0,113,0],[181,0,114,0],[182,0,115,0],[183,0,116,0],[184,0,117,0],[185,0,118,0],[186,2,102,0],[186,11,102,0,"_hasUrlAsync"],[186,24,102,0],[187,4,102,0,"_hasUrlAsync"],[187,16,102,0],[187,23,102,0,"_asyncToGenerator"],[187,40,102,0],[187,41,102,0,"default"],[187,48,102,0],[187,50,96,7],[187,63,96,36],[188,6,97,4],[188,10,97,8],[188,11,97,9,"ExpoClipboard"],[188,24,97,22],[188,25,97,22,"default"],[188,32,97,22],[188,33,97,23,"hasUrlAsync"],[188,44,97,34],[188,46,97,36],[189,8,98,8],[189,14,98,14],[189,18,98,18,"UnavailabilityError"],[189,34,98,37],[189,35,98,37,"UnavailabilityError"],[189,54,98,37],[189,55,98,38],[189,66,98,49],[189,68,98,51],[189,81,98,64],[189,82,98,65],[190,6,99,4],[191,6,100,4],[191,19,100,17,"ExpoClipboard"],[191,32,100,30],[191,33,100,30,"default"],[191,40,100,30],[191,41,100,31,"hasUrlAsync"],[191,52,100,42],[191,53,100,43],[191,54,100,44],[192,4,101,0],[192,5,101,1],[193,4,101,1],[193,11,101,1,"_hasUrlAsync"],[193,23,101,1],[193,24,101,1,"apply"],[193,29,101,1],[193,36,101,1,"arguments"],[193,45,101,1],[194,2,101,1],[195,2,101,1],[195,11,119,22,"getImageAsync"],[195,24,119,35,"getImageAsync"],[195,25,119,35,"_x3"],[195,28,119,35],[196,4,119,35],[196,11,119,35,"_getImageAsync"],[196,25,119,35],[196,26,119,35,"apply"],[196,31,119,35],[196,38,119,35,"arguments"],[196,47,119,35],[197,2,119,35],[198,2,125,0],[199,0,126,0],[200,0,127,0],[201,0,128,0],[202,0,129,0],[203,0,130,0],[204,0,131,0],[205,0,132,0],[206,0,133,0],[207,0,134,0],[208,0,135,0],[209,0,136,0],[210,0,137,0],[211,0,138,0],[212,2,125,0],[212,11,125,0,"_getImageAsync"],[212,26,125,0],[213,4,125,0,"_getImageAsync"],[213,18,125,0],[213,25,125,0,"_asyncToGenerator"],[213,42,125,0],[213,43,125,0,"default"],[213,50,125,0],[213,52,119,7],[213,63,119,36,"options"],[213,70,119,43],[213,72,119,45],[214,6,120,4],[214,10,120,8],[214,11,120,9,"ExpoClipboard"],[214,24,120,22],[214,25,120,22,"default"],[214,32,120,22],[214,33,120,23,"getImageAsync"],[214,46,120,36],[214,48,120,38],[215,8,121,8],[215,14,121,14],[215,18,121,18,"UnavailabilityError"],[215,34,121,37],[215,35,121,37,"UnavailabilityError"],[215,54,121,37],[215,55,121,38],[215,66,121,49],[215,68,121,51],[215,83,121,66],[215,84,121,67],[216,6,122,4],[217,6,123,4],[217,19,123,17,"ExpoClipboard"],[217,32,123,30],[217,33,123,30,"default"],[217,40,123,30],[217,41,123,31,"getImageAsync"],[217,54,123,44],[217,55,123,45,"options"],[217,62,123,52],[217,63,123,53],[218,4,124,0],[218,5,124,1],[219,4,124,1],[219,11,124,1,"_getImageAsync"],[219,25,124,1],[219,26,124,1,"apply"],[219,31,124,1],[219,38,124,1,"arguments"],[219,47,124,1],[220,2,124,1],[221,2,124,1],[221,11,139,22,"setImageAsync"],[221,24,139,35,"setImageAsync"],[221,25,139,35,"_x4"],[221,28,139,35],[222,4,139,35],[222,11,139,35,"_setImageAsync"],[222,25,139,35],[222,26,139,35,"apply"],[222,31,139,35],[222,38,139,35,"arguments"],[222,47,139,35],[223,2,139,35],[224,2,145,0],[225,0,146,0],[226,0,147,0],[227,0,148,0],[228,0,149,0],[229,0,150,0],[230,0,151,0],[231,2,145,0],[231,11,145,0,"_setImageAsync"],[231,26,145,0],[232,4,145,0,"_setImageAsync"],[232,18,145,0],[232,25,145,0,"_asyncToGenerator"],[232,42,145,0],[232,43,145,0,"default"],[232,50,145,0],[232,52,139,7],[232,63,139,36,"base64Image"],[232,74,139,47],[232,76,139,49],[233,6,140,4],[233,10,140,8],[233,11,140,9,"ExpoClipboard"],[233,24,140,22],[233,25,140,22,"default"],[233,32,140,22],[233,33,140,23,"setImageAsync"],[233,46,140,36],[233,48,140,38],[234,8,141,8],[234,14,141,14],[234,18,141,18,"UnavailabilityError"],[234,34,141,37],[234,35,141,37,"UnavailabilityError"],[234,54,141,37],[234,55,141,38],[234,66,141,49],[234,68,141,51],[234,83,141,66],[234,84,141,67],[235,6,142,4],[236,6,143,4],[236,13,143,11,"ExpoClipboard"],[236,26,143,24],[236,27,143,24,"default"],[236,34,143,24],[236,35,143,25,"setImageAsync"],[236,48,143,38],[236,49,143,39,"base64Image"],[236,60,143,50],[236,61,143,51],[237,4,144,0],[237,5,144,1],[238,4,144,1],[238,11,144,1,"_setImageAsync"],[238,25,144,1],[238,26,144,1,"apply"],[238,31,144,1],[238,38,144,1,"arguments"],[238,47,144,1],[239,2,144,1],[240,2,144,1],[240,11,152,22,"hasImageAsync"],[240,24,152,35,"hasImageAsync"],[240,25,152,35],[241,4,152,35],[241,11,152,35,"_hasImageAsync"],[241,25,152,35],[241,26,152,35,"apply"],[241,31,152,35],[241,38,152,35,"arguments"],[241,47,152,35],[242,2,152,35],[243,2,158,0],[244,0,159,0],[245,0,160,0],[246,0,161,0],[247,0,162,0],[248,0,163,0],[249,0,164,0],[250,0,165,0],[251,0,166,0],[252,0,167,0],[253,0,168,0],[254,0,169,0],[255,0,170,0],[256,0,171,0],[257,0,172,0],[258,0,173,0],[259,0,174,0],[260,0,175,0],[261,0,176,0],[262,0,177,0],[263,2,158,0],[263,11,158,0,"_hasImageAsync"],[263,26,158,0],[264,4,158,0,"_hasImageAsync"],[264,18,158,0],[264,25,158,0,"_asyncToGenerator"],[264,42,158,0],[264,43,158,0,"default"],[264,50,158,0],[264,52,152,7],[264,65,152,38],[265,6,153,4],[265,10,153,8],[265,11,153,9,"ExpoClipboard"],[265,24,153,22],[265,25,153,22,"default"],[265,32,153,22],[265,33,153,23,"hasImageAsync"],[265,46,153,36],[265,48,153,38],[266,8,154,8],[266,14,154,14],[266,18,154,18,"UnavailabilityError"],[266,34,154,37],[266,35,154,37,"UnavailabilityError"],[266,54,154,37],[266,55,154,38],[266,66,154,49],[266,68,154,51],[266,83,154,66],[266,84,154,67],[267,6,155,4],[268,6,156,4],[268,13,156,11,"ExpoClipboard"],[268,26,156,24],[268,27,156,24,"default"],[268,34,156,24],[268,35,156,25,"hasImageAsync"],[268,48,156,38],[268,49,156,39],[268,50,156,40],[269,4,157,0],[269,5,157,1],[270,4,157,1],[270,11,157,1,"_hasImageAsync"],[270,25,157,1],[270,26,157,1,"apply"],[270,31,157,1],[270,38,157,1,"arguments"],[270,47,157,1],[271,2,157,1],[272,2,178,7],[272,11,178,16,"addClipboardListener"],[272,31,178,36,"addClipboardListener"],[272,32,178,37,"listener"],[272,40,178,45],[272,42,178,47],[273,4,179,4],[274,4,180,4],[274,8,180,10,"listenerWrapper"],[274,23,180,25],[274,26,180,29,"event"],[274,31,180,34],[274,35,180,39],[275,6,181,8],[275,10,181,14,"wrappedEvent"],[275,22,181,26],[275,25,181,29],[276,8,182,12],[276,11,182,15,"event"],[276,16,182,20],[277,8,183,12],[277,12,183,16,"content"],[277,19,183,23,"content"],[277,20,183,23],[277,22,183,26],[278,10,184,16,"console"],[278,17,184,23],[278,18,184,24,"warn"],[278,22,184,28],[278,23,184,29],[278,141,184,147],[278,142,184,148],[279,10,185,16],[279,17,185,23],[279,19,185,25],[280,8,186,12],[281,6,187,8],[281,7,187,9],[282,6,188,8,"listener"],[282,14,188,16],[282,15,188,17,"wrappedEvent"],[282,27,188,29],[282,28,188,30],[283,4,189,4],[283,5,189,5],[284,4,190,4],[284,11,190,11,"ExpoClipboard"],[284,24,190,24],[284,25,190,24,"default"],[284,32,190,24],[284,33,190,25,"addListener"],[284,44,190,36],[284,45,190,37,"onClipboardEventName"],[284,65,190,57],[284,67,190,59,"listenerWrapper"],[284,82,190,74],[284,83,190,75],[285,2,191,0],[286,2,192,0],[287,0,193,0],[288,0,194,0],[289,0,195,0],[290,0,196,0],[291,0,197,0],[292,0,198,0],[293,0,199,0],[294,0,200,0],[295,0,201,0],[296,0,202,0],[297,0,203,0],[298,0,204,0],[299,2,205,7],[299,11,205,16,"removeClipboardListener"],[299,34,205,39,"removeClipboardListener"],[299,35,205,40,"subscription"],[299,47,205,52],[299,49,205,54],[300,4,206,4,"subscription"],[300,16,206,16],[300,17,206,17,"remove"],[300,23,206,23],[300,24,206,24],[300,25,206,25],[301,2,207,0],[302,2,208,0],[303,0,209,0],[304,0,210,0],[305,0,211,0],[306,0,212,0],[307,0,213,0],[308,0,214,0],[309,2,215,7],[309,6,215,13,"isPasteButtonAvailable"],[309,28,215,35],[309,31,215,62,"ExpoClipboard"],[309,44,215,75],[309,45,215,75,"default"],[309,52,215,75],[309,53,215,76,"isPasteButtonAvailable"],[309,75,215,106],[310,0,215,107],[310,3]],"functionMap":{"names":["<global>","getStringAsync","setStringAsync","setString","hasStringAsync","getUrlAsync","setUrlAsync","hasUrlAsync","getImageAsync","setImageAsync","hasImageAsync","addClipboardListener","listenerWrapper","wrappedEvent.get__content","removeClipboardListener"],"mappings":"AAA;OCW;CDK;OES;CFK;OGQ;CHS;OIQ;CJK;OKO;CLK;OMW;CNK;OOO;CPK;OQkB;CRK;OSe;CTK;OUQ;CVK;OWqB;4BCE;YCG;aDG;KDG;CXE;Occ;CdE"},"hasCjsExports":false},"type":"js/module"}]}