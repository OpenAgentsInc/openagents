{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":42,"index":57}}],"key":"Opxn8Ttfh7QNGeF0y+BQ6rRbDGo=","exportNames":["*"],"imports":1}},{"name":"query-string","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":58},"end":{"line":4,"column":44,"index":102}}],"key":"Tk6zkk+/XfK89igjx1MNWAcG1Q8=","exportNames":["*"],"imports":1}},{"name":"./arrayStartsWith.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":103},"end":{"line":5,"column":55,"index":158}}],"key":"mJQeK2ZRLq8v0j9J6l50oLtYU2c=","exportNames":["*"],"imports":1}},{"name":"./findFocusedRoute.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":159},"end":{"line":6,"column":57,"index":216}}],"key":"/OEwo8APHIJtscmrfuh7WccCayM=","exportNames":["*"],"imports":1}},{"name":"./getPatternParts.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":217},"end":{"line":7,"column":55,"index":272}}],"key":"ZBgxhB8YmJlp1KxhfM5ocx9xUB0=","exportNames":["*"],"imports":1}},{"name":"./isArrayEqual.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":273},"end":{"line":8,"column":49,"index":322}}],"key":"0Xv+Jf6vWjo3/vKyf7CxgrGRylo=","exportNames":["*"],"imports":1}},{"name":"./validatePathConfig.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":323},"end":{"line":9,"column":61,"index":384}}],"key":"zoUaUuxQP5qPvRrno+lraXgTGfI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  exports.getStateFromPath = getStateFromPath;\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0]);\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _escapeStringRegexp = require(_dependencyMap[1]);\n  var escape = _interopDefault(_escapeStringRegexp);\n  var _queryString = require(_dependencyMap[2]);\n  var queryString = _interopNamespace(_queryString);\n  var _arrayStartsWithJs = require(_dependencyMap[3]);\n  var _findFocusedRouteJs = require(_dependencyMap[4]);\n  var _getPatternPartsJs = require(_dependencyMap[5]);\n  var _isArrayEqualJs = require(_dependencyMap[6]);\n  var _validatePathConfigJs = require(_dependencyMap[7]);\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    var _getConfigResources = getConfigResources(options),\n      initialRoutes = _getConfigResources.initialRoutes,\n      configs = _getConfigResources.configs;\n    var screens = options?.screens;\n    var remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    var prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n\n    if (prefix) {\n      // Make sure there is a trailing slash\n      var normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n\n      // If the path doesn't start with the prefix, it's not a match\n      if (!remaining.startsWith(normalizedPrefix)) {\n        return undefined;\n      }\n\n      // Remove the prefix from the path\n      remaining = remaining.replace(normalizedPrefix, '');\n    }\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      var _routes = remaining.split('/').filter(Boolean).map(segment => {\n        var name = decodeURIComponent(segment);\n        return {\n          name\n        };\n      });\n      if (_routes.length) {\n        return createNestedStateObject(path, _routes, initialRoutes);\n      }\n      return undefined;\n    }\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      var match = configs.find(config => config.segments.join('/') === '');\n      if (match) {\n        return createNestedStateObject(path, match.routeNames.map(name => ({\n          name\n        })), initialRoutes, configs);\n      }\n      return undefined;\n    }\n    var result;\n    var current;\n\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs),\n      routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(path, routes, initialRoutes, configs);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n\n  /**\n   * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n   */\n  var cachedConfigResources = new WeakMap();\n  function getConfigResources(options) {\n    if (!options) return prepareConfigResources();\n    var cached = cachedConfigResources.get(options);\n    if (cached) return cached;\n    var resources = prepareConfigResources(options);\n    cachedConfigResources.set(options, resources);\n    return resources;\n  }\n  function prepareConfigResources(options) {\n    if (options) {\n      (0, _validatePathConfigJs.validatePathConfig)(options);\n    }\n    var initialRoutes = getInitialRoutes(options);\n    var configs = getSortedNormalizedConfigs(initialRoutes, options?.screens);\n    checkForDuplicatedConfigs(configs);\n    var configWithRegexes = getConfigsWithRegexes(configs);\n    return {\n      initialRoutes,\n      configs,\n      configWithRegexes\n    };\n  }\n  function getInitialRoutes(options) {\n    var initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    return initialRoutes;\n  }\n  function getSortedNormalizedConfigs(initialRoutes) {\n    var screens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Create a normalized configs array which will be easier to use\n    return [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, initialRoutes, [], [], []))).sort((a, b) => {\n      // Sort config from most specific to least specific:\n      // - more segments\n      // - static segments\n      // - params with regex\n      // - regular params\n      // - wildcard\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if ((0, _isArrayEqualJs.isArrayEqual)(a.segments, b.segments)) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if ((0, _arrayStartsWithJs.arrayStartsWith)(a.segments, b.segments)) {\n        return -1;\n      }\n      if ((0, _arrayStartsWithJs.arrayStartsWith)(b.segments, a.segments)) {\n        return 1;\n      }\n      for (var i = 0; i < Math.max(a.segments.length, b.segments.length); i++) {\n        // if b is longer, b gets higher priority\n        if (a.segments[i] == null) {\n          return 1;\n        }\n\n        // if a is longer, a gets higher priority\n        if (b.segments[i] == null) {\n          return -1;\n        }\n        var aWildCard = a.segments[i] === '*';\n        var bWildCard = b.segments[i] === '*';\n        var aParam = a.segments[i].startsWith(':');\n        var bParam = b.segments[i].startsWith(':');\n        var aRegex = aParam && a.segments[i].includes('(');\n        var bRegex = bParam && b.segments[i].includes('(');\n\n        // if both are wildcard or regex, we compare next component\n        if (aWildCard && bWildCard || aRegex && bRegex) {\n          continue;\n        }\n\n        // if only a is wildcard, b gets higher priority\n        if (aWildCard && !bWildCard) {\n          return 1;\n        }\n\n        // if only b is wildcard, a gets higher priority\n        if (bWildCard && !aWildCard) {\n          return -1;\n        }\n\n        // If only a has a param, b gets higher priority\n        if (aParam && !bParam) {\n          return 1;\n        }\n\n        // If only b has a param, a gets higher priority\n        if (bParam && !aParam) {\n          return -1;\n        }\n\n        // if only a has regex, a gets higher priority\n        if (aRegex && !bRegex) {\n          return -1;\n        }\n\n        // if only b has regex, b gets higher priority\n        if (bRegex && !aRegex) {\n          return 1;\n        }\n      }\n      return a.segments.length - b.segments.length;\n    });\n  }\n  function checkForDuplicatedConfigs(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      var pattern = config.segments.join('/');\n      if (acc[pattern]) {\n        var a = acc[pattern].routeNames;\n        var b = config.routeNames;\n\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        var intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, {\n        [pattern]: config\n      });\n    }, {});\n  }\n  function getConfigsWithRegexes(configs) {\n    return configs.map(c => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n    }));\n  }\n  var matchAgainstConfigs = (remaining, configs) => {\n    var routes;\n    var remainingPath = remaining;\n\n    // Go through all configs, and see if the next path segment matches our regex\n    var _loop = function (config) {\n        if (!config.regex) {\n          return 0; // continue\n        }\n        var match = remainingPath.match(config.regex);\n\n        // If our regex matches, we need to extract params from the path\n        if (match) {\n          routes = config.routeNames.map(routeName => {\n            var routeConfig = configs.find(c => {\n              // Check matching name AND pattern in case same screen is used at different levels in config\n              return c.screen === routeName && (0, _arrayStartsWithJs.arrayStartsWith)(config.segments, c.segments);\n            });\n            var params = routeConfig && match.groups ? Object.fromEntries(Object.entries(match.groups).map(_ref => {\n              var _ref2 = (0, _slicedToArray.default)(_ref, 2),\n                key = _ref2[0],\n                value = _ref2[1];\n              var index = Number(key.replace('param_', ''));\n              var param = routeConfig.params.find(it => it.index === index);\n              if (param?.screen === routeName && param?.name) {\n                return [param.name, value];\n              }\n              return null;\n            }).filter(it => it != null).map(_ref3 => {\n              var _ref4 = (0, _slicedToArray.default)(_ref3, 2),\n                key = _ref4[0],\n                value = _ref4[1];\n              if (value == null) {\n                return [key, undefined];\n              }\n              var decoded = decodeURIComponent(value);\n              var parsed = routeConfig.parse?.[key] ? routeConfig.parse[key](decoded) : decoded;\n              return [key, parsed];\n            })) : undefined;\n            if (params && Object.keys(params).length) {\n              return {\n                name: routeName,\n                params\n              };\n            }\n            return {\n              name: routeName\n            };\n          });\n          remainingPath = remainingPath.replace(match[0], '');\n          return 1; // break\n        }\n      },\n      _ret;\n    for (var config of configs) {\n      _ret = _loop(config);\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n    return {\n      routes,\n      remainingPath\n    };\n  };\n  var createNormalizedConfigs = (screen, routeConfig, initials, paths, parentScreens, routeNames) => {\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    var config = routeConfig[screen];\n    if (typeof config === 'string') {\n      paths.push({\n        screen,\n        path: config\n      });\n      configs.push(createConfigItem(screen, [...routeNames], [...paths]));\n    } else if (typeof config === 'object') {\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path == null) {\n          throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. \\`path: ''\\`.`);\n        }\n\n        // We should add alias configs after the main config\n        // So unless they are more specific, main config will be matched first\n        var aliasConfigs = [];\n        if (config.alias) {\n          for (var alias of config.alias) {\n            if (typeof alias === 'string') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], [...paths, {\n                screen,\n                path: alias\n              }], config.parse));\n            } else if (typeof alias === 'object') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], alias.exact ? [{\n                screen,\n                path: alias.path\n              }] : [...paths, {\n                screen,\n                path: alias.path\n              }], alias.parse));\n            }\n          }\n        }\n        if (config.exact) {\n          // If it's an exact path, we don't need to keep track of the parent screens\n          // So we can clear it\n          paths.length = 0;\n        }\n        paths.push({\n          screen,\n          path: config.path\n        });\n        configs.push(createConfigItem(screen, [...routeNames], [...paths], config.parse));\n        configs.push(...aliasConfigs);\n      }\n      if (typeof config !== 'string' && typeof config.path !== 'string' && config.alias?.length) {\n        throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified in order to use 'alias'.`);\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          var result = createNormalizedConfigs(nestedConfig, config.screens, initials, [...paths], [...parentScreens], routeNames);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  var createConfigItem = (screen, routeNames, paths, parse) => {\n    var parts = [];\n\n    // Parse the path string into parts for easier matching\n    var _loop2 = function (_screen) {\n      parts.push(...(0, _getPatternPartsJs.getPatternParts)(path).map(part => ({\n        ...part,\n        screen: _screen\n      })));\n    };\n    for (var _ref5 of paths) {\n      var _screen = _ref5.screen;\n      var path = _ref5.path;\n      _loop2(_screen);\n    }\n    var regex = parts.length ? new RegExp(`^(${parts.map((it, i) => {\n      if (it.param) {\n        var reg = it.regex || '[^/]+';\n        return `(((?<param_${i}>${reg})\\\\/)${it.optional ? '?' : ''})`;\n      }\n      return `${it.segment === '*' ? '.*' : (0, escape.default)(it.segment)}\\\\/`;\n    }).join('')})$`) : undefined;\n    var segments = parts.map(it => it.segment);\n    var params = parts.map((it, i) => it.param ? {\n      index: i,\n      screen: it.screen,\n      name: it.param\n    } : null).filter(it => it != null);\n    return {\n      screen,\n      regex,\n      segments,\n      params,\n      routeNames,\n      parse\n    };\n  };\n  var findParseConfigForRoute = (routeName, flatConfig) => {\n    for (var config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n\n  // Try to find an initial route connected with the one passed\n  var findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (var config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        var sameParents = true;\n        for (var i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  var createStateObject = (initialRoute, route, isEmpty) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, {\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      } else {\n        return {\n          routes: [{\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      }\n    }\n  };\n  var createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    var state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      var nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, _findFocusedRouteJs.findFocusedRoute)(state);\n    route.path = path.replace(/\\/$/, '');\n    var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n    if (params) {\n      route.params = {\n        ...route.params,\n        ...params\n      };\n    }\n    return state;\n  };\n  var parseQueryParams = (path, parseConfig) => {\n    var query = path.split('?')[1];\n    var params = queryString.parse(query);\n    if (parseConfig) {\n      Object.keys(params).forEach(name => {\n        if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":556,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13],[7,11,1,13,"_interopDefault"],[7,27,1,13,"e"],[7,28,1,13],[8,4,1,13],[8,11,1,13,"e"],[8,12,1,13],[8,16,1,13,"e"],[8,17,1,13],[8,18,1,13,"__esModule"],[8,28,1,13],[8,31,1,13,"e"],[8,32,1,13],[9,6,1,13,"default"],[9,13,1,13],[9,15,1,13,"e"],[10,4,1,13],[11,2,1,13],[12,2,1,13],[12,11,1,13,"_interopNamespace"],[12,29,1,13,"e"],[12,30,1,13],[13,4,1,13],[13,8,1,13,"e"],[13,9,1,13],[13,13,1,13,"e"],[13,14,1,13],[13,15,1,13,"__esModule"],[13,25,1,13],[13,34,1,13,"e"],[13,35,1,13],[14,4,1,13],[14,8,1,13,"n"],[14,9,1,13],[15,4,1,13],[15,8,1,13,"e"],[15,9,1,13],[15,11,1,13,"Object"],[15,17,1,13],[15,18,1,13,"keys"],[15,22,1,13],[15,23,1,13,"e"],[15,24,1,13],[15,26,1,13,"forEach"],[15,33,1,13],[15,44,1,13,"k"],[15,45,1,13],[16,6,1,13],[16,10,1,13,"d"],[16,11,1,13],[16,14,1,13,"Object"],[16,20,1,13],[16,21,1,13,"getOwnPropertyDescriptor"],[16,45,1,13],[16,46,1,13,"e"],[16,47,1,13],[16,49,1,13,"k"],[16,50,1,13],[17,6,1,13,"Object"],[17,12,1,13],[17,13,1,13,"defineProperty"],[17,27,1,13],[17,28,1,13,"n"],[17,29,1,13],[17,31,1,13,"k"],[17,32,1,13],[17,34,1,13,"d"],[17,35,1,13],[17,36,1,13,"get"],[17,39,1,13],[17,42,1,13,"d"],[17,43,1,13],[18,8,1,13,"enumerable"],[18,18,1,13],[19,8,1,13,"get"],[19,11,1,13],[19,22,1,13,"get"],[19,23,1,13],[20,10,1,13],[20,17,1,13,"e"],[20,18,1,13],[20,19,1,13,"k"],[20,20,1,13],[21,8,1,13],[22,6,1,13],[23,4,1,13],[24,4,1,13,"n"],[24,5,1,13],[24,6,1,13,"default"],[24,13,1,13],[24,16,1,13,"e"],[24,17,1,13],[25,4,1,13],[25,11,1,13,"n"],[25,12,1,13],[26,2,1,13],[27,2,31,0,"exports"],[27,9,31,0],[27,10,31,0,"getStateFromPath"],[27,26,31,0],[27,29,31,0,"getStateFromPath"],[27,45,31,0],[28,2,100,1],[28,6,100,1,"_babelRuntimeHelpersSlicedToArray"],[28,39,100,1],[28,42,100,1,"require"],[28,49,100,1],[28,50,100,1,"_dependencyMap"],[28,64,100,1],[29,2,100,1],[29,6,100,1,"_slicedToArray"],[29,20,100,1],[29,23,100,1,"_interopDefault"],[29,38,100,1],[29,39,100,1,"_babelRuntimeHelpersSlicedToArray"],[29,72,100,1],[30,2,3,0],[30,6,3,0,"_escapeStringRegexp"],[30,25,3,0],[30,28,3,0,"require"],[30,35,3,0],[30,36,3,0,"_dependencyMap"],[30,50,3,0],[31,2,3,0],[31,6,3,0,"escape"],[31,12,3,0],[31,15,3,0,"_interopDefault"],[31,30,3,0],[31,31,3,0,"_escapeStringRegexp"],[31,50,3,0],[32,2,4,0],[32,6,4,0,"_queryString"],[32,18,4,0],[32,21,4,0,"require"],[32,28,4,0],[32,29,4,0,"_dependencyMap"],[32,43,4,0],[33,2,4,0],[33,6,4,0,"queryString"],[33,17,4,0],[33,20,4,0,"_interopNamespace"],[33,37,4,0],[33,38,4,0,"_queryString"],[33,50,4,0],[34,2,5,0],[34,6,5,0,"_arrayStartsWithJs"],[34,24,5,0],[34,27,5,0,"require"],[34,34,5,0],[34,35,5,0,"_dependencyMap"],[34,49,5,0],[35,2,6,0],[35,6,6,0,"_findFocusedRouteJs"],[35,25,6,0],[35,28,6,0,"require"],[35,35,6,0],[35,36,6,0,"_dependencyMap"],[35,50,6,0],[36,2,7,0],[36,6,7,0,"_getPatternPartsJs"],[36,24,7,0],[36,27,7,0,"require"],[36,34,7,0],[36,35,7,0,"_dependencyMap"],[36,49,7,0],[37,2,8,0],[37,6,8,0,"_isArrayEqualJs"],[37,21,8,0],[37,24,8,0,"require"],[37,31,8,0],[37,32,8,0,"_dependencyMap"],[37,46,8,0],[38,2,9,0],[38,6,9,0,"_validatePathConfigJs"],[38,27,9,0],[38,30,9,0,"require"],[38,37,9,0],[38,38,9,0,"_dependencyMap"],[38,52,9,0],[39,2,10,0],[40,0,11,0],[41,0,12,0],[42,0,13,0],[43,0,14,0],[44,0,15,0],[45,0,16,0],[46,0,17,0],[47,0,18,0],[48,0,19,0],[49,0,20,0],[50,0,21,0],[51,0,22,0],[52,0,23,0],[53,0,24,0],[54,0,25,0],[55,0,26,0],[56,0,27,0],[57,0,28,0],[58,0,29,0],[59,0,30,0],[60,2,31,7],[60,11,31,16,"getStateFromPath"],[60,27,31,32,"getStateFromPath"],[60,28,31,33,"path"],[60,32,31,37],[60,34,31,39,"options"],[60,41,31,46],[60,43,31,48],[61,4,32,2],[61,8,32,2,"_getConfigResources"],[61,27,32,2],[61,30,35,6,"getConfigResources"],[61,48,35,24],[61,49,35,25,"options"],[61,56,35,32],[61,57,35,33],[62,6,33,4,"initialRoutes"],[62,19,33,17],[62,22,33,17,"_getConfigResources"],[62,41,33,17],[62,42,33,4,"initialRoutes"],[62,55,33,17],[63,6,34,4,"configs"],[63,13,34,11],[63,16,34,11,"_getConfigResources"],[63,35,34,11],[63,36,34,4,"configs"],[63,43,34,11],[64,4,36,2],[64,8,36,8,"screens"],[64,15,36,15],[64,18,36,18,"options"],[64,25,36,25],[64,27,36,27,"screens"],[64,34,36,34],[65,4,37,2],[65,8,37,6,"remaining"],[65,17,37,15],[65,20,37,18,"path"],[65,24,37,22],[65,25,37,23,"replace"],[65,32,37,30],[65,33,37,31],[65,39,37,37],[65,41,37,39],[65,44,37,42],[65,45,37,43],[65,46,37,44],[66,4,37,44],[66,5,38,3,"replace"],[66,12,38,10],[66,13,38,11],[66,18,38,16],[66,20,38,18],[66,22,38,20],[66,23,38,21],[66,24,38,22],[67,4,38,22],[67,5,39,3,"replace"],[67,12,39,10],[67,13,39,11],[67,20,39,18],[67,22,39,20],[67,24,39,22],[67,25,39,23],[67,26,39,24],[67,27,39,25],[69,4,41,2],[70,4,42,2,"remaining"],[70,13,42,11],[70,16,42,14,"remaining"],[70,25,42,23],[70,26,42,24,"endsWith"],[70,34,42,32],[70,35,42,33],[70,38,42,36],[70,39,42,37],[70,42,42,40,"remaining"],[70,51,42,49],[70,54,42,52],[70,57,42,55,"remaining"],[70,66,42,64],[70,69,42,67],[71,4,43,2],[71,8,43,8,"prefix"],[71,14,43,14],[71,17,43,17,"options"],[71,24,43,24],[71,26,43,26,"path"],[71,30,43,30],[71,32,43,32,"replace"],[71,39,43,39],[71,40,43,40],[71,45,43,45],[71,47,43,47],[71,49,43,49],[71,50,43,50],[71,51,43,51],[71,52,43,52],[73,4,45,2],[73,8,45,6,"prefix"],[73,14,45,12],[73,16,45,14],[74,6,46,4],[75,6,47,4],[75,10,47,10,"normalizedPrefix"],[75,26,47,26],[75,29,47,29,"prefix"],[75,35,47,35],[75,36,47,36,"endsWith"],[75,44,47,44],[75,45,47,45],[75,48,47,48],[75,49,47,49],[75,52,47,52,"prefix"],[75,58,47,58],[75,61,47,61],[75,64,47,64,"prefix"],[75,70,47,70],[75,73,47,73],[77,6,49,4],[78,6,50,4],[78,10,50,8],[78,11,50,9,"remaining"],[78,20,50,18],[78,21,50,19,"startsWith"],[78,31,50,29],[78,32,50,30,"normalizedPrefix"],[78,48,50,46],[78,49,50,47],[78,51,50,49],[79,8,51,6],[79,15,51,13,"undefined"],[79,24,51,22],[80,6,52,4],[82,6,54,4],[83,6,55,4,"remaining"],[83,15,55,13],[83,18,55,16,"remaining"],[83,27,55,25],[83,28,55,26,"replace"],[83,35,55,33],[83,36,55,34,"normalizedPrefix"],[83,52,55,50],[83,54,55,52],[83,56,55,54],[83,57,55,55],[84,4,56,2],[85,4,57,2],[85,8,57,6,"screens"],[85,15,57,13],[85,20,57,18,"undefined"],[85,29,57,27],[85,31,57,29],[86,6,58,4],[87,6,59,4],[87,10,59,10,"routes"],[87,17,59,16],[87,20,59,19,"remaining"],[87,29,59,28],[87,30,59,29,"split"],[87,35,59,34],[87,36,59,35],[87,39,59,38],[87,40,59,39],[87,41,59,40,"filter"],[87,47,59,46],[87,48,59,47,"Boolean"],[87,55,59,54],[87,56,59,55],[87,57,59,56,"map"],[87,60,59,59],[87,61,59,60,"segment"],[87,68,59,67],[87,72,59,71],[88,8,60,6],[88,12,60,12,"name"],[88,16,60,16],[88,19,60,19,"decodeURIComponent"],[88,37,60,37],[88,38,60,38,"segment"],[88,45,60,45],[88,46,60,46],[89,8,61,6],[89,15,61,13],[90,10,62,8,"name"],[91,8,63,6],[91,9,63,7],[92,6,64,4],[92,7,64,5],[92,8,64,6],[93,6,65,4],[93,10,65,8,"routes"],[93,17,65,14],[93,18,65,15,"length"],[93,24,65,21],[93,26,65,23],[94,8,66,6],[94,15,66,13,"createNestedStateObject"],[94,38,66,36],[94,39,66,37,"path"],[94,43,66,41],[94,45,66,43,"routes"],[94,52,66,49],[94,54,66,51,"initialRoutes"],[94,67,66,64],[94,68,66,65],[95,6,67,4],[96,6,68,4],[96,13,68,11,"undefined"],[96,22,68,20],[97,4,69,2],[98,4,70,2],[98,8,70,6,"remaining"],[98,17,70,15],[98,22,70,20],[98,25,70,23],[98,27,70,25],[99,6,71,4],[100,6,72,4],[101,6,73,4],[101,10,73,10,"match"],[101,15,73,15],[101,18,73,18,"configs"],[101,25,73,25],[101,26,73,26,"find"],[101,30,73,30],[101,31,73,31,"config"],[101,37,73,37],[101,41,73,41,"config"],[101,47,73,47],[101,48,73,48,"segments"],[101,56,73,56],[101,57,73,57,"join"],[101,61,73,61],[101,62,73,62],[101,65,73,65],[101,66,73,66],[101,71,73,71],[101,73,73,73],[101,74,73,74],[102,6,74,4],[102,10,74,8,"match"],[102,15,74,13],[102,17,74,15],[103,8,75,6],[103,15,75,13,"createNestedStateObject"],[103,38,75,36],[103,39,75,37,"path"],[103,43,75,41],[103,45,75,43,"match"],[103,50,75,48],[103,51,75,49,"routeNames"],[103,61,75,59],[103,62,75,60,"map"],[103,65,75,63],[103,66,75,64,"name"],[103,70,75,68],[103,75,75,73],[104,10,76,8,"name"],[105,8,77,6],[105,9,77,7],[105,10,77,8],[105,11,77,9],[105,13,77,11,"initialRoutes"],[105,26,77,24],[105,28,77,26,"configs"],[105,35,77,33],[105,36,77,34],[106,6,78,4],[107,6,79,4],[107,13,79,11,"undefined"],[107,22,79,20],[108,4,80,2],[109,4,81,2],[109,8,81,6,"result"],[109,14,81,12],[110,4,82,2],[110,8,82,6,"current"],[110,15,82,13],[112,4,84,2],[113,4,85,2],[114,4,86,2],[114,8,86,2,"_matchAgainstConfigs"],[114,28,86,2],[114,31,89,6,"matchAgainstConfigs"],[114,50,89,25],[114,51,89,26,"remaining"],[114,60,89,35],[114,62,89,37,"configs"],[114,69,89,44],[114,70,89,45],[115,6,87,4,"routes"],[115,12,87,10],[115,15,87,10,"_matchAgainstConfigs"],[115,35,87,10],[115,36,87,4,"routes"],[115,42,87,10],[116,6,88,4,"remainingPath"],[116,19,88,17],[116,22,88,17,"_matchAgainstConfigs"],[116,42,88,17],[116,43,88,4,"remainingPath"],[116,56,88,17],[117,4,90,2],[117,8,90,6,"routes"],[117,14,90,12],[117,19,90,17,"undefined"],[117,28,90,26],[117,30,90,28],[118,6,91,4],[119,6,92,4,"current"],[119,13,92,11],[119,16,92,14,"createNestedStateObject"],[119,39,92,37],[119,40,92,38,"path"],[119,44,92,42],[119,46,92,44,"routes"],[119,52,92,50],[119,54,92,52,"initialRoutes"],[119,67,92,65],[119,69,92,67,"configs"],[119,76,92,74],[119,77,92,75],[120,6,93,4,"remaining"],[120,15,93,13],[120,18,93,16,"remainingPath"],[120,31,93,29],[121,6,94,4,"result"],[121,12,94,10],[121,15,94,13,"current"],[121,22,94,20],[122,4,95,2],[123,4,96,2],[123,8,96,6,"current"],[123,15,96,13],[123,19,96,17],[123,23,96,21],[123,27,96,25,"result"],[123,33,96,31],[123,37,96,35],[123,41,96,39],[123,43,96,41],[124,6,97,4],[124,13,97,11,"undefined"],[124,22,97,20],[125,4,98,2],[126,4,99,2],[126,11,99,9,"result"],[126,17,99,15],[127,2,100,0],[129,2,102,0],[130,0,103,0],[131,0,104,0],[132,2,105,0],[132,6,105,6,"cachedConfigResources"],[132,27,105,27],[132,30,105,30],[132,34,105,34,"WeakMap"],[132,41,105,41],[132,42,105,42],[132,43,105,43],[133,2,106,0],[133,11,106,9,"getConfigResources"],[133,29,106,27,"getConfigResources"],[133,30,106,28,"options"],[133,37,106,35],[133,39,106,37],[134,4,107,2],[134,8,107,6],[134,9,107,7,"options"],[134,16,107,14],[134,18,107,16],[134,25,107,23,"prepareConfigResources"],[134,47,107,45],[134,48,107,46],[134,49,107,47],[135,4,108,2],[135,8,108,8,"cached"],[135,14,108,14],[135,17,108,17,"cachedConfigResources"],[135,38,108,38],[135,39,108,39,"get"],[135,42,108,42],[135,43,108,43,"options"],[135,50,108,50],[135,51,108,51],[136,4,109,2],[136,8,109,6,"cached"],[136,14,109,12],[136,16,109,14],[136,23,109,21,"cached"],[136,29,109,27],[137,4,110,2],[137,8,110,8,"resources"],[137,17,110,17],[137,20,110,20,"prepareConfigResources"],[137,42,110,42],[137,43,110,43,"options"],[137,50,110,50],[137,51,110,51],[138,4,111,2,"cachedConfigResources"],[138,25,111,23],[138,26,111,24,"set"],[138,29,111,27],[138,30,111,28,"options"],[138,37,111,35],[138,39,111,37,"resources"],[138,48,111,46],[138,49,111,47],[139,4,112,2],[139,11,112,9,"resources"],[139,20,112,18],[140,2,113,0],[141,2,114,0],[141,11,114,9,"prepareConfigResources"],[141,33,114,31,"prepareConfigResources"],[141,34,114,32,"options"],[141,41,114,39],[141,43,114,41],[142,4,115,2],[142,8,115,6,"options"],[142,15,115,13],[142,17,115,15],[143,6,116,4],[143,10,116,4,"validatePathConfig"],[143,31,116,22],[143,32,116,22,"validatePathConfig"],[143,50,116,22],[143,52,116,23,"options"],[143,59,116,30],[143,60,116,31],[144,4,117,2],[145,4,118,2],[145,8,118,8,"initialRoutes"],[145,21,118,21],[145,24,118,24,"getInitialRoutes"],[145,40,118,40],[145,41,118,41,"options"],[145,48,118,48],[145,49,118,49],[146,4,119,2],[146,8,119,8,"configs"],[146,15,119,15],[146,18,119,18,"getSortedNormalizedConfigs"],[146,44,119,44],[146,45,119,45,"initialRoutes"],[146,58,119,58],[146,60,119,60,"options"],[146,67,119,67],[146,69,119,69,"screens"],[146,76,119,76],[146,77,119,77],[147,4,120,2,"checkForDuplicatedConfigs"],[147,29,120,27],[147,30,120,28,"configs"],[147,37,120,35],[147,38,120,36],[148,4,121,2],[148,8,121,8,"configWithRegexes"],[148,25,121,25],[148,28,121,28,"getConfigsWithRegexes"],[148,49,121,49],[148,50,121,50,"configs"],[148,57,121,57],[148,58,121,58],[149,4,122,2],[149,11,122,9],[150,6,123,4,"initialRoutes"],[150,19,123,17],[151,6,124,4,"configs"],[151,13,124,11],[152,6,125,4,"configWithRegexes"],[153,4,126,2],[153,5,126,3],[154,2,127,0],[155,2,128,0],[155,11,128,9,"getInitialRoutes"],[155,27,128,25,"getInitialRoutes"],[155,28,128,26,"options"],[155,35,128,33],[155,37,128,35],[156,4,129,2],[156,8,129,8,"initialRoutes"],[156,21,129,21],[156,24,129,24],[156,26,129,26],[157,4,130,2],[157,8,130,6,"options"],[157,15,130,13],[157,17,130,15,"initialRouteName"],[157,33,130,31],[157,35,130,33],[158,6,131,4,"initialRoutes"],[158,19,131,17],[158,20,131,18,"push"],[158,24,131,22],[158,25,131,23],[159,8,132,6,"initialRouteName"],[159,24,132,22],[159,26,132,24,"options"],[159,33,132,31],[159,34,132,32,"initialRouteName"],[159,50,132,48],[160,8,133,6,"parentScreens"],[160,21,133,19],[160,23,133,21],[161,6,134,4],[161,7,134,5],[161,8,134,6],[162,4,135,2],[163,4,136,2],[163,11,136,9,"initialRoutes"],[163,24,136,22],[164,2,137,0],[165,2,138,0],[165,11,138,9,"getSortedNormalizedConfigs"],[165,37,138,35,"getSortedNormalizedConfigs"],[165,38,138,36,"initialRoutes"],[165,51,138,49],[165,53,138,65],[166,4,138,65],[166,8,138,51,"screens"],[166,15,138,58],[166,18,138,58,"arguments"],[166,27,138,58],[166,28,138,58,"length"],[166,34,138,58],[166,42,138,58,"arguments"],[166,51,138,58],[166,59,138,58,"undefined"],[166,68,138,58],[166,71,138,58,"arguments"],[166,80,138,58],[166,86,138,61],[166,87,138,62],[166,88,138,63],[167,4,139,2],[168,4,140,2],[168,11,140,9],[168,13,140,11],[168,14,140,12,"concat"],[168,20,140,18],[168,21,140,19],[168,24,140,22,"Object"],[168,30,140,28],[168,31,140,29,"keys"],[168,35,140,33],[168,36,140,34,"screens"],[168,43,140,41],[168,44,140,42],[168,45,140,43,"map"],[168,48,140,46],[168,49,140,47,"key"],[168,52,140,50],[168,56,140,54,"createNormalizedConfigs"],[168,79,140,77],[168,80,140,78,"key"],[168,83,140,81],[168,85,140,83,"screens"],[168,92,140,90],[168,94,140,92,"initialRoutes"],[168,107,140,105],[168,109,140,107],[168,111,140,109],[168,113,140,111],[168,115,140,113],[168,117,140,115],[168,119,140,117],[168,120,140,118],[168,121,140,119],[168,122,140,120],[168,123,140,121,"sort"],[168,127,140,125],[168,128,140,126],[168,129,140,127,"a"],[168,130,140,128],[168,132,140,130,"b"],[168,133,140,131],[168,138,140,136],[169,6,141,4],[170,6,142,4],[171,6,143,4],[172,6,144,4],[173,6,145,4],[174,6,146,4],[176,6,148,4],[177,6,149,4],[178,6,150,4],[178,10,150,8],[178,14,150,8,"isArrayEqual"],[178,29,150,20],[178,30,150,20,"isArrayEqual"],[178,42,150,20],[178,44,150,21,"a"],[178,45,150,22],[178,46,150,23,"segments"],[178,54,150,31],[178,56,150,33,"b"],[178,57,150,34],[178,58,150,35,"segments"],[178,66,150,43],[178,67,150,44],[178,69,150,46],[179,8,151,6],[179,15,151,13,"b"],[179,16,151,14],[179,17,151,15,"routeNames"],[179,27,151,25],[179,28,151,26,"join"],[179,32,151,30],[179,33,151,31],[179,36,151,34],[179,37,151,35],[179,38,151,36,"localeCompare"],[179,51,151,49],[179,52,151,50,"a"],[179,53,151,51],[179,54,151,52,"routeNames"],[179,64,151,62],[179,65,151,63,"join"],[179,69,151,67],[179,70,151,68],[179,73,151,71],[179,74,151,72],[179,75,151,73],[180,6,152,4],[182,6,154,4],[183,6,155,4],[184,6,156,4],[184,10,156,8],[184,14,156,8,"arrayStartsWith"],[184,32,156,23],[184,33,156,23,"arrayStartsWith"],[184,48,156,23],[184,50,156,24,"a"],[184,51,156,25],[184,52,156,26,"segments"],[184,60,156,34],[184,62,156,36,"b"],[184,63,156,37],[184,64,156,38,"segments"],[184,72,156,46],[184,73,156,47],[184,75,156,49],[185,8,157,6],[186,6,158,4],[187,6,159,4],[187,10,159,8],[187,14,159,8,"arrayStartsWith"],[187,32,159,23],[187,33,159,23,"arrayStartsWith"],[187,48,159,23],[187,50,159,24,"b"],[187,51,159,25],[187,52,159,26,"segments"],[187,60,159,34],[187,62,159,36,"a"],[187,63,159,37],[187,64,159,38,"segments"],[187,72,159,46],[187,73,159,47],[187,75,159,49],[188,8,160,6],[188,15,160,13],[188,16,160,14],[189,6,161,4],[190,6,162,4],[190,11,162,9],[190,15,162,13,"i"],[190,16,162,14],[190,19,162,17],[190,20,162,18],[190,22,162,20,"i"],[190,23,162,21],[190,26,162,24,"Math"],[190,30,162,28],[190,31,162,29,"max"],[190,34,162,32],[190,35,162,33,"a"],[190,36,162,34],[190,37,162,35,"segments"],[190,45,162,43],[190,46,162,44,"length"],[190,52,162,50],[190,54,162,52,"b"],[190,55,162,53],[190,56,162,54,"segments"],[190,64,162,62],[190,65,162,63,"length"],[190,71,162,69],[190,72,162,70],[190,74,162,72,"i"],[190,75,162,73],[190,77,162,75],[190,79,162,77],[191,8,163,6],[192,8,164,6],[192,12,164,10,"a"],[192,13,164,11],[192,14,164,12,"segments"],[192,22,164,20],[192,23,164,21,"i"],[192,24,164,22],[192,25,164,23],[192,29,164,27],[192,33,164,31],[192,35,164,33],[193,10,165,8],[193,17,165,15],[193,18,165,16],[194,8,166,6],[196,8,168,6],[197,8,169,6],[197,12,169,10,"b"],[197,13,169,11],[197,14,169,12,"segments"],[197,22,169,20],[197,23,169,21,"i"],[197,24,169,22],[197,25,169,23],[197,29,169,27],[197,33,169,31],[197,35,169,33],[198,10,170,8],[199,8,171,6],[200,8,172,6],[200,12,172,12,"aWildCard"],[200,21,172,21],[200,24,172,24,"a"],[200,25,172,25],[200,26,172,26,"segments"],[200,34,172,34],[200,35,172,35,"i"],[200,36,172,36],[200,37,172,37],[200,42,172,42],[200,45,172,45],[201,8,173,6],[201,12,173,12,"bWildCard"],[201,21,173,21],[201,24,173,24,"b"],[201,25,173,25],[201,26,173,26,"segments"],[201,34,173,34],[201,35,173,35,"i"],[201,36,173,36],[201,37,173,37],[201,42,173,42],[201,45,173,45],[202,8,174,6],[202,12,174,12,"aParam"],[202,18,174,18],[202,21,174,21,"a"],[202,22,174,22],[202,23,174,23,"segments"],[202,31,174,31],[202,32,174,32,"i"],[202,33,174,33],[202,34,174,34],[202,35,174,35,"startsWith"],[202,45,174,45],[202,46,174,46],[202,49,174,49],[202,50,174,50],[203,8,175,6],[203,12,175,12,"bParam"],[203,18,175,18],[203,21,175,21,"b"],[203,22,175,22],[203,23,175,23,"segments"],[203,31,175,31],[203,32,175,32,"i"],[203,33,175,33],[203,34,175,34],[203,35,175,35,"startsWith"],[203,45,175,45],[203,46,175,46],[203,49,175,49],[203,50,175,50],[204,8,176,6],[204,12,176,12,"aRegex"],[204,18,176,18],[204,21,176,21,"aParam"],[204,27,176,27],[204,31,176,31,"a"],[204,32,176,32],[204,33,176,33,"segments"],[204,41,176,41],[204,42,176,42,"i"],[204,43,176,43],[204,44,176,44],[204,45,176,45,"includes"],[204,53,176,53],[204,54,176,54],[204,57,176,57],[204,58,176,58],[205,8,177,6],[205,12,177,12,"bRegex"],[205,18,177,18],[205,21,177,21,"bParam"],[205,27,177,27],[205,31,177,31,"b"],[205,32,177,32],[205,33,177,33,"segments"],[205,41,177,41],[205,42,177,42,"i"],[205,43,177,43],[205,44,177,44],[205,45,177,45,"includes"],[205,53,177,53],[205,54,177,54],[205,57,177,57],[205,58,177,58],[207,8,179,6],[208,8,180,6],[208,12,180,10,"aWildCard"],[208,21,180,19],[208,25,180,23,"bWildCard"],[208,34,180,32],[208,38,180,36,"aRegex"],[208,44,180,42],[208,48,180,46,"bRegex"],[208,54,180,52],[208,56,180,54],[209,10,181,8],[210,8,182,6],[212,8,184,6],[213,8,185,6],[213,12,185,10,"aWildCard"],[213,21,185,19],[213,25,185,23],[213,26,185,24,"bWildCard"],[213,35,185,33],[213,37,185,35],[214,10,186,8],[214,17,186,15],[214,18,186,16],[215,8,187,6],[217,8,189,6],[218,8,190,6],[218,12,190,10,"bWildCard"],[218,21,190,19],[218,25,190,23],[218,26,190,24,"aWildCard"],[218,35,190,33],[218,37,190,35],[219,10,191,8],[220,8,192,6],[222,8,194,6],[223,8,195,6],[223,12,195,10,"aParam"],[223,18,195,16],[223,22,195,20],[223,23,195,21,"bParam"],[223,29,195,27],[223,31,195,29],[224,10,196,8],[224,17,196,15],[224,18,196,16],[225,8,197,6],[227,8,199,6],[228,8,200,6],[228,12,200,10,"bParam"],[228,18,200,16],[228,22,200,20],[228,23,200,21,"aParam"],[228,29,200,27],[228,31,200,29],[229,10,201,8],[230,8,202,6],[232,8,204,6],[233,8,205,6],[233,12,205,10,"aRegex"],[233,18,205,16],[233,22,205,20],[233,23,205,21,"bRegex"],[233,29,205,27],[233,31,205,29],[234,10,206,8],[235,8,207,6],[237,8,209,6],[238,8,210,6],[238,12,210,10,"bRegex"],[238,18,210,16],[238,22,210,20],[238,23,210,21,"aRegex"],[238,29,210,27],[238,31,210,29],[239,10,211,8],[239,17,211,15],[239,18,211,16],[240,8,212,6],[241,6,213,4],[242,6,214,4],[242,13,214,11,"a"],[242,14,214,12],[242,15,214,13,"segments"],[242,23,214,21],[242,24,214,22,"length"],[242,30,214,28],[242,33,214,31,"b"],[242,34,214,32],[242,35,214,33,"segments"],[242,43,214,41],[242,44,214,42,"length"],[242,50,214,48],[243,4,215,2],[243,5,215,3],[243,6,215,4],[244,2,216,0],[245,2,217,0],[245,11,217,9,"checkForDuplicatedConfigs"],[245,36,217,34,"checkForDuplicatedConfigs"],[245,37,217,35,"configs"],[245,44,217,42],[245,46,217,44],[246,4,218,2],[247,4,219,2,"configs"],[247,11,219,9],[247,12,219,10,"reduce"],[247,18,219,16],[247,19,219,17],[247,20,219,18,"acc"],[247,23,219,21],[247,25,219,23,"config"],[247,31,219,29],[247,36,219,34],[248,6,220,4],[248,10,220,10,"pattern"],[248,17,220,17],[248,20,220,20,"config"],[248,26,220,26],[248,27,220,27,"segments"],[248,35,220,35],[248,36,220,36,"join"],[248,40,220,40],[248,41,220,41],[248,44,220,44],[248,45,220,45],[249,6,221,4],[249,10,221,8,"acc"],[249,13,221,11],[249,14,221,12,"pattern"],[249,21,221,19],[249,22,221,20],[249,24,221,22],[250,8,222,6],[250,12,222,12,"a"],[250,13,222,13],[250,16,222,16,"acc"],[250,19,222,19],[250,20,222,20,"pattern"],[250,27,222,27],[250,28,222,28],[250,29,222,29,"routeNames"],[250,39,222,39],[251,8,223,6],[251,12,223,12,"b"],[251,13,223,13],[251,16,223,16,"config"],[251,22,223,22],[251,23,223,23,"routeNames"],[251,33,223,33],[253,8,225,6],[254,8,226,6],[255,8,227,6],[255,12,227,12,"intersects"],[255,22,227,22],[255,25,227,25,"a"],[255,26,227,26],[255,27,227,27,"length"],[255,33,227,33],[255,36,227,36,"b"],[255,37,227,37],[255,38,227,38,"length"],[255,44,227,44],[255,47,227,47,"b"],[255,48,227,48],[255,49,227,49,"every"],[255,54,227,54],[255,55,227,55],[255,56,227,56,"it"],[255,58,227,58],[255,60,227,60,"i"],[255,61,227,61],[255,66,227,66,"a"],[255,67,227,67],[255,68,227,68,"i"],[255,69,227,69],[255,70,227,70],[255,75,227,75,"it"],[255,77,227,77],[255,78,227,78],[255,81,227,81,"a"],[255,82,227,82],[255,83,227,83,"every"],[255,88,227,88],[255,89,227,89],[255,90,227,90,"it"],[255,92,227,92],[255,94,227,94,"i"],[255,95,227,95],[255,100,227,100,"b"],[255,101,227,101],[255,102,227,102,"i"],[255,103,227,103],[255,104,227,104],[255,109,227,109,"it"],[255,111,227,111],[255,112,227,112],[256,8,228,6],[256,12,228,10],[256,13,228,11,"intersects"],[256,23,228,21],[256,25,228,23],[257,10,229,8],[257,16,229,14],[257,20,229,18,"Error"],[257,25,229,23],[257,26,229,24],[257,91,229,89,"pattern"],[257,98,229,96],[257,121,229,119,"a"],[257,122,229,120],[257,123,229,121,"join"],[257,127,229,125],[257,128,229,126],[257,133,229,131],[257,134,229,132],[257,144,229,142,"b"],[257,145,229,143],[257,146,229,144,"join"],[257,150,229,148],[257,151,229,149],[257,156,229,154],[257,157,229,155],[257,229,229,227],[257,230,229,228],[258,8,230,6],[259,6,231,4],[260,6,232,4],[260,13,232,11,"Object"],[260,19,232,17],[260,20,232,18,"assign"],[260,26,232,24],[260,27,232,25,"acc"],[260,30,232,28],[260,32,232,30],[261,8,233,6],[261,9,233,7,"pattern"],[261,16,233,14],[261,19,233,17,"config"],[262,6,234,4],[262,7,234,5],[262,8,234,6],[263,4,235,2],[263,5,235,3],[263,7,235,5],[263,8,235,6],[263,9,235,7],[263,10,235,8],[264,2,236,0],[265,2,237,0],[265,11,237,9,"getConfigsWithRegexes"],[265,32,237,30,"getConfigsWithRegexes"],[265,33,237,31,"configs"],[265,40,237,38],[265,42,237,40],[266,4,238,2],[266,11,238,9,"configs"],[266,18,238,16],[266,19,238,17,"map"],[266,22,238,20],[266,23,238,21,"c"],[266,24,238,22],[266,29,238,27],[267,6,239,4],[267,9,239,7,"c"],[267,10,239,8],[268,6,240,4],[269,6,241,4,"regex"],[269,11,241,9],[269,13,241,11,"c"],[269,14,241,12],[269,15,241,13,"regex"],[269,20,241,18],[269,23,241,21],[269,27,241,25,"RegExp"],[269,33,241,31],[269,34,241,32,"c"],[269,35,241,33],[269,36,241,34,"regex"],[269,41,241,39],[269,42,241,40,"source"],[269,48,241,46],[269,51,241,49],[269,54,241,52],[269,55,241,53],[269,58,241,56,"undefined"],[270,4,242,2],[270,5,242,3],[270,6,242,4],[270,7,242,5],[271,2,243,0],[272,2,244,0],[272,6,244,6,"matchAgainstConfigs"],[272,25,244,25],[272,28,244,28,"matchAgainstConfigs"],[272,29,244,29,"remaining"],[272,38,244,38],[272,40,244,40,"configs"],[272,47,244,47],[272,52,244,52],[273,4,245,2],[273,8,245,6,"routes"],[273,14,245,12],[274,4,246,2],[274,8,246,6,"remainingPath"],[274,21,246,19],[274,24,246,22,"remaining"],[274,33,246,31],[276,4,248,2],[277,4,248,2],[277,8,248,2,"_loop"],[277,13,248,2],[277,25,248,2,"_loop"],[277,26,248,2,"config"],[277,32,248,2],[277,34,249,32],[278,8,250,4],[278,12,250,8],[278,13,250,9,"config"],[278,19,250,15],[278,20,250,16,"regex"],[278,25,250,21],[278,27,250,23],[279,10,250,23],[280,8,252,4],[281,8,253,4],[281,12,253,10,"match"],[281,17,253,15],[281,20,253,18,"remainingPath"],[281,33,253,31],[281,34,253,32,"match"],[281,39,253,37],[281,40,253,38,"config"],[281,46,253,44],[281,47,253,45,"regex"],[281,52,253,50],[281,53,253,51],[283,8,255,4],[284,8,256,4],[284,12,256,8,"match"],[284,17,256,13],[284,19,256,15],[285,10,257,6,"routes"],[285,16,257,12],[285,19,257,15,"config"],[285,25,257,21],[285,26,257,22,"routeNames"],[285,36,257,32],[285,37,257,33,"map"],[285,40,257,36],[285,41,257,37,"routeName"],[285,50,257,46],[285,54,257,50],[286,12,258,8],[286,16,258,14,"routeConfig"],[286,27,258,25],[286,30,258,28,"configs"],[286,37,258,35],[286,38,258,36,"find"],[286,42,258,40],[286,43,258,41,"c"],[286,44,258,42],[286,48,258,46],[287,14,259,10],[288,14,260,10],[288,21,260,17,"c"],[288,22,260,18],[288,23,260,19,"screen"],[288,29,260,25],[288,34,260,30,"routeName"],[288,43,260,39],[288,47,260,43],[288,51,260,43,"arrayStartsWith"],[288,69,260,58],[288,70,260,58,"arrayStartsWith"],[288,85,260,58],[288,87,260,59,"config"],[288,93,260,65],[288,94,260,66,"segments"],[288,102,260,74],[288,104,260,76,"c"],[288,105,260,77],[288,106,260,78,"segments"],[288,114,260,86],[288,115,260,87],[289,12,261,8],[289,13,261,9],[289,14,261,10],[290,12,262,8],[290,16,262,14,"params"],[290,22,262,20],[290,25,262,23,"routeConfig"],[290,36,262,34],[290,40,262,38,"match"],[290,45,262,43],[290,46,262,44,"groups"],[290,52,262,50],[290,55,262,53,"Object"],[290,61,262,59],[290,62,262,60,"fromEntries"],[290,73,262,71],[290,74,262,72,"Object"],[290,80,262,78],[290,81,262,79,"entries"],[290,88,262,86],[290,89,262,87,"match"],[290,94,262,92],[290,95,262,93,"groups"],[290,101,262,99],[290,102,262,100],[290,103,262,101,"map"],[290,106,262,104],[290,107,262,105,"_ref"],[290,111,262,105],[290,115,262,123],[291,14,262,123],[291,18,262,123,"_ref2"],[291,23,262,123],[291,30,262,123,"_slicedToArray"],[291,44,262,123],[291,45,262,123,"default"],[291,52,262,123],[291,54,262,123,"_ref"],[291,58,262,123],[292,16,262,107,"key"],[292,19,262,110],[292,22,262,110,"_ref2"],[292,27,262,110],[293,16,262,112,"value"],[293,21,262,117],[293,24,262,117,"_ref2"],[293,29,262,117],[294,14,263,10],[294,18,263,16,"index"],[294,23,263,21],[294,26,263,24,"Number"],[294,32,263,30],[294,33,263,31,"key"],[294,36,263,34],[294,37,263,35,"replace"],[294,44,263,42],[294,45,263,43],[294,53,263,51],[294,55,263,53],[294,57,263,55],[294,58,263,56],[294,59,263,57],[295,14,264,10],[295,18,264,16,"param"],[295,23,264,21],[295,26,264,24,"routeConfig"],[295,37,264,35],[295,38,264,36,"params"],[295,44,264,42],[295,45,264,43,"find"],[295,49,264,47],[295,50,264,48,"it"],[295,52,264,50],[295,56,264,54,"it"],[295,58,264,56],[295,59,264,57,"index"],[295,64,264,62],[295,69,264,67,"index"],[295,74,264,72],[295,75,264,73],[296,14,265,10],[296,18,265,14,"param"],[296,23,265,19],[296,25,265,21,"screen"],[296,31,265,27],[296,36,265,32,"routeName"],[296,45,265,41],[296,49,265,45,"param"],[296,54,265,50],[296,56,265,52,"name"],[296,60,265,56],[296,62,265,58],[297,16,266,12],[297,23,266,19],[297,24,266,20,"param"],[297,29,266,25],[297,30,266,26,"name"],[297,34,266,30],[297,36,266,32,"value"],[297,41,266,37],[297,42,266,38],[298,14,267,10],[299,14,268,10],[299,21,268,17],[299,25,268,21],[300,12,269,8],[300,13,269,9],[300,14,269,10],[300,15,269,11,"filter"],[300,21,269,17],[300,22,269,18,"it"],[300,24,269,20],[300,28,269,24,"it"],[300,30,269,26],[300,34,269,30],[300,38,269,34],[300,39,269,35],[300,40,269,36,"map"],[300,43,269,39],[300,44,269,40,"_ref3"],[300,49,269,40],[300,53,269,58],[301,14,269,58],[301,18,269,58,"_ref4"],[301,23,269,58],[301,30,269,58,"_slicedToArray"],[301,44,269,58],[301,45,269,58,"default"],[301,52,269,58],[301,54,269,58,"_ref3"],[301,59,269,58],[302,16,269,42,"key"],[302,19,269,45],[302,22,269,45,"_ref4"],[302,27,269,45],[303,16,269,47,"value"],[303,21,269,52],[303,24,269,52,"_ref4"],[303,29,269,52],[304,14,270,10],[304,18,270,14,"value"],[304,23,270,19],[304,27,270,23],[304,31,270,27],[304,33,270,29],[305,16,271,12],[305,23,271,19],[305,24,271,20,"key"],[305,27,271,23],[305,29,271,25,"undefined"],[305,38,271,34],[305,39,271,35],[306,14,272,10],[307,14,273,10],[307,18,273,16,"decoded"],[307,25,273,23],[307,28,273,26,"decodeURIComponent"],[307,46,273,44],[307,47,273,45,"value"],[307,52,273,50],[307,53,273,51],[308,14,274,10],[308,18,274,16,"parsed"],[308,24,274,22],[308,27,274,25,"routeConfig"],[308,38,274,36],[308,39,274,37,"parse"],[308,44,274,42],[308,47,274,45,"key"],[308,50,274,48],[308,51,274,49],[308,54,274,52,"routeConfig"],[308,65,274,63],[308,66,274,64,"parse"],[308,71,274,69],[308,72,274,70,"key"],[308,75,274,73],[308,76,274,74],[308,77,274,75,"decoded"],[308,84,274,82],[308,85,274,83],[308,88,274,86,"decoded"],[308,95,274,93],[309,14,275,10],[309,21,275,17],[309,22,275,18,"key"],[309,25,275,21],[309,27,275,23,"parsed"],[309,33,275,29],[309,34,275,30],[310,12,276,8],[310,13,276,9],[310,14,276,10],[310,15,276,11],[310,18,276,14,"undefined"],[310,27,276,23],[311,12,277,8],[311,16,277,12,"params"],[311,22,277,18],[311,26,277,22,"Object"],[311,32,277,28],[311,33,277,29,"keys"],[311,37,277,33],[311,38,277,34,"params"],[311,44,277,40],[311,45,277,41],[311,46,277,42,"length"],[311,52,277,48],[311,54,277,50],[312,14,278,10],[312,21,278,17],[313,16,279,12,"name"],[313,20,279,16],[313,22,279,18,"routeName"],[313,31,279,27],[314,16,280,12,"params"],[315,14,281,10],[315,15,281,11],[316,12,282,8],[317,12,283,8],[317,19,283,15],[318,14,284,10,"name"],[318,18,284,14],[318,20,284,16,"routeName"],[319,12,285,8],[319,13,285,9],[320,10,286,6],[320,11,286,7],[320,12,286,8],[321,10,287,6,"remainingPath"],[321,23,287,19],[321,26,287,22,"remainingPath"],[321,39,287,35],[321,40,287,36,"replace"],[321,47,287,43],[321,48,287,44,"match"],[321,53,287,49],[321,54,287,50],[321,55,287,51],[321,56,287,52],[321,58,287,54],[321,60,287,56],[321,61,287,57],[322,10,287,58],[323,8,289,4],[324,6,290,2],[324,7,290,3],[325,6,290,3,"_ret"],[325,10,290,3],[326,4,249,2],[326,9,249,7],[326,13,249,13,"config"],[326,19,249,19],[326,23,249,23,"configs"],[326,30,249,30],[327,6,249,30,"_ret"],[327,10,249,30],[327,13,249,30,"_loop"],[327,18,249,30],[327,19,249,30,"config"],[327,25,249,30],[328,6,249,30],[328,10,249,30,"_ret"],[328,14,249,30],[328,22,251,6],[329,6,251,15],[329,10,251,15,"_ret"],[329,14,251,15],[329,22,288,6],[330,4,288,12],[331,4,291,2],[331,11,291,9],[332,6,292,4,"routes"],[332,12,292,10],[333,6,293,4,"remainingPath"],[334,4,294,2],[334,5,294,3],[335,2,295,0],[335,3,295,1],[336,2,296,0],[336,6,296,6,"createNormalizedConfigs"],[336,29,296,29],[336,32,296,32,"createNormalizedConfigs"],[336,33,296,33,"screen"],[336,39,296,39],[336,41,296,41,"routeConfig"],[336,52,296,52],[336,54,296,54,"initials"],[336,62,296,62],[336,64,296,64,"paths"],[336,69,296,69],[336,71,296,71,"parentScreens"],[336,84,296,84],[336,86,296,86,"routeNames"],[336,96,296,96],[336,101,296,101],[337,4,297,2],[337,8,297,8,"configs"],[337,15,297,15],[337,18,297,18],[337,20,297,20],[338,4,298,2,"routeNames"],[338,14,298,12],[338,15,298,13,"push"],[338,19,298,17],[338,20,298,18,"screen"],[338,26,298,24],[338,27,298,25],[339,4,299,2,"parentScreens"],[339,17,299,15],[339,18,299,16,"push"],[339,22,299,20],[339,23,299,21,"screen"],[339,29,299,27],[339,30,299,28],[340,4,300,2],[340,8,300,8,"config"],[340,14,300,14],[340,17,300,17,"routeConfig"],[340,28,300,28],[340,29,300,29,"screen"],[340,35,300,35],[340,36,300,36],[341,4,301,2],[341,8,301,6],[341,15,301,13,"config"],[341,21,301,19],[341,26,301,24],[341,34,301,32],[341,36,301,34],[342,6,302,4,"paths"],[342,11,302,9],[342,12,302,10,"push"],[342,16,302,14],[342,17,302,15],[343,8,303,6,"screen"],[343,14,303,12],[344,8,304,6,"path"],[344,12,304,10],[344,14,304,12,"config"],[345,6,305,4],[345,7,305,5],[345,8,305,6],[346,6,306,4,"configs"],[346,13,306,11],[346,14,306,12,"push"],[346,18,306,16],[346,19,306,17,"createConfigItem"],[346,35,306,33],[346,36,306,34,"screen"],[346,42,306,40],[346,44,306,42],[346,45,306,43],[346,48,306,46,"routeNames"],[346,58,306,56],[346,59,306,57],[346,61,306,59],[346,62,306,60],[346,65,306,63,"paths"],[346,70,306,68],[346,71,306,69],[346,72,306,70],[346,73,306,71],[347,4,307,2],[347,5,307,3],[347,11,307,9],[347,15,307,13],[347,22,307,20,"config"],[347,28,307,26],[347,33,307,31],[347,41,307,39],[347,43,307,41],[348,6,308,4],[349,6,309,4],[350,6,310,4],[351,6,311,4],[351,10,311,8],[351,17,311,15,"config"],[351,23,311,21],[351,24,311,22,"path"],[351,28,311,26],[351,33,311,31],[351,41,311,39],[351,43,311,41],[352,8,312,6],[352,12,312,10,"config"],[352,18,312,16],[352,19,312,17,"exact"],[352,24,312,22],[352,28,312,26,"config"],[352,34,312,32],[352,35,312,33,"path"],[352,39,312,37],[352,43,312,41],[352,47,312,45],[352,49,312,47],[353,10,313,8],[353,16,313,14],[353,20,313,18,"Error"],[353,25,313,23],[353,26,313,24],[353,37,313,35,"screen"],[353,43,313,41],[353,223,313,221],[353,224,313,222],[354,8,314,6],[356,8,316,6],[357,8,317,6],[358,8,318,6],[358,12,318,12,"aliasConfigs"],[358,24,318,24],[358,27,318,27],[358,29,318,29],[359,8,319,6],[359,12,319,10,"config"],[359,18,319,16],[359,19,319,17,"alias"],[359,24,319,22],[359,26,319,24],[360,10,320,8],[360,15,320,13],[360,19,320,19,"alias"],[360,24,320,24],[360,28,320,28,"config"],[360,34,320,34],[360,35,320,35,"alias"],[360,40,320,40],[360,42,320,42],[361,12,321,10],[361,16,321,14],[361,23,321,21,"alias"],[361,28,321,26],[361,33,321,31],[361,41,321,39],[361,43,321,41],[362,14,322,12,"aliasConfigs"],[362,26,322,24],[362,27,322,25,"push"],[362,31,322,29],[362,32,322,30,"createConfigItem"],[362,48,322,46],[362,49,322,47,"screen"],[362,55,322,53],[362,57,322,55],[362,58,322,56],[362,61,322,59,"routeNames"],[362,71,322,69],[362,72,322,70],[362,74,322,72],[362,75,322,73],[362,78,322,76,"paths"],[362,83,322,81],[362,85,322,83],[363,16,323,14,"screen"],[363,22,323,20],[364,16,324,14,"path"],[364,20,324,18],[364,22,324,20,"alias"],[365,14,325,12],[365,15,325,13],[365,16,325,14],[365,18,325,16,"config"],[365,24,325,22],[365,25,325,23,"parse"],[365,30,325,28],[365,31,325,29],[365,32,325,30],[366,12,326,10],[366,13,326,11],[366,19,326,17],[366,23,326,21],[366,30,326,28,"alias"],[366,35,326,33],[366,40,326,38],[366,48,326,46],[366,50,326,48],[367,14,327,12,"aliasConfigs"],[367,26,327,24],[367,27,327,25,"push"],[367,31,327,29],[367,32,327,30,"createConfigItem"],[367,48,327,46],[367,49,327,47,"screen"],[367,55,327,53],[367,57,327,55],[367,58,327,56],[367,61,327,59,"routeNames"],[367,71,327,69],[367,72,327,70],[367,74,327,72,"alias"],[367,79,327,77],[367,80,327,78,"exact"],[367,85,327,83],[367,88,327,86],[367,89,327,87],[368,16,328,14,"screen"],[368,22,328,20],[369,16,329,14,"path"],[369,20,329,18],[369,22,329,20,"alias"],[369,27,329,25],[369,28,329,26,"path"],[370,14,330,12],[370,15,330,13],[370,16,330,14],[370,19,330,17],[370,20,330,18],[370,23,330,21,"paths"],[370,28,330,26],[370,30,330,28],[371,16,331,14,"screen"],[371,22,331,20],[372,16,332,14,"path"],[372,20,332,18],[372,22,332,20,"alias"],[372,27,332,25],[372,28,332,26,"path"],[373,14,333,12],[373,15,333,13],[373,16,333,14],[373,18,333,16,"alias"],[373,23,333,21],[373,24,333,22,"parse"],[373,29,333,27],[373,30,333,28],[373,31,333,29],[374,12,334,10],[375,10,335,8],[376,8,336,6],[377,8,337,6],[377,12,337,10,"config"],[377,18,337,16],[377,19,337,17,"exact"],[377,24,337,22],[377,26,337,24],[378,10,338,8],[379,10,339,8],[380,10,340,8,"paths"],[380,15,340,13],[380,16,340,14,"length"],[380,22,340,20],[380,25,340,23],[380,26,340,24],[381,8,341,6],[382,8,342,6,"paths"],[382,13,342,11],[382,14,342,12,"push"],[382,18,342,16],[382,19,342,17],[383,10,343,8,"screen"],[383,16,343,14],[384,10,344,8,"path"],[384,14,344,12],[384,16,344,14,"config"],[384,22,344,20],[384,23,344,21,"path"],[385,8,345,6],[385,9,345,7],[385,10,345,8],[386,8,346,6,"configs"],[386,15,346,13],[386,16,346,14,"push"],[386,20,346,18],[386,21,346,19,"createConfigItem"],[386,37,346,35],[386,38,346,36,"screen"],[386,44,346,42],[386,46,346,44],[386,47,346,45],[386,50,346,48,"routeNames"],[386,60,346,58],[386,61,346,59],[386,63,346,61],[386,64,346,62],[386,67,346,65,"paths"],[386,72,346,70],[386,73,346,71],[386,75,346,73,"config"],[386,81,346,79],[386,82,346,80,"parse"],[386,87,346,85],[386,88,346,86],[386,89,346,87],[387,8,347,6,"configs"],[387,15,347,13],[387,16,347,14,"push"],[387,20,347,18],[387,21,347,19],[387,24,347,22,"aliasConfigs"],[387,36,347,34],[387,37,347,35],[388,6,348,4],[389,6,349,4],[389,10,349,8],[389,17,349,15,"config"],[389,23,349,21],[389,28,349,26],[389,36,349,34],[389,40,349,38],[389,47,349,45,"config"],[389,53,349,51],[389,54,349,52,"path"],[389,58,349,56],[389,63,349,61],[389,71,349,69],[389,75,349,73,"config"],[389,81,349,79],[389,82,349,80,"alias"],[389,87,349,85],[389,89,349,87,"length"],[389,95,349,93],[389,97,349,95],[390,8,350,6],[390,14,350,12],[390,18,350,16,"Error"],[390,23,350,21],[390,24,350,22],[390,35,350,33,"screen"],[390,41,350,39],[390,126,350,124],[390,127,350,125],[391,6,351,4],[392,6,352,4],[392,10,352,8,"config"],[392,16,352,14],[392,17,352,15,"screens"],[392,24,352,22],[392,26,352,24],[393,8,353,6],[394,8,354,6],[394,12,354,10,"config"],[394,18,354,16],[394,19,354,17,"initialRouteName"],[394,35,354,33],[394,37,354,35],[395,10,355,8,"initials"],[395,18,355,16],[395,19,355,17,"push"],[395,23,355,21],[395,24,355,22],[396,12,356,10,"initialRouteName"],[396,28,356,26],[396,30,356,28,"config"],[396,36,356,34],[396,37,356,35,"initialRouteName"],[396,53,356,51],[397,12,357,10,"parentScreens"],[398,10,358,8],[398,11,358,9],[398,12,358,10],[399,8,359,6],[400,8,360,6,"Object"],[400,14,360,12],[400,15,360,13,"keys"],[400,19,360,17],[400,20,360,18,"config"],[400,26,360,24],[400,27,360,25,"screens"],[400,34,360,32],[400,35,360,33],[400,36,360,34,"forEach"],[400,43,360,41],[400,44,360,42,"nestedConfig"],[400,56,360,54],[400,60,360,58],[401,10,361,8],[401,14,361,14,"result"],[401,20,361,20],[401,23,361,23,"createNormalizedConfigs"],[401,46,361,46],[401,47,361,47,"nestedConfig"],[401,59,361,59],[401,61,361,61,"config"],[401,67,361,67],[401,68,361,68,"screens"],[401,75,361,75],[401,77,361,77,"initials"],[401,85,361,85],[401,87,361,87],[401,88,361,88],[401,91,361,91,"paths"],[401,96,361,96],[401,97,361,97],[401,99,361,99],[401,100,361,100],[401,103,361,103,"parentScreens"],[401,116,361,116],[401,117,361,117],[401,119,361,119,"routeNames"],[401,129,361,129],[401,130,361,130],[402,10,362,8,"configs"],[402,17,362,15],[402,18,362,16,"push"],[402,22,362,20],[402,23,362,21],[402,26,362,24,"result"],[402,32,362,30],[402,33,362,31],[403,8,363,6],[403,9,363,7],[403,10,363,8],[404,6,364,4],[405,4,365,2],[406,4,366,2,"routeNames"],[406,14,366,12],[406,15,366,13,"pop"],[406,18,366,16],[406,19,366,17],[406,20,366,18],[407,4,367,2],[407,11,367,9,"configs"],[407,18,367,16],[408,2,368,0],[408,3,368,1],[409,2,369,0],[409,6,369,6,"createConfigItem"],[409,22,369,22],[409,25,369,25,"createConfigItem"],[409,26,369,26,"screen"],[409,32,369,32],[409,34,369,34,"routeNames"],[409,44,369,44],[409,46,369,46,"paths"],[409,51,369,51],[409,53,369,53,"parse"],[409,58,369,58],[409,63,369,63],[410,4,370,2],[410,8,370,8,"parts"],[410,13,370,13],[410,16,370,16],[410,18,370,18],[412,4,372,2],[413,4,372,2],[413,8,372,2,"_loop2"],[413,14,372,2],[413,26,372,2,"_loop2"],[413,27,372,2,"_screen"],[413,34,372,2],[413,36,376,14],[414,6,377,4,"parts"],[414,11,377,9],[414,12,377,10,"push"],[414,16,377,14],[414,17,377,15],[414,20,377,18],[414,24,377,18,"getPatternParts"],[414,42,377,33],[414,43,377,33,"getPatternParts"],[414,58,377,33],[414,60,377,34,"path"],[414,64,377,38],[414,65,377,39],[414,66,377,40,"map"],[414,69,377,43],[414,70,377,44,"part"],[414,74,377,48],[414,79,377,53],[415,8,378,6],[415,11,378,9,"part"],[415,15,378,13],[416,8,379,6,"screen"],[416,14,379,12],[416,16,379,6,"screen"],[417,6,380,4],[417,7,380,5],[417,8,380,6],[417,9,380,7],[417,10,380,8],[418,4,381,2],[418,5,381,3],[419,4,373,2],[419,13,373,2,"_ref5"],[419,18,373,2],[419,22,376,7,"paths"],[419,27,376,12],[420,6,376,12],[420,10,374,4,"screen"],[420,17,374,10],[420,20,374,10,"_ref5"],[420,25,374,10],[420,26,374,4,"screen"],[420,32,374,10],[421,6,374,10],[421,10,375,4,"path"],[421,14,375,8],[421,17,375,8,"_ref5"],[421,22,375,8],[421,23,375,4,"path"],[421,27,375,8],[422,6,375,8,"_loop2"],[422,12,375,8],[422,13,375,8,"_screen"],[422,20,375,8],[423,4,375,8],[424,4,382,2],[424,8,382,8,"regex"],[424,13,382,13],[424,16,382,16,"parts"],[424,21,382,21],[424,22,382,22,"length"],[424,28,382,28],[424,31,382,31],[424,35,382,35,"RegExp"],[424,41,382,41],[424,42,382,42],[424,47,382,47,"parts"],[424,52,382,52],[424,53,382,53,"map"],[424,56,382,56],[424,57,382,57],[424,58,382,58,"it"],[424,60,382,60],[424,62,382,62,"i"],[424,63,382,63],[424,68,382,68],[425,6,383,4],[425,10,383,8,"it"],[425,12,383,10],[425,13,383,11,"param"],[425,18,383,16],[425,20,383,18],[426,8,384,6],[426,12,384,12,"reg"],[426,15,384,15],[426,18,384,18,"it"],[426,20,384,20],[426,21,384,21,"regex"],[426,26,384,26],[426,30,384,30],[426,37,384,37],[427,8,385,6],[427,15,385,13],[427,29,385,27,"i"],[427,30,385,28],[427,34,385,32,"reg"],[427,37,385,35],[427,45,385,43,"it"],[427,47,385,45],[427,48,385,46,"optional"],[427,56,385,54],[427,59,385,57],[427,62,385,60],[427,65,385,63],[427,67,385,65],[427,70,385,68],[428,6,386,4],[429,6,387,4],[429,13,387,11],[429,16,387,14,"it"],[429,18,387,16],[429,19,387,17,"segment"],[429,26,387,24],[429,31,387,29],[429,34,387,32],[429,37,387,35],[429,41,387,39],[429,44,387,42],[429,48,387,42,"escape"],[429,54,387,48],[429,55,387,48,"default"],[429,62,387,48],[429,64,387,49,"it"],[429,66,387,51],[429,67,387,52,"segment"],[429,74,387,59],[429,75,387,60],[429,80,387,65],[430,4,388,2],[430,5,388,3],[430,6,388,4],[430,7,388,5,"join"],[430,11,388,9],[430,12,388,10],[430,14,388,12],[430,15,388,13],[430,19,388,17],[430,20,388,18],[430,23,388,21,"undefined"],[430,32,388,30],[431,4,389,2],[431,8,389,8,"segments"],[431,16,389,16],[431,19,389,19,"parts"],[431,24,389,24],[431,25,389,25,"map"],[431,28,389,28],[431,29,389,29,"it"],[431,31,389,31],[431,35,389,35,"it"],[431,37,389,37],[431,38,389,38,"segment"],[431,45,389,45],[431,46,389,46],[432,4,390,2],[432,8,390,8,"params"],[432,14,390,14],[432,17,390,17,"parts"],[432,22,390,22],[432,23,390,23,"map"],[432,26,390,26],[432,27,390,27],[432,28,390,28,"it"],[432,30,390,30],[432,32,390,32,"i"],[432,33,390,33],[432,38,390,38,"it"],[432,40,390,40],[432,41,390,41,"param"],[432,46,390,46],[432,49,390,49],[433,6,391,4,"index"],[433,11,391,9],[433,13,391,11,"i"],[433,14,391,12],[434,6,392,4,"screen"],[434,12,392,10],[434,14,392,12,"it"],[434,16,392,14],[434,17,392,15,"screen"],[434,23,392,21],[435,6,393,4,"name"],[435,10,393,8],[435,12,393,10,"it"],[435,14,393,12],[435,15,393,13,"param"],[436,4,394,2],[436,5,394,3],[436,8,394,6],[436,12,394,10],[436,13,394,11],[436,14,394,12,"filter"],[436,20,394,18],[436,21,394,19,"it"],[436,23,394,21],[436,27,394,25,"it"],[436,29,394,27],[436,33,394,31],[436,37,394,35],[436,38,394,36],[437,4,395,2],[437,11,395,9],[438,6,396,4,"screen"],[438,12,396,10],[439,6,397,4,"regex"],[439,11,397,9],[440,6,398,4,"segments"],[440,14,398,12],[441,6,399,4,"params"],[441,12,399,10],[442,6,400,4,"routeNames"],[442,16,400,14],[443,6,401,4,"parse"],[444,4,402,2],[444,5,402,3],[445,2,403,0],[445,3,403,1],[446,2,404,0],[446,6,404,6,"findParseConfigForRoute"],[446,29,404,29],[446,32,404,32,"findParseConfigForRoute"],[446,33,404,33,"routeName"],[446,42,404,42],[446,44,404,44,"flatConfig"],[446,54,404,54],[446,59,404,59],[447,4,405,2],[447,9,405,7],[447,13,405,13,"config"],[447,19,405,19],[447,23,405,23,"flatConfig"],[447,33,405,33],[447,35,405,35],[448,6,406,4],[448,10,406,8,"routeName"],[448,19,406,17],[448,24,406,22,"config"],[448,30,406,28],[448,31,406,29,"routeNames"],[448,41,406,39],[448,42,406,40,"config"],[448,48,406,46],[448,49,406,47,"routeNames"],[448,59,406,57],[448,60,406,58,"length"],[448,66,406,64],[448,69,406,67],[448,70,406,68],[448,71,406,69],[448,73,406,71],[449,8,407,6],[449,15,407,13,"config"],[449,21,407,19],[449,22,407,20,"parse"],[449,27,407,25],[450,6,408,4],[451,4,409,2],[452,4,410,2],[452,11,410,9,"undefined"],[452,20,410,18],[453,2,411,0],[453,3,411,1],[455,2,413,0],[456,2,414,0],[456,6,414,6,"findInitialRoute"],[456,22,414,22],[456,25,414,25,"findInitialRoute"],[456,26,414,26,"routeName"],[456,35,414,35],[456,37,414,37,"parentScreens"],[456,50,414,50],[456,52,414,52,"initialRoutes"],[456,65,414,65],[456,70,414,70],[457,4,415,2],[457,9,415,7],[457,13,415,13,"config"],[457,19,415,19],[457,23,415,23,"initialRoutes"],[457,36,415,36],[457,38,415,38],[458,6,416,4],[458,10,416,8,"parentScreens"],[458,23,416,21],[458,24,416,22,"length"],[458,30,416,28],[458,35,416,33,"config"],[458,41,416,39],[458,42,416,40,"parentScreens"],[458,55,416,53],[458,56,416,54,"length"],[458,62,416,60],[458,64,416,62],[459,8,417,6],[459,12,417,10,"sameParents"],[459,23,417,21],[459,26,417,24],[459,30,417,28],[460,8,418,6],[460,13,418,11],[460,17,418,15,"i"],[460,18,418,16],[460,21,418,19],[460,22,418,20],[460,24,418,22,"i"],[460,25,418,23],[460,28,418,26,"parentScreens"],[460,41,418,39],[460,42,418,40,"length"],[460,48,418,46],[460,50,418,48,"i"],[460,51,418,49],[460,53,418,51],[460,55,418,53],[461,10,419,8],[461,14,419,12,"parentScreens"],[461,27,419,25],[461,28,419,26,"i"],[461,29,419,27],[461,30,419,28],[461,31,419,29,"localeCompare"],[461,44,419,42],[461,45,419,43,"config"],[461,51,419,49],[461,52,419,50,"parentScreens"],[461,65,419,63],[461,66,419,64,"i"],[461,67,419,65],[461,68,419,66],[461,69,419,67],[461,74,419,72],[461,75,419,73],[461,77,419,75],[462,12,420,10,"sameParents"],[462,23,420,21],[462,26,420,24],[462,31,420,29],[463,12,421,10],[464,10,422,8],[465,8,423,6],[466,8,424,6],[466,12,424,10,"sameParents"],[466,23,424,21],[466,25,424,23],[467,10,425,8],[467,17,425,15,"routeName"],[467,26,425,24],[467,31,425,29,"config"],[467,37,425,35],[467,38,425,36,"initialRouteName"],[467,54,425,52],[467,57,425,55,"config"],[467,63,425,61],[467,64,425,62,"initialRouteName"],[467,80,425,78],[467,83,425,81,"undefined"],[467,92,425,90],[468,8,426,6],[469,6,427,4],[470,4,428,2],[471,4,429,2],[471,11,429,9,"undefined"],[471,20,429,18],[472,2,430,0],[472,3,430,1],[474,2,432,0],[475,2,433,0],[476,2,434,0],[476,6,434,6,"createStateObject"],[476,23,434,23],[476,26,434,26,"createStateObject"],[476,27,434,27,"initialRoute"],[476,39,434,39],[476,41,434,41,"route"],[476,46,434,46],[476,48,434,48,"isEmpty"],[476,55,434,55],[476,60,434,60],[477,4,435,2],[477,8,435,6,"isEmpty"],[477,15,435,13],[477,17,435,15],[478,6,436,4],[478,10,436,8,"initialRoute"],[478,22,436,20],[478,24,436,22],[479,8,437,6],[479,15,437,13],[480,10,438,8,"index"],[480,15,438,13],[480,17,438,15],[480,18,438,16],[481,10,439,8,"routes"],[481,16,439,14],[481,18,439,16],[481,19,439,17],[482,12,440,10,"name"],[482,16,440,14],[482,18,440,16,"initialRoute"],[483,10,441,8],[483,11,441,9],[483,13,441,11,"route"],[483,18,441,16],[484,8,442,6],[484,9,442,7],[485,6,443,4],[485,7,443,5],[485,13,443,11],[486,8,444,6],[486,15,444,13],[487,10,445,8,"routes"],[487,16,445,14],[487,18,445,16],[487,19,445,17,"route"],[487,24,445,22],[488,8,446,6],[488,9,446,7],[489,6,447,4],[490,4,448,2],[490,5,448,3],[490,11,448,9],[491,6,449,4],[491,10,449,8,"initialRoute"],[491,22,449,20],[491,24,449,22],[492,8,450,6],[492,15,450,13],[493,10,451,8,"index"],[493,15,451,13],[493,17,451,15],[493,18,451,16],[494,10,452,8,"routes"],[494,16,452,14],[494,18,452,16],[494,19,452,17],[495,12,453,10,"name"],[495,16,453,14],[495,18,453,16,"initialRoute"],[496,10,454,8],[496,11,454,9],[496,13,454,11],[497,12,455,10],[497,15,455,13,"route"],[497,20,455,18],[498,12,456,10,"state"],[498,17,456,15],[498,19,456,17],[499,14,457,12,"routes"],[499,20,457,18],[499,22,457,20],[500,12,458,10],[501,10,459,8],[501,11,459,9],[502,8,460,6],[502,9,460,7],[503,6,461,4],[503,7,461,5],[503,13,461,11],[504,8,462,6],[504,15,462,13],[505,10,463,8,"routes"],[505,16,463,14],[505,18,463,16],[505,19,463,17],[506,12,464,10],[506,15,464,13,"route"],[506,20,464,18],[507,12,465,10,"state"],[507,17,465,15],[507,19,465,17],[508,14,466,12,"routes"],[508,20,466,18],[508,22,466,20],[509,12,467,10],[510,10,468,8],[510,11,468,9],[511,8,469,6],[511,9,469,7],[512,6,470,4],[513,4,471,2],[514,2,472,0],[514,3,472,1],[515,2,473,0],[515,6,473,6,"createNestedStateObject"],[515,29,473,29],[515,32,473,32,"createNestedStateObject"],[515,33,473,33,"path"],[515,37,473,37],[515,39,473,39,"routes"],[515,45,473,45],[515,47,473,47,"initialRoutes"],[515,60,473,60],[515,62,473,62,"flatConfig"],[515,72,473,72],[515,77,473,77],[516,4,474,2],[516,8,474,6,"route"],[516,13,474,11],[516,16,474,14,"routes"],[516,22,474,20],[516,23,474,21,"shift"],[516,28,474,26],[516,29,474,27],[516,30,474,28],[517,4,475,2],[517,8,475,8,"parentScreens"],[517,21,475,21],[517,24,475,24],[517,26,475,26],[518,4,476,2],[518,8,476,6,"initialRoute"],[518,20,476,18],[518,23,476,21,"findInitialRoute"],[518,39,476,37],[518,40,476,38,"route"],[518,45,476,43],[518,46,476,44,"name"],[518,50,476,48],[518,52,476,50,"parentScreens"],[518,65,476,63],[518,67,476,65,"initialRoutes"],[518,80,476,78],[518,81,476,79],[519,4,477,2,"parentScreens"],[519,17,477,15],[519,18,477,16,"push"],[519,22,477,20],[519,23,477,21,"route"],[519,28,477,26],[519,29,477,27,"name"],[519,33,477,31],[519,34,477,32],[520,4,478,2],[520,8,478,8,"state"],[520,13,478,13],[520,16,478,16,"createStateObject"],[520,33,478,33],[520,34,478,34,"initialRoute"],[520,46,478,46],[520,48,478,48,"route"],[520,53,478,53],[520,55,478,55,"routes"],[520,61,478,61],[520,62,478,62,"length"],[520,68,478,68],[520,73,478,73],[520,74,478,74],[520,75,478,75],[521,4,479,2],[521,8,479,6,"routes"],[521,14,479,12],[521,15,479,13,"length"],[521,21,479,19],[521,24,479,22],[521,25,479,23],[521,27,479,25],[522,6,480,4],[522,10,480,8,"nestedState"],[522,21,480,19],[522,24,480,22,"state"],[522,29,480,27],[523,6,481,4],[523,13,481,11,"route"],[523,18,481,16],[523,21,481,19,"routes"],[523,27,481,25],[523,28,481,26,"shift"],[523,33,481,31],[523,34,481,32],[523,35,481,33],[523,37,481,35],[524,8,482,6,"initialRoute"],[524,20,482,18],[524,23,482,21,"findInitialRoute"],[524,39,482,37],[524,40,482,38,"route"],[524,45,482,43],[524,46,482,44,"name"],[524,50,482,48],[524,52,482,50,"parentScreens"],[524,65,482,63],[524,67,482,65,"initialRoutes"],[524,80,482,78],[524,81,482,79],[525,8,483,6],[525,12,483,12,"nestedStateIndex"],[525,28,483,28],[525,31,483,31,"nestedState"],[525,42,483,42],[525,43,483,43,"index"],[525,48,483,48],[525,52,483,52,"nestedState"],[525,63,483,63],[525,64,483,64,"routes"],[525,70,483,70],[525,71,483,71,"length"],[525,77,483,77],[525,80,483,80],[525,81,483,81],[526,8,484,6,"nestedState"],[526,19,484,17],[526,20,484,18,"routes"],[526,26,484,24],[526,27,484,25,"nestedStateIndex"],[526,43,484,41],[526,44,484,42],[526,45,484,43,"state"],[526,50,484,48],[526,53,484,51,"createStateObject"],[526,70,484,68],[526,71,484,69,"initialRoute"],[526,83,484,81],[526,85,484,83,"route"],[526,90,484,88],[526,92,484,90,"routes"],[526,98,484,96],[526,99,484,97,"length"],[526,105,484,103],[526,110,484,108],[526,111,484,109],[526,112,484,110],[527,8,485,6],[527,12,485,10,"routes"],[527,18,485,16],[527,19,485,17,"length"],[527,25,485,23],[527,28,485,26],[527,29,485,27],[527,31,485,29],[528,10,486,8,"nestedState"],[528,21,486,19],[528,24,486,22,"nestedState"],[528,35,486,33],[528,36,486,34,"routes"],[528,42,486,40],[528,43,486,41,"nestedStateIndex"],[528,59,486,57],[528,60,486,58],[528,61,486,59,"state"],[528,66,486,64],[529,8,487,6],[530,8,488,6,"parentScreens"],[530,21,488,19],[530,22,488,20,"push"],[530,26,488,24],[530,27,488,25,"route"],[530,32,488,30],[530,33,488,31,"name"],[530,37,488,35],[530,38,488,36],[531,6,489,4],[532,4,490,2],[533,4,491,2,"route"],[533,9,491,7],[533,12,491,10],[533,16,491,10,"findFocusedRoute"],[533,35,491,26],[533,36,491,26,"findFocusedRoute"],[533,52,491,26],[533,54,491,27,"state"],[533,59,491,32],[533,60,491,33],[534,4,492,2,"route"],[534,9,492,7],[534,10,492,8,"path"],[534,14,492,12],[534,17,492,15,"path"],[534,21,492,19],[534,22,492,20,"replace"],[534,29,492,27],[534,30,492,28],[534,35,492,33],[534,37,492,35],[534,39,492,37],[534,40,492,38],[535,4,493,2],[535,8,493,8,"params"],[535,14,493,14],[535,17,493,17,"parseQueryParams"],[535,33,493,33],[535,34,493,34,"path"],[535,38,493,38],[535,40,493,40,"flatConfig"],[535,50,493,50],[535,53,493,53,"findParseConfigForRoute"],[535,76,493,76],[535,77,493,77,"route"],[535,82,493,82],[535,83,493,83,"name"],[535,87,493,87],[535,89,493,89,"flatConfig"],[535,99,493,99],[535,100,493,100],[535,103,493,103,"undefined"],[535,112,493,112],[535,113,493,113],[536,4,494,2],[536,8,494,6,"params"],[536,14,494,12],[536,16,494,14],[537,6,495,4,"route"],[537,11,495,9],[537,12,495,10,"params"],[537,18,495,16],[537,21,495,19],[538,8,496,6],[538,11,496,9,"route"],[538,16,496,14],[538,17,496,15,"params"],[538,23,496,21],[539,8,497,6],[539,11,497,9,"params"],[540,6,498,4],[540,7,498,5],[541,4,499,2],[542,4,500,2],[542,11,500,9,"state"],[542,16,500,14],[543,2,501,0],[543,3,501,1],[544,2,502,0],[544,6,502,6,"parseQueryParams"],[544,22,502,22],[544,25,502,25,"parseQueryParams"],[544,26,502,26,"path"],[544,30,502,30],[544,32,502,32,"parseConfig"],[544,43,502,43],[544,48,502,48],[545,4,503,2],[545,8,503,8,"query"],[545,13,503,13],[545,16,503,16,"path"],[545,20,503,20],[545,21,503,21,"split"],[545,26,503,26],[545,27,503,27],[545,30,503,30],[545,31,503,31],[545,32,503,32],[545,33,503,33],[545,34,503,34],[546,4,504,2],[546,8,504,8,"params"],[546,14,504,14],[546,17,504,17,"queryString"],[546,28,504,28],[546,29,504,29,"parse"],[546,34,504,34],[546,35,504,35,"query"],[546,40,504,40],[546,41,504,41],[547,4,505,2],[547,8,505,6,"parseConfig"],[547,19,505,17],[547,21,505,19],[548,6,506,4,"Object"],[548,12,506,10],[548,13,506,11,"keys"],[548,17,506,15],[548,18,506,16,"params"],[548,24,506,22],[548,25,506,23],[548,26,506,24,"forEach"],[548,33,506,31],[548,34,506,32,"name"],[548,38,506,36],[548,42,506,40],[549,8,507,6],[549,12,507,10,"Object"],[549,18,507,16],[549,19,507,17,"hasOwnProperty"],[549,33,507,31],[549,34,507,32,"call"],[549,38,507,36],[549,39,507,37,"parseConfig"],[549,50,507,48],[549,52,507,50,"name"],[549,56,507,54],[549,57,507,55],[549,61,507,59],[549,68,507,66,"params"],[549,74,507,72],[549,75,507,73,"name"],[549,79,507,77],[549,80,507,78],[549,85,507,83],[549,93,507,91],[549,95,507,93],[550,10,508,8,"params"],[550,16,508,14],[550,17,508,15,"name"],[550,21,508,19],[550,22,508,20],[550,25,508,23,"parseConfig"],[550,36,508,34],[550,37,508,35,"name"],[550,41,508,39],[550,42,508,40],[550,43,508,41,"params"],[550,49,508,47],[550,50,508,48,"name"],[550,54,508,52],[550,55,508,53],[550,56,508,54],[551,8,509,6],[552,6,510,4],[552,7,510,5],[552,8,510,6],[553,4,511,2],[554,4,512,2],[554,11,512,9,"Object"],[554,17,512,15],[554,18,512,16,"keys"],[554,22,512,20],[554,23,512,21,"params"],[554,29,512,27],[554,30,512,28],[554,31,512,29,"length"],[554,37,512,35],[554,40,512,38,"params"],[554,46,512,44],[554,49,512,47,"undefined"],[554,58,512,56],[555,2,513,0],[555,3,513,1],[556,0,513,2],[556,3]],"functionMap":{"names":["<global>","getStateFromPath","remaining.split.filter.map$argument_0","configs.find$argument_0","match.routeNames.map$argument_0","getConfigResources","prepareConfigResources","getInitialRoutes","getSortedNormalizedConfigs","Object.keys.map$argument_0","concat.sort$argument_0","checkForDuplicatedConfigs","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","getConfigsWithRegexes","configs.map$argument_0","matchAgainstConfigs","config.routeNames.map$argument_0","Object.entries.map$argument_0","routeConfig.params.find$argument_0","Object.entries.map.filter$argument_0","Object.entries.map.filter.map$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","getPatternParts.map$argument_0","parts.map$argument_0","parts.map.filter$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","parseQueryParams"],"mappings":"AAA;OC8B;4DC4B;KDK;+BES,0CF;gEGE;QHE;CDuB;AKM;CLO;AMC;CNa;AOC;CPS;AQC;+CCE,uED,QE;GF2E;CRC;AWC;iBCE;uDCQ,sBD,YE,sBF;GDQ;CXC;AeC;qBCC;IDI;CfC;4BiBC;qCCa;yCfC;SeG;yGCC;gDCE,wBD;SDK,SG,gBH,MI;SJO;ODU;CjBS;gCuBC;0CCgE;ODG;CvBK;yByBC;4CCQ;MDG;yDEE;GFM;6BEC,gBF;2BEC;UFI,SG,gBH;CzBS;gC6BC;C7BO;yB8BG;C9BgB;0B+BI;C/BsC;gCgCC;ChC4B;yBiCC;gCTI;KSI;CjCG"},"hasCjsExports":false},"type":"js/module"}]}