{"dependencies":[{"name":"react-native-worklets","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":14},"end":{"line":2,"column":48,"index":62}}],"key":"upgdvla269Vpw38V/0PgHoMDZsA=","exportNames":["*"],"imports":1}},{"name":"./common","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":64},"end":{"line":4,"column":35,"index":99}}],"key":"T3X1rGrsueEhPeOGTLhHRm6Tz+4=","exportNames":["*"],"imports":1}},{"name":"./isSharedValue","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":189},"end":{"line":10,"column":48,"index":237}}],"key":"4GvsAaNC2OU71XMPPfpzkxeW9tk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.startMapper = startMapper;\n  exports.stopMapper = stopMapper;\n  var _reactNativeWorklets = require(_dependencyMap[0]);\n  var _common = require(_dependencyMap[1]);\n  var _isSharedValue = require(_dependencyMap[2]);\n  var _worklet_10917204099484_init_data = {\n    code: \"function createMapperRegistry_reactNativeReanimated_mappersTs1(){const{IS_JEST,isSharedValue}=this.__closure;const mappers=new Map();let sortedMappers=[];let runRequested=false;let processingMappers=false;function updateMappersOrder(){const pre=new Map();mappers.forEach(function(mapper){if(mapper.outputs){for(const output of mapper.outputs){const preMappers=pre.get(output);if(preMappers===undefined){pre.set(output,[mapper]);}else{preMappers.push(mapper);}}}});const visited=new Set();const newOrder=[];function dfs(mapper){visited.add(mapper);for(const input of mapper.inputs){const preMappers=pre.get(input);if(preMappers){for(const preMapper of preMappers){if(!visited.has(preMapper)){dfs(preMapper);}}}}newOrder.push(mapper);}mappers.forEach(function(mapper){if(!visited.has(mapper)){dfs(mapper);}});sortedMappers=newOrder;}function mapperRun(){runRequested=false;if(processingMappers){return;}try{processingMappers=true;if(mappers.size!==sortedMappers.length){updateMappersOrder();}for(const mapper of sortedMappers){if(mapper.dirty){mapper.dirty=false;mapper.worklet();}}}finally{processingMappers=false;}}function maybeRequestUpdates(){if(IS_JEST){mapperRun();}else if(!runRequested){if(processingMappers){requestAnimationFrame(mapperRun);}else{queueMicrotask(mapperRun);}runRequested=true;}}function extractInputs(inputs,resultArray){if(Array.isArray(inputs)){for(const input of inputs){if(input){extractInputs(input,resultArray);}}}else if(isSharedValue(inputs)){resultArray.push(inputs);}else if(Object.getPrototypeOf(inputs)===Object.prototype){for(const element of Object.values(inputs)){if(element){extractInputs(element,resultArray);}}}return resultArray;}return{start:function(mapperID,worklet,inputs,outputs){const mapper={id:mapperID,dirty:true,worklet:worklet,inputs:extractInputs(inputs,[]),outputs:outputs};mappers.set(mapper.id,mapper);sortedMappers=[];for(const sv of mapper.inputs){sv.addListener(mapper.id,function(){mapper.dirty=true;maybeRequestUpdates();});}maybeRequestUpdates();},stop:function(mapperID){const mapper=mappers.get(mapperID);if(mapper){mappers.delete(mapper.id);sortedMappers=[];for(const sv of mapper.inputs){sv.removeListener(mapper.id);}}}};}\"\n  };\n  var createMapperRegistry = function createMapperRegistry_reactNativeReanimated_mappersTs1Factory(_ref) {\n    var _worklet_10917204099484_init_data = _ref._worklet_10917204099484_init_data,\n      IS_JEST = _ref.IS_JEST,\n      isSharedValue = _ref.isSharedValue;\n    var createMapperRegistry = function () {\n      var mappers = new Map();\n      var sortedMappers = [];\n      var runRequested = false;\n      var processingMappers = false;\n      function updateMappersOrder() {\n        // sort mappers topologically\n        // the algorithm here takes adventage of a fact that the topological order\n        // of a transposed graph is a reverse topological order of the original graph\n        // The graph in our case consists of mappers and an edge between two mappers\n        // A and B exists if there is a shared value that's on A's output lists and on\n        // B's input list.\n        //\n        // We don't need however to calculate that graph as it is easier to work with\n        // the transposed version of it that can be calculated ad-hoc. For the transposed\n        // version to be traversed we use \"pre\" map that maps share value to mappers that\n        // output that shared value. Then we can infer all the outgoing edges for a given\n        // mapper simply by scanning it's input list and checking if any of the shared values\n        // from that list exists in the \"pre\" map. If they do, then we have an edge between\n        // that mapper and the mappers from the \"pre\" list for the given shared value.\n        //\n        // For topological sorting we use a dfs-based approach that requires the graph to\n        // be traversed in dfs order and each node after being processed lands at the\n        // beginning of the topological order list. Since we traverse a transposed graph,\n        // instead of reversing that order we can use a normal array and push processed\n        // mappers to the end. There is no need to reverse that array after we are done.\n        var pre = new Map(); // map from sv -> mapper that outputs that sv\n        mappers.forEach(mapper => {\n          if (mapper.outputs) {\n            for (var output of mapper.outputs) {\n              var preMappers = pre.get(output);\n              if (preMappers === undefined) {\n                pre.set(output, [mapper]);\n              } else {\n                preMappers.push(mapper);\n              }\n            }\n          }\n        });\n        var visited = new Set();\n        var newOrder = [];\n        function dfs(mapper) {\n          visited.add(mapper);\n          for (var input of mapper.inputs) {\n            var preMappers = pre.get(input);\n            if (preMappers) {\n              for (var preMapper of preMappers) {\n                if (!visited.has(preMapper)) {\n                  dfs(preMapper);\n                }\n              }\n            }\n          }\n          newOrder.push(mapper);\n        }\n        mappers.forEach(mapper => {\n          if (!visited.has(mapper)) {\n            dfs(mapper);\n          }\n        });\n        sortedMappers = newOrder;\n      }\n      function mapperRun() {\n        runRequested = false;\n        if (processingMappers) {\n          return;\n        }\n        try {\n          processingMappers = true;\n          if (mappers.size !== sortedMappers.length) {\n            updateMappersOrder();\n          }\n          for (var mapper of sortedMappers) {\n            if (mapper.dirty) {\n              mapper.dirty = false;\n              mapper.worklet();\n            }\n          }\n        } finally {\n          processingMappers = false;\n        }\n      }\n      function maybeRequestUpdates() {\n        if (IS_JEST) {\n          // On Jest environment we avoid using queueMicrotask as that'd require test\n          // to advance the clock manually. This on other hand would require tests\n          // to know how many times mappers need to run. As we don't want tests to\n          // make any assumptions on that number it is easier to execute mappers\n          // immediately for testing purposes and only expect test to advance timers\n          // if they want to make any assertions on the effects of animations being run.\n          mapperRun();\n        } else if (!runRequested) {\n          if (processingMappers) {\n            // In general, we should avoid having mappers trigger updates as this may\n            // result in unpredictable behavior. Specifically, the updated value can\n            // be read by mappers that run later in the same frame but previous mappers\n            // would access the old value. Updating mappers during the mapper-run phase\n            // breaks the order in which we should execute the mappers. However, doing\n            // that is still a possibility and there are some instances where people use\n            // the API in that way, hence we need to prevent mapper-run phase falling into\n            // an infinite loop. We do that by detecting when mapper-run is requested while\n            // we are already in mapper-run phase, and in that case we use `requestAnimationFrame`\n            // instead of `queueMicrotask` which will schedule mapper run for the next\n            // frame instead of queuing another set of updates in the same frame.\n            requestAnimationFrame(mapperRun);\n          } else {\n            queueMicrotask(mapperRun);\n          }\n          runRequested = true;\n        }\n      }\n      function extractInputs(inputs, resultArray) {\n        if (Array.isArray(inputs)) {\n          for (var input of inputs) {\n            if (input) {\n              extractInputs(input, resultArray);\n            }\n          }\n        } else if (isSharedValue(inputs)) {\n          resultArray.push(inputs);\n        } else if (Object.getPrototypeOf(inputs) === Object.prototype) {\n          // we only extract inputs recursively from \"plain\" objects here, if object\n          // is of a derivative class (e.g. HostObject on web, or Map) we don't scan\n          // it recursively\n          for (var element of Object.values(inputs)) {\n            if (element) {\n              extractInputs(element, resultArray);\n            }\n          }\n        }\n        return resultArray;\n      }\n      return {\n        start: (mapperID, worklet, inputs, outputs) => {\n          var mapper = {\n            id: mapperID,\n            dirty: true,\n            worklet,\n            inputs: extractInputs(inputs, []),\n            outputs\n          };\n          mappers.set(mapper.id, mapper);\n          sortedMappers = [];\n          for (var sv of mapper.inputs) {\n            sv.addListener(mapper.id, () => {\n              mapper.dirty = true;\n              maybeRequestUpdates();\n            });\n          }\n          maybeRequestUpdates();\n        },\n        stop: mapperID => {\n          var mapper = mappers.get(mapperID);\n          if (mapper) {\n            mappers.delete(mapper.id);\n            sortedMappers = [];\n            for (var sv of mapper.inputs) {\n              sv.removeListener(mapper.id);\n            }\n          }\n        }\n      };\n    };\n    createMapperRegistry.__closure = {\n      IS_JEST,\n      isSharedValue\n    };\n    createMapperRegistry.__workletHash = 10917204099484;\n    createMapperRegistry.__initData = _worklet_10917204099484_init_data;\n    return createMapperRegistry;\n  }({\n    _worklet_10917204099484_init_data,\n    IS_JEST: _common.IS_JEST,\n    isSharedValue: _isSharedValue.isSharedValue\n  });\n  var MAPPER_ID = 9999;\n  var _worklet_9660765174658_init_data = {\n    code: \"function reactNativeReanimated_mappersTs2(){const{createMapperRegistry,mapperID,worklet,inputs,outputs}=this.__closure;let mapperRegistry=global.__mapperRegistry;if(mapperRegistry===undefined){mapperRegistry=global.__mapperRegistry=createMapperRegistry();}mapperRegistry.start(mapperID,worklet,inputs,outputs);}\"\n  };\n  function startMapper(worklet) {\n    var inputs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var outputs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var mapperID = MAPPER_ID += 1;\n    (0, _reactNativeWorklets.runOnUI)(function reactNativeReanimated_mappersTs2Factory(_ref2) {\n      var _worklet_9660765174658_init_data = _ref2._worklet_9660765174658_init_data,\n        createMapperRegistry = _ref2.createMapperRegistry,\n        mapperID = _ref2.mapperID,\n        worklet = _ref2.worklet,\n        inputs = _ref2.inputs,\n        outputs = _ref2.outputs;\n      var reactNativeReanimated_mappersTs2 = function () {\n        var mapperRegistry = global.__mapperRegistry;\n        if (mapperRegistry === undefined) {\n          mapperRegistry = global.__mapperRegistry = createMapperRegistry();\n        }\n        mapperRegistry.start(mapperID, worklet, inputs, outputs);\n      };\n      reactNativeReanimated_mappersTs2.__closure = {\n        createMapperRegistry,\n        mapperID,\n        worklet,\n        inputs,\n        outputs\n      };\n      reactNativeReanimated_mappersTs2.__workletHash = 9660765174658;\n      reactNativeReanimated_mappersTs2.__initData = _worklet_9660765174658_init_data;\n      return reactNativeReanimated_mappersTs2;\n    }({\n      _worklet_9660765174658_init_data,\n      createMapperRegistry,\n      mapperID,\n      worklet,\n      inputs,\n      outputs\n    }))();\n    return mapperID;\n  }\n  var _worklet_7172044021294_init_data = {\n    code: \"function reactNativeReanimated_mappersTs3(){const{mapperID}=this.__closure;const mapperRegistry=global.__mapperRegistry;mapperRegistry===null||mapperRegistry===void 0||mapperRegistry.stop(mapperID);}\"\n  };\n  function stopMapper(mapperID) {\n    (0, _reactNativeWorklets.runOnUI)(function reactNativeReanimated_mappersTs3Factory(_ref3) {\n      var _worklet_7172044021294_init_data = _ref3._worklet_7172044021294_init_data,\n        mapperID = _ref3.mapperID;\n      var reactNativeReanimated_mappersTs3 = function () {\n        var mapperRegistry = global.__mapperRegistry;\n        mapperRegistry?.stop(mapperID);\n      };\n      reactNativeReanimated_mappersTs3.__closure = {\n        mapperID\n      };\n      reactNativeReanimated_mappersTs3.__workletHash = 7172044021294;\n      reactNativeReanimated_mappersTs3.__initData = _worklet_7172044021294_init_data;\n      return reactNativeReanimated_mappersTs3;\n    }({\n      _worklet_7172044021294_init_data,\n      mapperID\n    }))();\n  }\n});","lineCount":258,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,203,0,"exports"],[7,9,203,0],[7,10,203,0,"startMapper"],[7,21,203,0],[7,24,203,0,"startMapper"],[7,35,203,0],[8,2,221,0,"exports"],[8,9,221,0],[8,10,221,0,"stopMapper"],[8,20,221,0],[8,23,221,0,"stopMapper"],[8,33,221,0],[9,2,2,0],[9,6,2,0,"_reactNativeWorklets"],[9,26,2,0],[9,29,2,0,"require"],[9,36,2,0],[9,37,2,0,"_dependencyMap"],[9,51,2,0],[10,2,4,0],[10,6,4,0,"_common"],[10,13,4,0],[10,16,4,0,"require"],[10,23,4,0],[10,24,4,0,"_dependencyMap"],[10,38,4,0],[11,2,10,0],[11,6,10,0,"_isSharedValue"],[11,20,10,0],[11,23,10,0,"require"],[11,30,10,0],[11,31,10,0,"_dependencyMap"],[11,45,10,0],[12,2,10,48],[12,6,10,48,"_worklet_10917204099484_init_data"],[12,39,10,48],[13,4,10,48,"code"],[13,8,10,48],[14,2,10,48],[15,2,10,48],[15,6,10,48,"createMapperRegistry"],[15,26,10,48],[15,29,22,0],[15,38,22,0,"createMapperRegistry_reactNativeReanimated_mappersTs1Factory"],[15,99,22,0,"_ref"],[15,103,22,0],[16,4,22,0],[16,8,22,0,"_worklet_10917204099484_init_data"],[16,41,22,0],[16,44,22,0,"_ref"],[16,48,22,0],[16,49,22,0,"_worklet_10917204099484_init_data"],[16,82,22,0],[17,6,110,8,"IS_JEST"],[17,13,110,15],[17,16,110,15,"_ref"],[17,20,110,15],[17,21,110,8,"IS_JEST"],[17,28,110,15],[18,6,149,15,"isSharedValue"],[18,19,149,28],[18,22,149,28,"_ref"],[18,26,149,28],[18,27,149,15,"isSharedValue"],[18,40,149,28],[19,4,149,28],[19,8,149,28,"createMapperRegistry"],[19,28,149,28],[19,40,149,28,"createMapperRegistry"],[19,41,149,28],[19,43,22,32],[20,6,24,2],[20,10,24,8,"mappers"],[20,17,24,15],[20,20,24,18],[20,24,24,22,"Map"],[20,27,24,25],[20,28,24,42],[20,29,24,43],[21,6,25,2],[21,10,25,6,"sortedMappers"],[21,23,25,29],[21,26,25,32],[21,28,25,34],[22,6,27,2],[22,10,27,6,"runRequested"],[22,22,27,18],[22,25,27,21],[22,30,27,26],[23,6,28,2],[23,10,28,6,"processingMappers"],[23,27,28,23],[23,30,28,26],[23,35,28,31],[24,6,30,2],[24,15,30,11,"updateMappersOrder"],[24,33,30,29,"updateMappersOrder"],[24,34,30,29],[24,36,30,32],[25,8,31,4],[26,8,32,4],[27,8,33,4],[28,8,34,4],[29,8,35,4],[30,8,36,4],[31,8,37,4],[32,8,38,4],[33,8,39,4],[34,8,40,4],[35,8,41,4],[36,8,42,4],[37,8,43,4],[38,8,44,4],[39,8,45,4],[40,8,46,4],[41,8,47,4],[42,8,48,4],[43,8,49,4],[44,8,50,4],[45,8,51,4],[45,12,51,10,"pre"],[45,15,51,13],[45,18,51,16],[45,22,51,20,"Map"],[45,25,51,23],[45,26,51,24],[45,27,51,25],[45,28,51,26],[45,29,51,27],[46,8,52,4,"mappers"],[46,15,52,11],[46,16,52,12,"forEach"],[46,23,52,19],[46,24,52,21,"mapper"],[46,30,52,27],[46,34,52,32],[47,10,53,6],[47,14,53,10,"mapper"],[47,20,53,16],[47,21,53,17,"outputs"],[47,28,53,24],[47,30,53,26],[48,12,54,8],[48,17,54,13],[48,21,54,19,"output"],[48,27,54,25],[48,31,54,29,"mapper"],[48,37,54,35],[48,38,54,36,"outputs"],[48,45,54,43],[48,47,54,45],[49,14,55,10],[49,18,55,16,"preMappers"],[49,28,55,26],[49,31,55,29,"pre"],[49,34,55,32],[49,35,55,33,"get"],[49,38,55,36],[49,39,55,37,"output"],[49,45,55,43],[49,46,55,44],[50,14,56,10],[50,18,56,14,"preMappers"],[50,28,56,24],[50,33,56,29,"undefined"],[50,42,56,38],[50,44,56,40],[51,16,57,12,"pre"],[51,19,57,15],[51,20,57,16,"set"],[51,23,57,19],[51,24,57,20,"output"],[51,30,57,26],[51,32,57,28],[51,33,57,29,"mapper"],[51,39,57,35],[51,40,57,36],[51,41,57,37],[52,14,58,10],[52,15,58,11],[52,21,58,17],[53,16,59,12,"preMappers"],[53,26,59,22],[53,27,59,23,"push"],[53,31,59,27],[53,32,59,28,"mapper"],[53,38,59,34],[53,39,59,35],[54,14,60,10],[55,12,61,8],[56,10,62,6],[57,8,63,4],[57,9,63,5],[57,10,63,6],[58,8,64,4],[58,12,64,10,"visited"],[58,19,64,17],[58,22,64,20],[58,26,64,24,"Set"],[58,29,64,27],[58,30,64,28],[58,31,64,29],[59,8,65,4],[59,12,65,10,"newOrder"],[59,20,65,28],[59,23,65,31],[59,25,65,33],[60,8,66,4],[60,17,66,13,"dfs"],[60,20,66,16,"dfs"],[60,21,66,17,"mapper"],[60,27,66,31],[60,29,66,33],[61,10,67,6,"visited"],[61,17,67,13],[61,18,67,14,"add"],[61,21,67,17],[61,22,67,18,"mapper"],[61,28,67,24],[61,29,67,25],[62,10,68,6],[62,15,68,11],[62,19,68,17,"input"],[62,24,68,22],[62,28,68,26,"mapper"],[62,34,68,32],[62,35,68,33,"inputs"],[62,41,68,39],[62,43,68,41],[63,12,69,8],[63,16,69,14,"preMappers"],[63,26,69,24],[63,29,69,27,"pre"],[63,32,69,30],[63,33,69,31,"get"],[63,36,69,34],[63,37,69,35,"input"],[63,42,69,40],[63,43,69,41],[64,12,70,8],[64,16,70,12,"preMappers"],[64,26,70,22],[64,28,70,24],[65,14,71,10],[65,19,71,15],[65,23,71,21,"preMapper"],[65,32,71,30],[65,36,71,34,"preMappers"],[65,46,71,44],[65,48,71,46],[66,16,72,12],[66,20,72,16],[66,21,72,17,"visited"],[66,28,72,24],[66,29,72,25,"has"],[66,32,72,28],[66,33,72,29,"preMapper"],[66,42,72,38],[66,43,72,39],[66,45,72,41],[67,18,73,14,"dfs"],[67,21,73,17],[67,22,73,18,"preMapper"],[67,31,73,27],[67,32,73,28],[68,16,74,12],[69,14,75,10],[70,12,76,8],[71,10,77,6],[72,10,78,6,"newOrder"],[72,18,78,14],[72,19,78,15,"push"],[72,23,78,19],[72,24,78,20,"mapper"],[72,30,78,26],[72,31,78,27],[73,8,79,4],[74,8,80,4,"mappers"],[74,15,80,11],[74,16,80,12,"forEach"],[74,23,80,19],[74,24,80,21,"mapper"],[74,30,80,27],[74,34,80,32],[75,10,81,6],[75,14,81,10],[75,15,81,11,"visited"],[75,22,81,18],[75,23,81,19,"has"],[75,26,81,22],[75,27,81,23,"mapper"],[75,33,81,29],[75,34,81,30],[75,36,81,32],[76,12,82,8,"dfs"],[76,15,82,11],[76,16,82,12,"mapper"],[76,22,82,18],[76,23,82,19],[77,10,83,6],[78,8,84,4],[78,9,84,5],[78,10,84,6],[79,8,85,4,"sortedMappers"],[79,21,85,17],[79,24,85,20,"newOrder"],[79,32,85,28],[80,6,86,2],[81,6,88,2],[81,15,88,11,"mapperRun"],[81,24,88,20,"mapperRun"],[81,25,88,20],[81,27,88,23],[82,8,89,4,"runRequested"],[82,20,89,16],[82,23,89,19],[82,28,89,24],[83,8,90,4],[83,12,90,8,"processingMappers"],[83,29,90,25],[83,31,90,27],[84,10,91,6],[85,8,92,4],[86,8,93,4],[86,12,93,8],[87,10,94,6,"processingMappers"],[87,27,94,23],[87,30,94,26],[87,34,94,30],[88,10,95,6],[88,14,95,10,"mappers"],[88,21,95,17],[88,22,95,18,"size"],[88,26,95,22],[88,31,95,27,"sortedMappers"],[88,44,95,40],[88,45,95,41,"length"],[88,51,95,47],[88,53,95,49],[89,12,96,8,"updateMappersOrder"],[89,30,96,26],[89,31,96,27],[89,32,96,28],[90,10,97,6],[91,10,98,6],[91,15,98,11],[91,19,98,17,"mapper"],[91,25,98,23],[91,29,98,27,"sortedMappers"],[91,42,98,40],[91,44,98,42],[92,12,99,8],[92,16,99,12,"mapper"],[92,22,99,18],[92,23,99,19,"dirty"],[92,28,99,24],[92,30,99,26],[93,14,100,10,"mapper"],[93,20,100,16],[93,21,100,17,"dirty"],[93,26,100,22],[93,29,100,25],[93,34,100,30],[94,14,101,10,"mapper"],[94,20,101,16],[94,21,101,17,"worklet"],[94,28,101,24],[94,29,101,25],[94,30,101,26],[95,12,102,8],[96,10,103,6],[97,8,104,4],[97,9,104,5],[97,18,104,14],[98,10,105,6,"processingMappers"],[98,27,105,23],[98,30,105,26],[98,35,105,31],[99,8,106,4],[100,6,107,2],[101,6,109,2],[101,15,109,11,"maybeRequestUpdates"],[101,34,109,30,"maybeRequestUpdates"],[101,35,109,30],[101,37,109,33],[102,8,110,4],[102,12,110,8,"IS_JEST"],[102,19,110,15],[102,21,110,17],[103,10,111,6],[104,10,112,6],[105,10,113,6],[106,10,114,6],[107,10,115,6],[108,10,116,6],[109,10,117,6,"mapperRun"],[109,19,117,15],[109,20,117,16],[109,21,117,17],[110,8,118,4],[110,9,118,5],[110,15,118,11],[110,19,118,15],[110,20,118,16,"runRequested"],[110,32,118,28],[110,34,118,30],[111,10,119,6],[111,14,119,10,"processingMappers"],[111,31,119,27],[111,33,119,29],[112,12,120,8],[113,12,121,8],[114,12,122,8],[115,12,123,8],[116,12,124,8],[117,12,125,8],[118,12,126,8],[119,12,127,8],[120,12,128,8],[121,12,129,8],[122,12,130,8],[123,12,131,8,"requestAnimationFrame"],[123,33,131,29],[123,34,131,30,"mapperRun"],[123,43,131,39],[123,44,131,40],[124,10,132,6],[124,11,132,7],[124,17,132,13],[125,12,133,8,"queueMicrotask"],[125,26,133,22],[125,27,133,23,"mapperRun"],[125,36,133,32],[125,37,133,33],[126,10,134,6],[127,10,135,6,"runRequested"],[127,22,135,18],[127,25,135,21],[127,29,135,25],[128,8,136,4],[129,6,137,2],[130,6,139,2],[130,15,139,11,"extractInputs"],[130,28,139,24,"extractInputs"],[130,29,140,4,"inputs"],[130,35,140,19],[130,37,141,4,"resultArray"],[130,48,141,38],[130,50,142,27],[131,8,143,4],[131,12,143,8,"Array"],[131,17,143,13],[131,18,143,14,"isArray"],[131,25,143,21],[131,26,143,22,"inputs"],[131,32,143,28],[131,33,143,29],[131,35,143,31],[132,10,144,6],[132,15,144,11],[132,19,144,17,"input"],[132,24,144,22],[132,28,144,26,"inputs"],[132,34,144,32],[132,36,144,34],[133,12,145,8],[133,16,145,12,"input"],[133,21,145,17],[133,23,145,19],[134,14,146,10,"extractInputs"],[134,27,146,23],[134,28,146,24,"input"],[134,33,146,29],[134,35,146,31,"resultArray"],[134,46,146,42],[134,47,146,43],[135,12,147,8],[136,10,148,6],[137,8,149,4],[137,9,149,5],[137,15,149,11],[137,19,149,15,"isSharedValue"],[137,32,149,28],[137,33,149,29,"inputs"],[137,39,149,35],[137,40,149,36],[137,42,149,38],[138,10,150,6,"resultArray"],[138,21,150,17],[138,22,150,18,"push"],[138,26,150,22],[138,27,150,23,"inputs"],[138,33,150,29],[138,34,150,30],[139,8,151,4],[139,9,151,5],[139,15,151,11],[139,19,151,15,"Object"],[139,25,151,21],[139,26,151,22,"getPrototypeOf"],[139,40,151,36],[139,41,151,37,"inputs"],[139,47,151,43],[139,48,151,44],[139,53,151,49,"Object"],[139,59,151,55],[139,60,151,56,"prototype"],[139,69,151,65],[139,71,151,67],[140,10,152,6],[141,10,153,6],[142,10,154,6],[143,10,155,6],[143,15,155,11],[143,19,155,17,"element"],[143,26,155,24],[143,30,155,28,"Object"],[143,36,155,34],[143,37,155,35,"values"],[143,43,155,41],[143,44,155,42,"inputs"],[143,50,155,75],[143,51,155,76],[143,53,155,78],[144,12,156,8],[144,16,156,12,"element"],[144,23,156,19],[144,25,156,21],[145,14,157,10,"extractInputs"],[145,27,157,23],[145,28,157,24,"element"],[145,35,157,31],[145,37,157,33,"resultArray"],[145,48,157,44],[145,49,157,45],[146,12,158,8],[147,10,159,6],[148,8,160,4],[149,8,161,4],[149,15,161,11,"resultArray"],[149,26,161,22],[150,6,162,2],[151,6,164,2],[151,13,164,9],[152,8,165,4,"start"],[152,13,165,9],[152,15,165,11,"start"],[152,16,166,6,"mapperID"],[152,24,166,22],[152,26,167,6,"worklet"],[152,33,167,25],[152,35,168,6,"inputs"],[152,41,168,29],[152,43,169,6,"outputs"],[152,50,169,29],[152,55,170,9],[153,10,171,6],[153,14,171,12,"mapper"],[153,20,171,26],[153,23,171,29],[154,12,172,8,"id"],[154,14,172,10],[154,16,172,12,"mapperID"],[154,24,172,20],[155,12,173,8,"dirty"],[155,17,173,13],[155,19,173,15],[155,23,173,19],[156,12,174,8,"worklet"],[156,19,174,15],[157,12,175,8,"inputs"],[157,18,175,14],[157,20,175,16,"extractInputs"],[157,33,175,29],[157,34,175,30,"inputs"],[157,40,175,36],[157,42,175,38],[157,44,175,40],[157,45,175,41],[158,12,176,8,"outputs"],[159,10,177,6],[159,11,177,7],[160,10,178,6,"mappers"],[160,17,178,13],[160,18,178,14,"set"],[160,21,178,17],[160,22,178,18,"mapper"],[160,28,178,24],[160,29,178,25,"id"],[160,31,178,27],[160,33,178,29,"mapper"],[160,39,178,35],[160,40,178,36],[161,10,179,6,"sortedMappers"],[161,23,179,19],[161,26,179,22],[161,28,179,24],[162,10,180,6],[162,15,180,11],[162,19,180,17,"sv"],[162,21,180,19],[162,25,180,23,"mapper"],[162,31,180,29],[162,32,180,30,"inputs"],[162,38,180,36],[162,40,180,38],[163,12,181,8,"sv"],[163,14,181,10],[163,15,181,11,"addListener"],[163,26,181,22],[163,27,181,23,"mapper"],[163,33,181,29],[163,34,181,30,"id"],[163,36,181,32],[163,38,181,34],[163,44,181,40],[164,14,182,10,"mapper"],[164,20,182,16],[164,21,182,17,"dirty"],[164,26,182,22],[164,29,182,25],[164,33,182,29],[165,14,183,10,"maybeRequestUpdates"],[165,33,183,29],[165,34,183,30],[165,35,183,31],[166,12,184,8],[166,13,184,9],[166,14,184,10],[167,10,185,6],[168,10,186,6,"maybeRequestUpdates"],[168,29,186,25],[168,30,186,26],[168,31,186,27],[169,8,187,4],[169,9,187,5],[170,8,188,4,"stop"],[170,12,188,8],[170,14,188,11,"mapperID"],[170,22,188,27],[170,26,188,32],[171,10,189,6],[171,14,189,12,"mapper"],[171,20,189,18],[171,23,189,21,"mappers"],[171,30,189,28],[171,31,189,29,"get"],[171,34,189,32],[171,35,189,33,"mapperID"],[171,43,189,41],[171,44,189,42],[172,10,190,6],[172,14,190,10,"mapper"],[172,20,190,16],[172,22,190,18],[173,12,191,8,"mappers"],[173,19,191,15],[173,20,191,16,"delete"],[173,26,191,22],[173,27,191,23,"mapper"],[173,33,191,29],[173,34,191,30,"id"],[173,36,191,32],[173,37,191,33],[174,12,192,8,"sortedMappers"],[174,25,192,21],[174,28,192,24],[174,30,192,26],[175,12,193,8],[175,17,193,13],[175,21,193,19,"sv"],[175,23,193,21],[175,27,193,25,"mapper"],[175,33,193,31],[175,34,193,32,"inputs"],[175,40,193,38],[175,42,193,40],[176,14,194,10,"sv"],[176,16,194,12],[176,17,194,13,"removeListener"],[176,31,194,27],[176,32,194,28,"mapper"],[176,38,194,34],[176,39,194,35,"id"],[176,41,194,37],[176,42,194,38],[177,12,195,8],[178,10,196,6],[179,8,197,4],[180,6,198,2],[180,7,198,3],[181,4,199,0],[181,5,199,1],[182,4,199,1,"createMapperRegistry"],[182,24,199,1],[182,25,199,1,"__closure"],[182,34,199,1],[183,6,110,8,"IS_JEST"],[183,13,110,15],[184,6,149,15,"isSharedValue"],[185,4,149,28],[186,4,149,28,"createMapperRegistry"],[186,24,149,28],[186,25,149,28,"__workletHash"],[186,38,149,28],[187,4,149,28,"createMapperRegistry"],[187,24,149,28],[187,25,149,28,"__initData"],[187,35,149,28],[187,38,149,28,"_worklet_10917204099484_init_data"],[187,71,149,28],[188,4,149,28],[188,11,149,28,"createMapperRegistry"],[188,31,149,28],[189,2,149,28],[189,3,22,0],[190,4,22,0,"_worklet_10917204099484_init_data"],[190,37,22,0],[191,4,110,8,"IS_JEST"],[191,11,110,15],[191,13,110,8,"IS_JEST"],[191,20,110,15],[191,21,110,15,"IS_JEST"],[191,28,110,15],[192,4,149,15,"isSharedValue"],[192,17,149,28],[192,19,149,15,"isSharedValue"],[192,33,149,28],[192,34,149,28,"isSharedValue"],[193,2,149,28],[194,2,201,0],[194,6,201,4,"MAPPER_ID"],[194,15,201,13],[194,18,201,16],[194,22,201,20],[195,2,201,21],[195,6,201,21,"_worklet_9660765174658_init_data"],[195,38,201,21],[196,4,201,21,"code"],[196,8,201,21],[197,2,201,21],[198,2,203,7],[198,11,203,16,"startMapper"],[198,22,203,27,"startMapper"],[198,23,204,2,"worklet"],[198,30,204,21],[198,32,207,10],[199,4,207,10],[199,8,205,2,"inputs"],[199,14,205,25],[199,17,205,25,"arguments"],[199,26,205,25],[199,27,205,25,"length"],[199,33,205,25],[199,41,205,25,"arguments"],[199,50,205,25],[199,58,205,25,"undefined"],[199,67,205,25],[199,70,205,25,"arguments"],[199,79,205,25],[199,85,205,28],[199,87,205,30],[200,4,205,30],[200,8,206,2,"outputs"],[200,15,206,24],[200,18,206,24,"arguments"],[200,27,206,24],[200,28,206,24,"length"],[200,34,206,24],[200,42,206,24,"arguments"],[200,51,206,24],[200,59,206,24,"undefined"],[200,68,206,24],[200,71,206,24,"arguments"],[200,80,206,24],[200,86,206,27],[200,88,206,29],[201,4,208,2],[201,8,208,8,"mapperID"],[201,16,208,16],[201,19,208,20,"MAPPER_ID"],[201,28,208,29],[201,32,208,33],[201,33,208,35],[202,4,210,2],[202,8,210,2,"runOnUI"],[202,28,210,9],[202,29,210,9,"runOnUI"],[202,36,210,9],[202,38,210,10],[202,47,210,10,"reactNativeReanimated_mappersTs2Factory"],[202,87,210,10,"_ref2"],[202,92,210,10],[203,6,210,10],[203,10,210,10,"_worklet_9660765174658_init_data"],[203,42,210,10],[203,45,210,10,"_ref2"],[203,50,210,10],[203,51,210,10,"_worklet_9660765174658_init_data"],[203,83,210,10],[204,8,213,49,"createMapperRegistry"],[204,28,213,69],[204,31,213,69,"_ref2"],[204,36,213,69],[204,37,213,49,"createMapperRegistry"],[204,57,213,69],[205,8,215,25,"mapperID"],[205,16,215,33],[205,19,215,33,"_ref2"],[205,24,215,33],[205,25,215,25,"mapperID"],[205,33,215,33],[206,8,215,35,"worklet"],[206,15,215,42],[206,18,215,42,"_ref2"],[206,23,215,42],[206,24,215,35,"worklet"],[206,31,215,42],[207,8,215,44,"inputs"],[207,14,215,50],[207,17,215,50,"_ref2"],[207,22,215,50],[207,23,215,44,"inputs"],[207,29,215,50],[208,8,215,52,"outputs"],[208,15,215,59],[208,18,215,59,"_ref2"],[208,23,215,59],[208,24,215,52,"outputs"],[208,31,215,59],[209,6,215,59],[209,10,215,59,"reactNativeReanimated_mappersTs2"],[209,42,215,59],[209,54,215,59,"reactNativeReanimated_mappersTs2"],[209,55,215,59],[209,57,210,16],[210,8,211,4],[210,12,211,8,"mapperRegistry"],[210,26,211,22],[210,29,211,25,"global"],[210,35,211,31],[210,36,211,32,"__mapperRegistry"],[210,52,211,48],[211,8,212,4],[211,12,212,8,"mapperRegistry"],[211,26,212,22],[211,31,212,27,"undefined"],[211,40,212,36],[211,42,212,38],[212,10,213,6,"mapperRegistry"],[212,24,213,20],[212,27,213,23,"global"],[212,33,213,29],[212,34,213,30,"__mapperRegistry"],[212,50,213,46],[212,53,213,49,"createMapperRegistry"],[212,73,213,69],[212,74,213,70],[212,75,213,71],[213,8,214,4],[214,8,215,4,"mapperRegistry"],[214,22,215,18],[214,23,215,19,"start"],[214,28,215,24],[214,29,215,25,"mapperID"],[214,37,215,33],[214,39,215,35,"worklet"],[214,46,215,42],[214,48,215,44,"inputs"],[214,54,215,50],[214,56,215,52,"outputs"],[214,63,215,59],[214,64,215,60],[215,6,216,2],[215,7,216,3],[216,6,216,3,"reactNativeReanimated_mappersTs2"],[216,38,216,3],[216,39,216,3,"__closure"],[216,48,216,3],[217,8,213,49,"createMapperRegistry"],[217,28,213,69],[218,8,215,25,"mapperID"],[218,16,215,33],[219,8,215,35,"worklet"],[219,15,215,42],[220,8,215,44,"inputs"],[220,14,215,50],[221,8,215,52,"outputs"],[222,6,215,59],[223,6,215,59,"reactNativeReanimated_mappersTs2"],[223,38,215,59],[223,39,215,59,"__workletHash"],[223,52,215,59],[224,6,215,59,"reactNativeReanimated_mappersTs2"],[224,38,215,59],[224,39,215,59,"__initData"],[224,49,215,59],[224,52,215,59,"_worklet_9660765174658_init_data"],[224,84,215,59],[225,6,215,59],[225,13,215,59,"reactNativeReanimated_mappersTs2"],[225,45,215,59],[226,4,215,59],[226,5,210,10],[227,6,210,10,"_worklet_9660765174658_init_data"],[227,38,210,10],[228,6,213,49,"createMapperRegistry"],[228,26,213,69],[229,6,215,25,"mapperID"],[229,14,215,33],[230,6,215,35,"worklet"],[230,13,215,42],[231,6,215,44,"inputs"],[231,12,215,50],[232,6,215,52,"outputs"],[233,4,215,59],[233,6,216,3],[233,7,216,4],[233,8,216,5],[233,9,216,6],[234,4,218,2],[234,11,218,9,"mapperID"],[234,19,218,17],[235,2,219,0],[236,2,219,1],[236,6,219,1,"_worklet_7172044021294_init_data"],[236,38,219,1],[237,4,219,1,"code"],[237,8,219,1],[238,2,219,1],[239,2,221,7],[239,11,221,16,"stopMapper"],[239,21,221,26,"stopMapper"],[239,22,221,27,"mapperID"],[239,30,221,43],[239,32,221,51],[240,4,222,2],[240,8,222,2,"runOnUI"],[240,28,222,9],[240,29,222,9,"runOnUI"],[240,36,222,9],[240,38,222,10],[240,47,222,10,"reactNativeReanimated_mappersTs3Factory"],[240,87,222,10,"_ref3"],[240,92,222,10],[241,6,222,10],[241,10,222,10,"_worklet_7172044021294_init_data"],[241,42,222,10],[241,45,222,10,"_ref3"],[241,50,222,10],[241,51,222,10,"_worklet_7172044021294_init_data"],[241,83,222,10],[242,8,224,25,"mapperID"],[242,16,224,33],[242,19,224,33,"_ref3"],[242,24,224,33],[242,25,224,25,"mapperID"],[242,33,224,33],[243,6,224,33],[243,10,224,33,"reactNativeReanimated_mappersTs3"],[243,42,224,33],[243,54,224,33,"reactNativeReanimated_mappersTs3"],[243,55,224,33],[243,57,222,16],[244,8,223,4],[244,12,223,10,"mapperRegistry"],[244,26,223,24],[244,29,223,27,"global"],[244,35,223,33],[244,36,223,34,"__mapperRegistry"],[244,52,223,50],[245,8,224,4,"mapperRegistry"],[245,22,224,18],[245,24,224,20,"stop"],[245,28,224,24],[245,29,224,25,"mapperID"],[245,37,224,33],[245,38,224,34],[246,6,225,2],[246,7,225,3],[247,6,225,3,"reactNativeReanimated_mappersTs3"],[247,38,225,3],[247,39,225,3,"__closure"],[247,48,225,3],[248,8,224,25,"mapperID"],[249,6,224,33],[250,6,224,33,"reactNativeReanimated_mappersTs3"],[250,38,224,33],[250,39,224,33,"__workletHash"],[250,52,224,33],[251,6,224,33,"reactNativeReanimated_mappersTs3"],[251,38,224,33],[251,39,224,33,"__initData"],[251,49,224,33],[251,52,224,33,"_worklet_7172044021294_init_data"],[251,84,224,33],[252,6,224,33],[252,13,224,33,"reactNativeReanimated_mappersTs3"],[252,45,224,33],[253,4,224,33],[253,5,222,10],[254,6,222,10,"_worklet_7172044021294_init_data"],[254,38,222,10],[255,6,224,25,"mapperID"],[256,4,224,33],[256,6,225,3],[256,7,225,4],[256,8,225,5],[256,9,225,6],[257,2,226,0],[258,0,226,1],[258,3]],"functionMap":{"names":["<global>","createMapperRegistry","updateMappersOrder","forEach$argument_0","dfs","mapperRun","maybeRequestUpdates","extractInputs","start","sv.addListener$argument_1","stop","startMapper","runOnUI$argument_0","stopMapper"],"mappings":"AAA;ACqB;ECQ;oBCsB;KDW;IEG;KFa;oBCC;KDI;GDE;EIE;GJmB;EKE;GL4B;EME;GNuB;WOG;kCCgB;SDG;KPG;USC;KTS;CDE;OWI;UCO;GDM;CXG;OaE;UDC;GCG;CbC"},"hasCjsExports":false},"type":"js/module"}]}