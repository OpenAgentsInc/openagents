{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // For each opening emphasis-like marker find a matching closing one\n  //\n  'use strict';\n\n  function processDelimiters(state, delimiters) {\n    var closerIdx,\n      openerIdx,\n      closer,\n      opener,\n      minOpenerIdx,\n      newMinOpenerIdx,\n      isOddMatch,\n      lastJump,\n      openersBottom = {},\n      max = delimiters.length;\n    for (closerIdx = 0; closerIdx < max; closerIdx++) {\n      closer = delimiters[closerIdx];\n\n      // Length is only used for emphasis-specific \"rule of 3\",\n      // if it's not defined (in strikethrough or 3rd party plugins),\n      // we can default it to 0 to disable those checks.\n      //\n      closer.length = closer.length || 0;\n      if (!closer.close) continue;\n\n      // Previously calculated lower bounds (previous fails)\n      // for each marker and each delimiter length modulo 3.\n      if (!openersBottom.hasOwnProperty(closer.marker)) {\n        openersBottom[closer.marker] = [-1, -1, -1];\n      }\n      minOpenerIdx = openersBottom[closer.marker][closer.length % 3];\n      newMinOpenerIdx = -1;\n      openerIdx = closerIdx - closer.jump - 1;\n      for (; openerIdx > minOpenerIdx; openerIdx -= opener.jump + 1) {\n        opener = delimiters[openerIdx];\n        if (opener.marker !== closer.marker) continue;\n        if (newMinOpenerIdx === -1) newMinOpenerIdx = openerIdx;\n        if (opener.open && opener.end < 0 && opener.level === closer.level) {\n          isOddMatch = false;\n\n          // from spec:\n          //\n          // If one of the delimiters can both open and close emphasis, then the\n          // sum of the lengths of the delimiter runs containing the opening and\n          // closing delimiters must not be a multiple of 3 unless both lengths\n          // are multiples of 3.\n          //\n          if (opener.close || closer.open) {\n            if ((opener.length + closer.length) % 3 === 0) {\n              if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n                isOddMatch = true;\n              }\n            }\n          }\n          if (!isOddMatch) {\n            // If previous delimiter cannot be an opener, we can safely skip\n            // the entire sequence in future checks. This is required to make\n            // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n            //\n            lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? delimiters[openerIdx - 1].jump + 1 : 0;\n            closer.jump = closerIdx - openerIdx + lastJump;\n            closer.open = false;\n            opener.end = closerIdx;\n            opener.jump = lastJump;\n            opener.close = false;\n            newMinOpenerIdx = -1;\n            break;\n          }\n        }\n      }\n      if (newMinOpenerIdx !== -1) {\n        // If match for this delimiter run failed, we want to set lower bound for\n        // future lookups. This is required to make sure algorithm has linear\n        // complexity.\n        //\n        // See details here:\n        // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n        //\n        openersBottom[closer.marker][(closer.length || 0) % 3] = newMinOpenerIdx;\n      }\n    }\n  }\n  module.exports = function link_pairs(state) {\n    var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n    processDelimiters(state, state.delimiters);\n    for (curr = 0; curr < max; curr++) {\n      if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n        processDelimiters(state, tokens_meta[curr].delimiters);\n      }\n    }\n  };\n});","lineCount":95,"map":[[2,2,1,0],[3,2,2,0],[4,2,3,0],[4,14,3,12],[6,2,6,0],[6,11,6,9,"processDelimiters"],[6,28,6,26,"processDelimiters"],[6,29,6,27,"state"],[6,34,6,32],[6,36,6,34,"delimiters"],[6,46,6,44],[6,48,6,46],[7,4,7,2],[7,8,7,6,"closerIdx"],[7,17,7,15],[8,6,7,17,"openerIdx"],[8,15,7,26],[9,6,7,28,"closer"],[9,12,7,34],[10,6,7,36,"opener"],[10,12,7,42],[11,6,7,44,"minOpenerIdx"],[11,18,7,56],[12,6,7,58,"newMinOpenerIdx"],[12,21,7,73],[13,6,8,6,"isOddMatch"],[13,16,8,16],[14,6,8,18,"lastJump"],[14,14,8,26],[15,6,9,6,"openersBottom"],[15,19,9,19],[15,22,9,22],[15,23,9,23],[15,24,9,24],[16,6,10,6,"max"],[16,9,10,9],[16,12,10,12,"delimiters"],[16,22,10,22],[16,23,10,23,"length"],[16,29,10,29],[17,4,12,2],[17,9,12,7,"closerIdx"],[17,18,12,16],[17,21,12,19],[17,22,12,20],[17,24,12,22,"closerIdx"],[17,33,12,31],[17,36,12,34,"max"],[17,39,12,37],[17,41,12,39,"closerIdx"],[17,50,12,48],[17,52,12,50],[17,54,12,52],[18,6,13,4,"closer"],[18,12,13,10],[18,15,13,13,"delimiters"],[18,25,13,23],[18,26,13,24,"closerIdx"],[18,35,13,33],[18,36,13,34],[20,6,15,4],[21,6,16,4],[22,6,17,4],[23,6,18,4],[24,6,19,4,"closer"],[24,12,19,10],[24,13,19,11,"length"],[24,19,19,17],[24,22,19,20,"closer"],[24,28,19,26],[24,29,19,27,"length"],[24,35,19,33],[24,39,19,37],[24,40,19,38],[25,6,21,4],[25,10,21,8],[25,11,21,9,"closer"],[25,17,21,15],[25,18,21,16,"close"],[25,23,21,21],[25,25,21,23],[27,6,23,4],[28,6,24,4],[29,6,25,4],[29,10,25,8],[29,11,25,9,"openersBottom"],[29,24,25,22],[29,25,25,23,"hasOwnProperty"],[29,39,25,37],[29,40,25,38,"closer"],[29,46,25,44],[29,47,25,45,"marker"],[29,53,25,51],[29,54,25,52],[29,56,25,54],[30,8,26,6,"openersBottom"],[30,21,26,19],[30,22,26,20,"closer"],[30,28,26,26],[30,29,26,27,"marker"],[30,35,26,33],[30,36,26,34],[30,39,26,37],[30,51,26,51],[31,6,27,4],[32,6,29,4,"minOpenerIdx"],[32,18,29,16],[32,21,29,19,"openersBottom"],[32,34,29,32],[32,35,29,33,"closer"],[32,41,29,39],[32,42,29,40,"marker"],[32,48,29,46],[32,49,29,47],[32,50,29,48,"closer"],[32,56,29,54],[32,57,29,55,"length"],[32,63,29,61],[32,66,29,64],[32,67,29,65],[32,68,29,66],[33,6,30,4,"newMinOpenerIdx"],[33,21,30,19],[33,26,30,24],[34,6,32,4,"openerIdx"],[34,15,32,13],[34,18,32,16,"closerIdx"],[34,27,32,25],[34,30,32,28,"closer"],[34,36,32,34],[34,37,32,35,"jump"],[34,41,32,39],[34,44,32,42],[34,45,32,43],[35,6,34,4],[35,13,34,11,"openerIdx"],[35,22,34,20],[35,25,34,23,"minOpenerIdx"],[35,37,34,35],[35,39,34,37,"openerIdx"],[35,48,34,46],[35,52,34,50,"opener"],[35,58,34,56],[35,59,34,57,"jump"],[35,63,34,61],[35,66,34,64],[35,67,34,65],[35,69,34,67],[36,8,35,6,"opener"],[36,14,35,12],[36,17,35,15,"delimiters"],[36,27,35,25],[36,28,35,26,"openerIdx"],[36,37,35,35],[36,38,35,36],[37,8,37,6],[37,12,37,10,"opener"],[37,18,37,16],[37,19,37,17,"marker"],[37,25,37,23],[37,30,37,28,"closer"],[37,36,37,34],[37,37,37,35,"marker"],[37,43,37,41],[37,45,37,43],[38,8,39,6],[38,12,39,10,"newMinOpenerIdx"],[38,27,39,25],[38,34,39,32],[38,36,39,34,"newMinOpenerIdx"],[38,51,39,49],[38,54,39,52,"openerIdx"],[38,63,39,61],[39,8,41,6],[39,12,41,10,"opener"],[39,18,41,16],[39,19,41,17,"open"],[39,23,41,21],[39,27,42,10,"opener"],[39,33,42,16],[39,34,42,17,"end"],[39,37,42,20],[39,40,42,23],[39,41,42,24],[39,45,43,10,"opener"],[39,51,43,16],[39,52,43,17,"level"],[39,57,43,22],[39,62,43,27,"closer"],[39,68,43,33],[39,69,43,34,"level"],[39,74,43,39],[39,76,43,41],[40,10,45,8,"isOddMatch"],[40,20,45,18],[40,23,45,21],[40,28,45,26],[42,10,47,8],[43,10,48,8],[44,10,49,8],[45,10,50,8],[46,10,51,8],[47,10,52,8],[48,10,53,8],[49,10,54,8],[49,14,54,12,"opener"],[49,20,54,18],[49,21,54,19,"close"],[49,26,54,24],[49,30,54,28,"closer"],[49,36,54,34],[49,37,54,35,"open"],[49,41,54,39],[49,43,54,41],[50,12,55,10],[50,16,55,14],[50,17,55,15,"opener"],[50,23,55,21],[50,24,55,22,"length"],[50,30,55,28],[50,33,55,31,"closer"],[50,39,55,37],[50,40,55,38,"length"],[50,46,55,44],[50,50,55,48],[50,51,55,49],[50,56,55,54],[50,57,55,55],[50,59,55,57],[51,14,56,12],[51,18,56,16,"opener"],[51,24,56,22],[51,25,56,23,"length"],[51,31,56,29],[51,34,56,32],[51,35,56,33],[51,40,56,38],[51,41,56,39],[51,45,56,43,"closer"],[51,51,56,49],[51,52,56,50,"length"],[51,58,56,56],[51,61,56,59],[51,62,56,60],[51,67,56,65],[51,68,56,66],[51,70,56,68],[52,16,57,14,"isOddMatch"],[52,26,57,24],[52,29,57,27],[52,33,57,31],[53,14,58,12],[54,12,59,10],[55,10,60,8],[56,10,62,8],[56,14,62,12],[56,15,62,13,"isOddMatch"],[56,25,62,23],[56,27,62,25],[57,12,63,10],[58,12,64,10],[59,12,65,10],[60,12,66,10],[61,12,67,10,"lastJump"],[61,20,67,18],[61,23,67,21,"openerIdx"],[61,32,67,30],[61,35,67,33],[61,36,67,34],[61,40,67,38],[61,41,67,39,"delimiters"],[61,51,67,49],[61,52,67,50,"openerIdx"],[61,61,67,59],[61,64,67,62],[61,65,67,63],[61,66,67,64],[61,67,67,65,"open"],[61,71,67,69],[61,74,68,12,"delimiters"],[61,84,68,22],[61,85,68,23,"openerIdx"],[61,94,68,32],[61,97,68,35],[61,98,68,36],[61,99,68,37],[61,100,68,38,"jump"],[61,104,68,42],[61,107,68,45],[61,108,68,46],[61,111,69,12],[61,112,69,13],[62,12,71,10,"closer"],[62,18,71,16],[62,19,71,17,"jump"],[62,23,71,21],[62,26,71,25,"closerIdx"],[62,35,71,34],[62,38,71,37,"openerIdx"],[62,47,71,46],[62,50,71,49,"lastJump"],[62,58,71,57],[63,12,72,10,"closer"],[63,18,72,16],[63,19,72,17,"open"],[63,23,72,21],[63,26,72,25],[63,31,72,30],[64,12,73,10,"opener"],[64,18,73,16],[64,19,73,17,"end"],[64,22,73,20],[64,25,73,25,"closerIdx"],[64,34,73,34],[65,12,74,10,"opener"],[65,18,74,16],[65,19,74,17,"jump"],[65,23,74,21],[65,26,74,25,"lastJump"],[65,34,74,33],[66,12,75,10,"opener"],[66,18,75,16],[66,19,75,17,"close"],[66,24,75,22],[66,27,75,25],[66,32,75,30],[67,12,76,10,"newMinOpenerIdx"],[67,27,76,25],[67,32,76,30],[68,12,77,10],[69,10,78,8],[70,8,79,6],[71,6,80,4],[72,6,82,4],[72,10,82,8,"newMinOpenerIdx"],[72,25,82,23],[72,32,82,30],[72,34,82,32],[73,8,83,6],[74,8,84,6],[75,8,85,6],[76,8,86,6],[77,8,87,6],[78,8,88,6],[79,8,89,6],[80,8,90,6,"openersBottom"],[80,21,90,19],[80,22,90,20,"closer"],[80,28,90,26],[80,29,90,27,"marker"],[80,35,90,33],[80,36,90,34],[80,37,90,35],[80,38,90,36,"closer"],[80,44,90,42],[80,45,90,43,"length"],[80,51,90,49],[80,55,90,53],[80,56,90,54],[80,60,90,58],[80,61,90,59],[80,62,90,60],[80,65,90,63,"newMinOpenerIdx"],[80,80,90,78],[81,6,91,4],[82,4,92,2],[83,2,93,0],[84,2,96,0,"module"],[84,8,96,6],[84,9,96,7,"exports"],[84,16,96,14],[84,19,96,17],[84,28,96,26,"link_pairs"],[84,38,96,36,"link_pairs"],[84,39,96,37,"state"],[84,44,96,42],[84,46,96,44],[85,4,97,2],[85,8,97,6,"curr"],[85,12,97,10],[86,6,98,6,"tokens_meta"],[86,17,98,17],[86,20,98,20,"state"],[86,25,98,25],[86,26,98,26,"tokens_meta"],[86,37,98,37],[87,6,99,6,"max"],[87,9,99,9],[87,12,99,12,"state"],[87,17,99,17],[87,18,99,18,"tokens_meta"],[87,29,99,29],[87,30,99,30,"length"],[87,36,99,36],[88,4,101,2,"processDelimiters"],[88,21,101,19],[88,22,101,20,"state"],[88,27,101,25],[88,29,101,27,"state"],[88,34,101,32],[88,35,101,33,"delimiters"],[88,45,101,43],[88,46,101,44],[89,4,103,2],[89,9,103,7,"curr"],[89,13,103,11],[89,16,103,14],[89,17,103,15],[89,19,103,17,"curr"],[89,23,103,21],[89,26,103,24,"max"],[89,29,103,27],[89,31,103,29,"curr"],[89,35,103,33],[89,37,103,35],[89,39,103,37],[90,6,104,4],[90,10,104,8,"tokens_meta"],[90,21,104,19],[90,22,104,20,"curr"],[90,26,104,24],[90,27,104,25],[90,31,104,29,"tokens_meta"],[90,42,104,40],[90,43,104,41,"curr"],[90,47,104,45],[90,48,104,46],[90,49,104,47,"delimiters"],[90,59,104,57],[90,61,104,59],[91,8,105,6,"processDelimiters"],[91,25,105,23],[91,26,105,24,"state"],[91,31,105,29],[91,33,105,31,"tokens_meta"],[91,44,105,42],[91,45,105,43,"curr"],[91,49,105,47],[91,50,105,48],[91,51,105,49,"delimiters"],[91,61,105,59],[91,62,105,60],[92,6,106,4],[93,4,107,2],[94,2,108,0],[94,3,108,1],[95,0,108,2],[95,3]],"functionMap":{"names":["<global>","processDelimiters","link_pairs"],"mappings":"AAA;ACK;CDuF;iBEG;CFY"},"hasCjsExports":true},"type":"js/module"}]}