{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0},"end":{"line":11,"column":34}}],"key":"4HPAaDQ25ZwZ2dzTLatXuUucZUM=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"CellRenderMask\", {\n    enumerable: true,\n    get: function () {\n      return CellRenderMask;\n    }\n  });\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0]);\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[1]);\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[2]);\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _invariant = require(_dependencyMap[3]);\n  var invariant = _interopDefault(_invariant);\n  var CellRenderMask = /*#__PURE__*/function () {\n    function CellRenderMask(numCells) {\n      (0, _classCallCheck.default)(this, CellRenderMask);\n      (0, invariant.default)(numCells >= 0, 'CellRenderMask must contain a non-negative number os cells');\n      this._numCells = numCells;\n      if (numCells === 0) {\n        this._regions = [];\n      } else {\n        this._regions = [{\n          first: 0,\n          last: numCells - 1,\n          isSpacer: true\n        }];\n      }\n    }\n    return (0, _createClass.default)(CellRenderMask, [{\n      key: \"enumerateRegions\",\n      value: function enumerateRegions() {\n        return this._regions;\n      }\n    }, {\n      key: \"addCells\",\n      value: function addCells(cells) {\n        (0, invariant.default)(cells.first >= 0 && cells.first < this._numCells && cells.last >= -1 && cells.last < this._numCells && cells.last >= cells.first - 1, 'CellRenderMask.addCells called with invalid cell range');\n        if (cells.last < cells.first) {\n          return;\n        }\n        var _this$_findRegion = this._findRegion(cells.first),\n          _this$_findRegion2 = (0, _slicedToArray.default)(_this$_findRegion, 2),\n          firstIntersect = _this$_findRegion2[0],\n          firstIntersectIdx = _this$_findRegion2[1];\n        var _this$_findRegion3 = this._findRegion(cells.last),\n          _this$_findRegion4 = (0, _slicedToArray.default)(_this$_findRegion3, 2),\n          lastIntersect = _this$_findRegion4[0],\n          lastIntersectIdx = _this$_findRegion4[1];\n        if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n          return;\n        }\n        var newLeadRegion = [];\n        var newTailRegion = [];\n        var newMainRegion = {\n          ...cells,\n          isSpacer: false\n        };\n        if (firstIntersect.first < newMainRegion.first) {\n          if (firstIntersect.isSpacer) {\n            newLeadRegion.push({\n              first: firstIntersect.first,\n              last: newMainRegion.first - 1,\n              isSpacer: true\n            });\n          } else {\n            newMainRegion.first = firstIntersect.first;\n          }\n        }\n        if (lastIntersect.last > newMainRegion.last) {\n          if (lastIntersect.isSpacer) {\n            newTailRegion.push({\n              first: newMainRegion.last + 1,\n              last: lastIntersect.last,\n              isSpacer: true\n            });\n          } else {\n            newMainRegion.last = lastIntersect.last;\n          }\n        }\n        var replacementRegions = [...newLeadRegion, newMainRegion, ...newTailRegion];\n        var numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n        this._regions.splice(firstIntersectIdx, numRegionsToDelete, ...replacementRegions);\n      }\n    }, {\n      key: \"numCells\",\n      value: function numCells() {\n        return this._numCells;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(other) {\n        return this._numCells === other._numCells && this._regions.length === other._regions.length && this._regions.every((region, i) => region.first === other._regions[i].first && region.last === other._regions[i].last && region.isSpacer === other._regions[i].isSpacer);\n      }\n    }, {\n      key: \"_findRegion\",\n      value: function _findRegion(cellIdx) {\n        var firstIdx = 0;\n        var lastIdx = this._regions.length - 1;\n        while (firstIdx <= lastIdx) {\n          var middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n          var middleRegion = this._regions[middleIdx];\n          if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n            return [middleRegion, middleIdx];\n          } else if (cellIdx < middleRegion.first) {\n            lastIdx = middleIdx - 1;\n          } else if (cellIdx > middleRegion.last) {\n            firstIdx = middleIdx + 1;\n          }\n        }\n        (0, invariant.default)(false, `A region was not found containing cellIdx ${cellIdx}`);\n      }\n    }]);\n  }();\n});","lineCount":126,"map":[[12,2,19,0,"Object"],[12,8,19,0],[12,9,19,0,"defineProperty"],[12,23,19,0],[12,24,19,0,"exports"],[12,31,19,0],[13,4,19,0,"enumerable"],[13,14,19,0],[14,4,19,0,"get"],[14,7,19,0],[14,18,19,0,"get"],[14,19,19,0],[15,6,19,0],[15,13,19,0,"CellRenderMask"],[15,27,19,0],[16,4,19,0],[17,2,19,0],[18,2,155,1],[18,6,155,1,"_babelRuntimeHelpersSlicedToArray"],[18,39,155,1],[18,42,155,1,"require"],[18,49,155,1],[18,50,155,1,"_dependencyMap"],[18,64,155,1],[19,2,155,1],[19,6,155,1,"_slicedToArray"],[19,20,155,1],[19,23,155,1,"_interopDefault"],[19,38,155,1],[19,39,155,1,"_babelRuntimeHelpersSlicedToArray"],[19,72,155,1],[20,2,155,1],[20,6,155,1,"_babelRuntimeHelpersClassCallCheck"],[20,40,155,1],[20,43,155,1,"require"],[20,50,155,1],[20,51,155,1,"_dependencyMap"],[20,65,155,1],[21,2,155,1],[21,6,155,1,"_classCallCheck"],[21,21,155,1],[21,24,155,1,"_interopDefault"],[21,39,155,1],[21,40,155,1,"_babelRuntimeHelpersClassCallCheck"],[21,74,155,1],[22,2,155,1],[22,6,155,1,"_babelRuntimeHelpersCreateClass"],[22,37,155,1],[22,40,155,1,"require"],[22,47,155,1],[22,48,155,1,"_dependencyMap"],[22,62,155,1],[23,2,155,1],[23,6,155,1,"_createClass"],[23,18,155,1],[23,21,155,1,"_interopDefault"],[23,36,155,1],[23,37,155,1,"_babelRuntimeHelpersCreateClass"],[23,68,155,1],[24,2,11,0],[24,6,11,0,"_invariant"],[24,16,11,0],[24,19,11,0,"require"],[24,26,11,0],[24,27,11,0,"_dependencyMap"],[24,41,11,0],[25,2,11,0],[25,6,11,0,"invariant"],[25,15,11,0],[25,18,11,0,"_interopDefault"],[25,33,11,0],[25,34,11,0,"_invariant"],[25,44,11,0],[26,2,11,34],[26,6,19,13,"CellRenderMask"],[26,20,19,27],[27,4,23,2],[27,13,23,2,"CellRenderMask"],[27,28,23,14,"numCells"],[27,36,23,30],[27,38,23,32],[28,6,23,32],[28,10,23,32,"_classCallCheck"],[28,25,23,32],[28,26,23,32,"default"],[28,33,23,32],[28,41,23,32,"CellRenderMask"],[28,55,23,32],[29,6,24,4],[29,10,24,4,"invariant"],[29,19,24,13],[29,20,24,13,"default"],[29,27,24,13],[29,29,25,6,"numCells"],[29,37,25,14],[29,41,25,18],[29,42,25,19],[29,44,26,6],[29,104,27,4],[29,105,27,5],[30,6,29,4],[30,10,29,8],[30,11,29,9,"_numCells"],[30,20,29,18],[30,23,29,21,"numCells"],[30,31,29,29],[31,6,31,4],[31,10,31,8,"numCells"],[31,18,31,16],[31,23,31,21],[31,24,31,22],[31,26,31,24],[32,8,32,6],[32,12,32,10],[32,13,32,11,"_regions"],[32,21,32,19],[32,24,32,22],[32,26,32,24],[33,6,33,4],[33,7,33,5],[33,13,33,11],[34,8,34,6],[34,12,34,10],[34,13,34,11,"_regions"],[34,21,34,19],[34,24,34,22],[34,25,35,8],[35,10,36,10,"first"],[35,15,36,15],[35,17,36,17],[35,18,36,18],[36,10,37,10,"last"],[36,14,37,14],[36,16,37,16,"numCells"],[36,24,37,24],[36,27,37,27],[36,28,37,28],[37,10,38,10,"isSpacer"],[37,18,38,18],[37,20,38,20],[38,8,39,8],[38,9,39,9],[38,10,40,7],[39,6,41,4],[40,4,42,2],[41,4,42,3],[41,15,42,3,"_createClass"],[41,27,42,3],[41,28,42,3,"default"],[41,35,42,3],[41,37,42,3,"CellRenderMask"],[41,51,42,3],[42,6,42,3,"key"],[42,9,42,3],[43,6,42,3,"value"],[43,11,42,3],[43,13,44,2],[43,22,44,2,"enumerateRegions"],[43,38,44,18,"enumerateRegions"],[43,39,44,18],[43,41,44,49],[44,8,45,4],[44,15,45,11],[44,19,45,15],[44,20,45,16,"_regions"],[44,28,45,24],[45,6,46,2],[46,4,46,3],[47,6,46,3,"key"],[47,9,46,3],[48,6,46,3,"value"],[48,11,46,3],[48,13,48,2],[48,22,48,2,"addCells"],[48,30,48,10,"addCells"],[48,31,48,11,"cells"],[48,36,48,47],[48,38,48,55],[49,8,49,4],[49,12,49,4,"invariant"],[49,21,49,13],[49,22,49,13,"default"],[49,29,49,13],[49,31,50,6,"cells"],[49,36,50,11],[49,37,50,12,"first"],[49,42,50,17],[49,46,50,21],[49,47,50,22],[49,51,51,8,"cells"],[49,56,51,13],[49,57,51,14,"first"],[49,62,51,19],[49,65,51,22],[49,69,51,26],[49,70,51,27,"_numCells"],[49,79,51,36],[49,83,52,8,"cells"],[49,88,52,13],[49,89,52,14,"last"],[49,93,52,18],[49,99,52,24],[49,103,53,8,"cells"],[49,108,53,13],[49,109,53,14,"last"],[49,113,53,18],[49,116,53,21],[49,120,53,25],[49,121,53,26,"_numCells"],[49,130,53,35],[49,134,54,8,"cells"],[49,139,54,13],[49,140,54,14,"last"],[49,144,54,18],[49,148,54,22,"cells"],[49,153,54,27],[49,154,54,28,"first"],[49,159,54,33],[49,162,54,36],[49,163,54,37],[49,165,55,6],[49,221,56,4],[49,222,56,5],[50,8,60,4],[50,12,60,8,"cells"],[50,17,60,13],[50,18,60,14,"last"],[50,22,60,18],[50,25,60,21,"cells"],[50,30,60,26],[50,31,60,27,"first"],[50,36,60,32],[50,38,60,34],[51,10,61,6],[52,8,62,4],[53,8,64,4],[53,12,64,4,"_this$_findRegion"],[53,29,64,4],[53,32,64,48],[53,36,64,52],[53,37,64,53,"_findRegion"],[53,48,64,64],[53,49,64,65,"cells"],[53,54,64,70],[53,55,64,71,"first"],[53,60,64,76],[53,61,64,77],[54,10,64,77,"_this$_findRegion2"],[54,28,64,77],[54,35,64,77,"_slicedToArray"],[54,49,64,77],[54,50,64,77,"default"],[54,57,64,77],[54,59,64,77,"_this$_findRegion"],[54,76,64,77],[55,10,64,11,"firstIntersect"],[55,24,64,25],[55,27,64,25,"_this$_findRegion2"],[55,45,64,25],[56,10,64,27,"firstIntersectIdx"],[56,27,64,44],[56,30,64,44,"_this$_findRegion2"],[56,48,64,44],[57,8,65,4],[57,12,65,4,"_this$_findRegion3"],[57,30,65,4],[57,33,65,46],[57,37,65,50],[57,38,65,51,"_findRegion"],[57,49,65,62],[57,50,65,63,"cells"],[57,55,65,68],[57,56,65,69,"last"],[57,60,65,73],[57,61,65,74],[58,10,65,74,"_this$_findRegion4"],[58,28,65,74],[58,35,65,74,"_slicedToArray"],[58,49,65,74],[58,50,65,74,"default"],[58,57,65,74],[58,59,65,74,"_this$_findRegion3"],[58,77,65,74],[59,10,65,11,"lastIntersect"],[59,23,65,24],[59,26,65,24,"_this$_findRegion4"],[59,44,65,24],[60,10,65,26,"lastIntersectIdx"],[60,26,65,42],[60,29,65,42,"_this$_findRegion4"],[60,47,65,42],[61,8,69,4],[61,12,69,8,"firstIntersectIdx"],[61,29,69,25],[61,34,69,30,"lastIntersectIdx"],[61,50,69,46],[61,54,69,50],[61,55,69,51,"firstIntersect"],[61,69,69,65],[61,70,69,66,"isSpacer"],[61,78,69,74],[61,80,69,76],[62,10,70,6],[63,8,71,4],[64,8,75,4],[64,12,75,10,"newLeadRegion"],[64,25,75,42],[64,28,75,45],[64,30,75,47],[65,8,76,4],[65,12,76,10,"newTailRegion"],[65,25,76,42],[65,28,76,45],[65,30,76,47],[66,8,77,4],[66,12,77,10,"newMainRegion"],[66,25,77,35],[66,28,77,38],[67,10,78,6],[67,13,78,9,"cells"],[67,18,78,14],[68,10,79,6,"isSpacer"],[68,18,79,14],[68,20,79,16],[69,8,80,4],[69,9,80,5],[70,8,82,4],[70,12,82,8,"firstIntersect"],[70,26,82,22],[70,27,82,23,"first"],[70,32,82,28],[70,35,82,31,"newMainRegion"],[70,48,82,44],[70,49,82,45,"first"],[70,54,82,50],[70,56,82,52],[71,10,83,6],[71,14,83,10,"firstIntersect"],[71,28,83,24],[71,29,83,25,"isSpacer"],[71,37,83,33],[71,39,83,35],[72,12,84,8,"newLeadRegion"],[72,25,84,21],[72,26,84,22,"push"],[72,30,84,26],[72,31,84,27],[73,14,85,10,"first"],[73,19,85,15],[73,21,85,17,"firstIntersect"],[73,35,85,31],[73,36,85,32,"first"],[73,41,85,37],[74,14,86,10,"last"],[74,18,86,14],[74,20,86,16,"newMainRegion"],[74,33,86,29],[74,34,86,30,"first"],[74,39,86,35],[74,42,86,38],[74,43,86,39],[75,14,87,10,"isSpacer"],[75,22,87,18],[75,24,87,20],[76,12,88,8],[76,13,88,9],[76,14,88,10],[77,10,89,6],[77,11,89,7],[77,17,89,13],[78,12,90,8,"newMainRegion"],[78,25,90,21],[78,26,90,22,"first"],[78,31,90,27],[78,34,90,30,"firstIntersect"],[78,48,90,44],[78,49,90,45,"first"],[78,54,90,50],[79,10,91,6],[80,8,92,4],[81,8,94,4],[81,12,94,8,"lastIntersect"],[81,25,94,21],[81,26,94,22,"last"],[81,30,94,26],[81,33,94,29,"newMainRegion"],[81,46,94,42],[81,47,94,43,"last"],[81,51,94,47],[81,53,94,49],[82,10,95,6],[82,14,95,10,"lastIntersect"],[82,27,95,23],[82,28,95,24,"isSpacer"],[82,36,95,32],[82,38,95,34],[83,12,96,8,"newTailRegion"],[83,25,96,21],[83,26,96,22,"push"],[83,30,96,26],[83,31,96,27],[84,14,97,10,"first"],[84,19,97,15],[84,21,97,17,"newMainRegion"],[84,34,97,30],[84,35,97,31,"last"],[84,39,97,35],[84,42,97,38],[84,43,97,39],[85,14,98,10,"last"],[85,18,98,14],[85,20,98,16,"lastIntersect"],[85,33,98,29],[85,34,98,30,"last"],[85,38,98,34],[86,14,99,10,"isSpacer"],[86,22,99,18],[86,24,99,20],[87,12,100,8],[87,13,100,9],[87,14,100,10],[88,10,101,6],[88,11,101,7],[88,17,101,13],[89,12,102,8,"newMainRegion"],[89,25,102,21],[89,26,102,22,"last"],[89,30,102,26],[89,33,102,29,"lastIntersect"],[89,46,102,42],[89,47,102,43,"last"],[89,51,102,47],[90,10,103,6],[91,8,104,4],[92,8,106,4],[92,12,106,10,"replacementRegions"],[92,30,106,47],[92,33,106,50],[92,34,107,6],[92,37,107,9,"newLeadRegion"],[92,50,107,22],[92,52,108,6,"newMainRegion"],[92,65,108,19],[92,67,109,6],[92,70,109,9,"newTailRegion"],[92,83,109,22],[92,84,110,5],[93,8,111,4],[93,12,111,10,"numRegionsToDelete"],[93,30,111,28],[93,33,111,31,"lastIntersectIdx"],[93,49,111,47],[93,52,111,50,"firstIntersectIdx"],[93,69,111,67],[93,72,111,70],[93,73,111,71],[94,8,112,4],[94,12,112,8],[94,13,112,9,"_regions"],[94,21,112,17],[94,22,112,18,"splice"],[94,28,112,24],[94,29,113,6,"firstIntersectIdx"],[94,46,113,23],[94,48,114,6,"numRegionsToDelete"],[94,66,114,24],[94,68,115,6],[94,71,115,9,"replacementRegions"],[94,89,116,4],[94,90,116,5],[95,6,117,2],[96,4,117,3],[97,6,117,3,"key"],[97,9,117,3],[98,6,117,3,"value"],[98,11,117,3],[98,13,119,2],[98,22,119,2,"numCells"],[98,30,119,10,"numCells"],[98,31,119,10],[98,33,119,21],[99,8,120,4],[99,15,120,11],[99,19,120,15],[99,20,120,16,"_numCells"],[99,29,120,25],[100,6,121,2],[101,4,121,3],[102,6,121,3,"key"],[102,9,121,3],[103,6,121,3,"value"],[103,11,121,3],[103,13,123,2],[103,22,123,2,"equals"],[103,28,123,8,"equals"],[103,29,123,9,"other"],[103,34,123,30],[103,36,123,41],[104,8,124,4],[104,15,125,6],[104,19,125,10],[104,20,125,11,"_numCells"],[104,29,125,20],[104,34,125,25,"other"],[104,39,125,30],[104,40,125,31,"_numCells"],[104,49,125,40],[104,53,126,6],[104,57,126,10],[104,58,126,11,"_regions"],[104,66,126,19],[104,67,126,20,"length"],[104,73,126,26],[104,78,126,31,"other"],[104,83,126,36],[104,84,126,37,"_regions"],[104,92,126,45],[104,93,126,46,"length"],[104,99,126,52],[104,103,127,6],[104,107,127,10],[104,108,127,11,"_regions"],[104,116,127,19],[104,117,127,20,"every"],[104,122,127,25],[104,123,128,8],[104,124,128,9,"region"],[104,130,128,15],[104,132,128,17,"i"],[104,133,128,18],[104,138,129,10,"region"],[104,144,129,16],[104,145,129,17,"first"],[104,150,129,22],[104,155,129,27,"other"],[104,160,129,32],[104,161,129,33,"_regions"],[104,169,129,41],[104,170,129,42,"i"],[104,171,129,43],[104,172,129,44],[104,173,129,45,"first"],[104,178,129,50],[104,182,130,10,"region"],[104,188,130,16],[104,189,130,17,"last"],[104,193,130,21],[104,198,130,26,"other"],[104,203,130,31],[104,204,130,32,"_regions"],[104,212,130,40],[104,213,130,41,"i"],[104,214,130,42],[104,215,130,43],[104,216,130,44,"last"],[104,220,130,48],[104,224,131,10,"region"],[104,230,131,16],[104,231,131,17,"isSpacer"],[104,239,131,25],[104,244,131,30,"other"],[104,249,131,35],[104,250,131,36,"_regions"],[104,258,131,44],[104,259,131,45,"i"],[104,260,131,46],[104,261,131,47],[104,262,131,48,"isSpacer"],[104,270,132,6],[104,271,132,7],[105,6,134,2],[106,4,134,3],[107,6,134,3,"key"],[107,9,134,3],[108,6,134,3,"value"],[108,11,134,3],[108,13,136,2],[108,22,136,2,"_findRegion"],[108,33,136,13,"_findRegion"],[108,34,136,14,"cellIdx"],[108,41,136,29],[108,43,136,53],[109,8,137,4],[109,12,137,8,"firstIdx"],[109,20,137,16],[109,23,137,19],[109,24,137,20],[110,8,138,4],[110,12,138,8,"lastIdx"],[110,19,138,15],[110,22,138,18],[110,26,138,22],[110,27,138,23,"_regions"],[110,35,138,31],[110,36,138,32,"length"],[110,42,138,38],[110,45,138,41],[110,46,138,42],[111,8,140,4],[111,15,140,11,"firstIdx"],[111,23,140,19],[111,27,140,23,"lastIdx"],[111,34,140,30],[111,36,140,32],[112,10,141,6],[112,14,141,12,"middleIdx"],[112,23,141,21],[112,26,141,24,"Math"],[112,30,141,28],[112,31,141,29,"floor"],[112,36,141,34],[112,37,141,35],[112,38,141,36,"firstIdx"],[112,46,141,44],[112,49,141,47,"lastIdx"],[112,56,141,54],[112,60,141,58],[112,61,141,59],[112,62,141,60],[113,10,142,6],[113,14,142,12,"middleRegion"],[113,26,142,24],[113,29,142,27],[113,33,142,31],[113,34,142,32,"_regions"],[113,42,142,40],[113,43,142,41,"middleIdx"],[113,52,142,50],[113,53,142,51],[114,10,144,6],[114,14,144,10,"cellIdx"],[114,21,144,17],[114,25,144,21,"middleRegion"],[114,37,144,33],[114,38,144,34,"first"],[114,43,144,39],[114,47,144,43,"cellIdx"],[114,54,144,50],[114,58,144,54,"middleRegion"],[114,70,144,66],[114,71,144,67,"last"],[114,75,144,71],[114,77,144,73],[115,12,145,8],[115,19,145,15],[115,20,145,16,"middleRegion"],[115,32,145,28],[115,34,145,30,"middleIdx"],[115,43,145,39],[115,44,145,40],[116,10,146,6],[116,11,146,7],[116,17,146,13],[116,21,146,17,"cellIdx"],[116,28,146,24],[116,31,146,27,"middleRegion"],[116,43,146,39],[116,44,146,40,"first"],[116,49,146,45],[116,51,146,47],[117,12,147,8,"lastIdx"],[117,19,147,15],[117,22,147,18,"middleIdx"],[117,31,147,27],[117,34,147,30],[117,35,147,31],[118,10,148,6],[118,11,148,7],[118,17,148,13],[118,21,148,17,"cellIdx"],[118,28,148,24],[118,31,148,27,"middleRegion"],[118,43,148,39],[118,44,148,40,"last"],[118,48,148,44],[118,50,148,46],[119,12,149,8,"firstIdx"],[119,20,149,16],[119,23,149,19,"middleIdx"],[119,32,149,28],[119,35,149,31],[119,36,149,32],[120,10,150,6],[121,8,151,4],[122,8,153,4],[122,12,153,4,"invariant"],[122,21,153,13],[122,22,153,13,"default"],[122,29,153,13],[122,31,153,14],[122,36,153,19],[122,38,153,21],[122,83,153,66,"cellIdx"],[122,90,153,73],[122,92,153,75],[122,93,153,76],[123,6,154,2],[124,4,154,3],[125,2,154,3],[126,0,154,3],[126,3]],"functionMap":{"names":["<global>","CellRenderMask","constructor","enumerateRegions","addCells","numCells","equals","_regions.every$argument_0","_findRegion"],"mappings":"AAA;OCkB;ECI;GDmB;EEE;GFE;EGE;GHqE;EIE;GJE;EKE;QCK;wDDG;GLG;EOE;GPkB"},"hasCjsExports":false},"type":"js/module"}]}