{"dependencies":[{"name":"./ruler","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":22,"index":106},"end":{"line":9,"column":40,"index":124}}],"key":"XNITiXgZNTx9Cc2JMIXN1pw7vGM=","exportNames":["*"],"imports":1}},{"name":"./rules_block/table","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":15,"column":18,"index":278},"end":{"line":15,"column":48,"index":308}}],"key":"u16xTOjY+fYT4Uzj81k7AjfzAvM=","exportNames":["*"],"imports":1}},{"name":"./rules_block/code","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":18,"index":365},"end":{"line":16,"column":47,"index":394}}],"key":"AOwmrGhTnA7xYqaIFFVWp0aB5Ls=","exportNames":["*"],"imports":1}},{"name":"./rules_block/fence","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":17,"column":18,"index":416},"end":{"line":17,"column":48,"index":446}}],"key":"f8000/Qq9zvaGb7366Bh0vGuX1c=","exportNames":["*"],"imports":1}},{"name":"./rules_block/blockquote","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":18,"column":18,"index":525},"end":{"line":18,"column":53,"index":560}}],"key":"EqOcQwt/yRnYqYabTm/tJbd0ZiQ=","exportNames":["*"],"imports":1}},{"name":"./rules_block/hr","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":19,"column":18,"index":634},"end":{"line":19,"column":45,"index":661}}],"key":"Viw4+l0+5BqtMcxiJz6IQftDkk0=","exportNames":["*"],"imports":1}},{"name":"./rules_block/list","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":20,"column":18,"index":743},"end":{"line":20,"column":47,"index":772}}],"key":"scbwn5Q27nlmaNYzW2ZI636zlJg=","exportNames":["*"],"imports":1}},{"name":"./rules_block/reference","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":18,"index":844},"end":{"line":21,"column":52,"index":878}}],"key":"slyU0nMiRPx48ahcai1ECgxvhaI=","exportNames":["*"],"imports":1}},{"name":"./rules_block/heading","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":22,"column":18,"index":900},"end":{"line":22,"column":50,"index":932}}],"key":"HKzRLU/Kk0lGePcJnEpwrK0U9Qc=","exportNames":["*"],"imports":1}},{"name":"./rules_block/lheading","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":23,"column":18,"index":1001},"end":{"line":23,"column":51,"index":1034}}],"key":"tU+Uwczw8V4P7BRKyXQCJVLT8Gk=","exportNames":["*"],"imports":1}},{"name":"./rules_block/html_block","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":24,"column":18,"index":1056},"end":{"line":24,"column":53,"index":1091}}],"key":"DEGjIxxn/EHlLV8AmzMAAW7CYYA=","exportNames":["*"],"imports":1}},{"name":"./rules_block/paragraph","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":25,"column":18,"index":1157},"end":{"line":25,"column":52,"index":1191}}],"key":"pb66N4Bx2XCOwEiE82aOIRFFHsA=","exportNames":["*"],"imports":1}},{"name":"./rules_block/state_block","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":119,"column":30,"index":3396},"end":{"line":119,"column":66,"index":3432}}],"key":"2gvKCSQM4W8NQGsHxKW1/Nw0vcw=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /** internal\n   * class ParserBlock\n   *\n   * Block-level tokenizer.\n   **/\n  'use strict';\n\n  var Ruler = require(_dependencyMap[0]);\n  var _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  ['table', require(_dependencyMap[1]), ['paragraph', 'reference']], ['code', require(_dependencyMap[2])], ['fence', require(_dependencyMap[3]), ['paragraph', 'reference', 'blockquote', 'list']], ['blockquote', require(_dependencyMap[4]), ['paragraph', 'reference', 'blockquote', 'list']], ['hr', require(_dependencyMap[5]), ['paragraph', 'reference', 'blockquote', 'list']], ['list', require(_dependencyMap[6]), ['paragraph', 'reference', 'blockquote']], ['reference', require(_dependencyMap[7])], ['heading', require(_dependencyMap[8]), ['paragraph', 'reference', 'blockquote']], ['lheading', require(_dependencyMap[9])], ['html_block', require(_dependencyMap[10]), ['paragraph', 'reference', 'blockquote']], ['paragraph', require(_dependencyMap[11])]];\n\n  /**\n   * new ParserBlock()\n   **/\n  function ParserBlock() {\n    /**\n     * ParserBlock#ruler -> Ruler\n     *\n     * [[Ruler]] instance. Keep configuration of block rules.\n     **/\n    this.ruler = new Ruler();\n    for (var i = 0; i < _rules.length; i++) {\n      this.ruler.push(_rules[i][0], _rules[i][1], {\n        alt: (_rules[i][2] || []).slice()\n      });\n    }\n  }\n\n  // Generate tokens for input range\n  //\n  ParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n    var ok,\n      i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      line = startLine,\n      hasEmptyLines = false,\n      maxNesting = state.md.options.maxNesting;\n    while (line < endLine) {\n      state.line = line = state.skipEmptyLines(line);\n      if (line >= endLine) {\n        break;\n      }\n\n      // Termination condition for nested calls.\n      // Nested calls currently used for blockquotes & lists\n      if (state.sCount[line] < state.blkIndent) {\n        break;\n      }\n\n      // If nesting level exceeded - skip tail to the end. That's not ordinary\n      // situation and we should not care about content.\n      if (state.level >= maxNesting) {\n        state.line = endLine;\n        break;\n      }\n\n      // Try all possible rules.\n      // On success, rule should:\n      //\n      // - update `state.line`\n      // - update `state.tokens`\n      // - return true\n\n      for (i = 0; i < len; i++) {\n        ok = rules[i](state, line, endLine, false);\n        if (ok) {\n          break;\n        }\n      }\n\n      // set state.tight if we had an empty line before current tag\n      // i.e. latest empty line should not count\n      state.tight = !hasEmptyLines;\n\n      // paragraph might \"eat\" one newline after it in nested lists\n      if (state.isEmpty(state.line - 1)) {\n        hasEmptyLines = true;\n      }\n      line = state.line;\n      if (line < endLine && state.isEmpty(line)) {\n        hasEmptyLines = true;\n        line++;\n        state.line = line;\n      }\n    }\n  };\n\n  /**\n   * ParserBlock.parse(str, md, env, outTokens)\n   *\n   * Process input string and push block tokens into `outTokens`\n   **/\n  ParserBlock.prototype.parse = function (src, md, env, outTokens) {\n    var state;\n    if (!src) {\n      return;\n    }\n    state = new this.State(src, md, env, outTokens);\n    this.tokenize(state, state.line, state.lineMax);\n  };\n  ParserBlock.prototype.State = require(_dependencyMap[12]);\n  module.exports = ParserBlock;\n});","lineCount":107,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,2,6,0],[7,14,6,12],[9,2,9,0],[9,6,9,4,"Ruler"],[9,11,9,9],[9,14,9,22,"require"],[9,21,9,29],[9,22,9,29,"_dependencyMap"],[9,36,9,29],[9,39,9,39],[9,40,9,40],[10,2,12,0],[10,6,12,4,"_rules"],[10,12,12,10],[10,15,12,13],[11,2,13,2],[12,2,14,2],[13,2,15,2],[13,3,15,4],[13,10,15,11],[13,12,15,18,"require"],[13,19,15,25],[13,20,15,25,"_dependencyMap"],[13,34,15,25],[13,37,15,47],[13,38,15,48],[13,40,15,55],[13,41,15,57],[13,52,15,68],[13,54,15,70],[13,65,15,81],[13,66,15,83],[13,67,15,85],[13,69,16,2],[13,70,16,4],[13,76,16,10],[13,78,16,18,"require"],[13,85,16,25],[13,86,16,25,"_dependencyMap"],[13,100,16,25],[13,103,16,46],[13,104,16,47],[13,105,16,49],[13,107,17,2],[13,108,17,4],[13,115,17,11],[13,117,17,18,"require"],[13,124,17,25],[13,125,17,25,"_dependencyMap"],[13,139,17,25],[13,142,17,47],[13,143,17,48],[13,145,17,55],[13,146,17,57],[13,157,17,68],[13,159,17,70],[13,170,17,81],[13,172,17,83],[13,184,17,95],[13,186,17,97],[13,192,17,103],[13,193,17,105],[13,194,17,107],[13,196,18,2],[13,197,18,4],[13,209,18,16],[13,211,18,18,"require"],[13,218,18,25],[13,219,18,25,"_dependencyMap"],[13,233,18,25],[13,236,18,52],[13,237,18,53],[13,239,18,55],[13,240,18,57],[13,251,18,68],[13,253,18,70],[13,264,18,81],[13,266,18,83],[13,278,18,95],[13,280,18,97],[13,286,18,103],[13,287,18,105],[13,288,18,107],[13,290,19,2],[13,291,19,4],[13,295,19,8],[13,297,19,18,"require"],[13,304,19,25],[13,305,19,25,"_dependencyMap"],[13,319,19,25],[13,322,19,44],[13,323,19,45],[13,325,19,55],[13,326,19,57],[13,337,19,68],[13,339,19,70],[13,350,19,81],[13,352,19,83],[13,364,19,95],[13,366,19,97],[13,372,19,103],[13,373,19,105],[13,374,19,107],[13,376,20,2],[13,377,20,4],[13,383,20,10],[13,385,20,18,"require"],[13,392,20,25],[13,393,20,25,"_dependencyMap"],[13,407,20,25],[13,410,20,46],[13,411,20,47],[13,413,20,55],[13,414,20,57],[13,425,20,68],[13,427,20,70],[13,438,20,81],[13,440,20,83],[13,452,20,95],[13,453,20,97],[13,454,20,99],[13,456,21,2],[13,457,21,4],[13,468,21,15],[13,470,21,18,"require"],[13,477,21,25],[13,478,21,25,"_dependencyMap"],[13,492,21,25],[13,495,21,51],[13,496,21,52],[13,497,21,54],[13,499,22,2],[13,500,22,4],[13,509,22,13],[13,511,22,18,"require"],[13,518,22,25],[13,519,22,25,"_dependencyMap"],[13,533,22,25],[13,536,22,49],[13,537,22,50],[13,539,22,55],[13,540,22,57],[13,551,22,68],[13,553,22,70],[13,564,22,81],[13,566,22,83],[13,578,22,95],[13,579,22,97],[13,580,22,99],[13,582,23,2],[13,583,23,4],[13,593,23,14],[13,595,23,18,"require"],[13,602,23,25],[13,603,23,25,"_dependencyMap"],[13,617,23,25],[13,620,23,50],[13,621,23,51],[13,622,23,53],[13,624,24,2],[13,625,24,4],[13,637,24,16],[13,639,24,18,"require"],[13,646,24,25],[13,647,24,25,"_dependencyMap"],[13,661,24,25],[13,665,24,52],[13,666,24,53],[13,668,24,55],[13,669,24,57],[13,680,24,68],[13,682,24,70],[13,693,24,81],[13,695,24,83],[13,707,24,95],[13,708,24,97],[13,709,24,99],[13,711,25,2],[13,712,25,4],[13,723,25,15],[13,725,25,18,"require"],[13,732,25,25],[13,733,25,25,"_dependencyMap"],[13,747,25,25],[13,751,25,51],[13,752,25,52],[13,753,25,54],[13,754,26,1],[15,2,29,0],[16,0,30,0],[17,0,31,0],[18,2,32,0],[18,11,32,9,"ParserBlock"],[18,22,32,20,"ParserBlock"],[18,23,32,20],[18,25,32,23],[19,4,33,2],[20,0,34,0],[21,0,35,0],[22,0,36,0],[23,0,37,0],[24,4,38,2],[24,8,38,6],[24,9,38,7,"ruler"],[24,14,38,12],[24,17,38,15],[24,21,38,19,"Ruler"],[24,26,38,24],[24,27,38,25],[24,28,38,26],[25,4,40,2],[25,9,40,7],[25,13,40,11,"i"],[25,14,40,12],[25,17,40,15],[25,18,40,16],[25,20,40,18,"i"],[25,21,40,19],[25,24,40,22,"_rules"],[25,30,40,28],[25,31,40,29,"length"],[25,37,40,35],[25,39,40,37,"i"],[25,40,40,38],[25,42,40,40],[25,44,40,42],[26,6,41,4],[26,10,41,8],[26,11,41,9,"ruler"],[26,16,41,14],[26,17,41,15,"push"],[26,21,41,19],[26,22,41,20,"_rules"],[26,28,41,26],[26,29,41,27,"i"],[26,30,41,28],[26,31,41,29],[26,32,41,30],[26,33,41,31],[26,34,41,32],[26,36,41,34,"_rules"],[26,42,41,40],[26,43,41,41,"i"],[26,44,41,42],[26,45,41,43],[26,46,41,44],[26,47,41,45],[26,48,41,46],[26,50,41,48],[27,8,41,50,"alt"],[27,11,41,53],[27,13,41,55],[27,14,41,56,"_rules"],[27,20,41,62],[27,21,41,63,"i"],[27,22,41,64],[27,23,41,65],[27,24,41,66],[27,25,41,67],[27,26,41,68],[27,30,41,72],[27,32,41,74],[27,34,41,76,"slice"],[27,39,41,81],[27,40,41,82],[28,6,41,84],[28,7,41,85],[28,8,41,86],[29,4,42,2],[30,2,43,0],[32,2,46,0],[33,2,47,0],[34,2,48,0,"ParserBlock"],[34,13,48,11],[34,14,48,12,"prototype"],[34,23,48,21],[34,24,48,22,"tokenize"],[34,32,48,30],[34,35,48,33],[34,45,48,43,"state"],[34,50,48,48],[34,52,48,50,"startLine"],[34,61,48,59],[34,63,48,61,"endLine"],[34,70,48,68],[34,72,48,70],[35,4,49,2],[35,8,49,6,"ok"],[35,10,49,8],[36,6,49,10,"i"],[36,7,49,11],[37,6,50,6,"rules"],[37,11,50,11],[37,14,50,14],[37,18,50,18],[37,19,50,19,"ruler"],[37,24,50,24],[37,25,50,25,"getRules"],[37,33,50,33],[37,34,50,34],[37,36,50,36],[37,37,50,37],[38,6,51,6,"len"],[38,9,51,9],[38,12,51,12,"rules"],[38,17,51,17],[38,18,51,18,"length"],[38,24,51,24],[39,6,52,6,"line"],[39,10,52,10],[39,13,52,13,"startLine"],[39,22,52,22],[40,6,53,6,"hasEmptyLines"],[40,19,53,19],[40,22,53,22],[40,27,53,27],[41,6,54,6,"maxNesting"],[41,16,54,16],[41,19,54,19,"state"],[41,24,54,24],[41,25,54,25,"md"],[41,27,54,27],[41,28,54,28,"options"],[41,35,54,35],[41,36,54,36,"maxNesting"],[41,46,54,46],[42,4,56,2],[42,11,56,9,"line"],[42,15,56,13],[42,18,56,16,"endLine"],[42,25,56,23],[42,27,56,25],[43,6,57,4,"state"],[43,11,57,9],[43,12,57,10,"line"],[43,16,57,14],[43,19,57,17,"line"],[43,23,57,21],[43,26,57,24,"state"],[43,31,57,29],[43,32,57,30,"skipEmptyLines"],[43,46,57,44],[43,47,57,45,"line"],[43,51,57,49],[43,52,57,50],[44,6,58,4],[44,10,58,8,"line"],[44,14,58,12],[44,18,58,16,"endLine"],[44,25,58,23],[44,27,58,25],[45,8,58,27],[46,6,58,34],[48,6,60,4],[49,6,61,4],[50,6,62,4],[50,10,62,8,"state"],[50,15,62,13],[50,16,62,14,"sCount"],[50,22,62,20],[50,23,62,21,"line"],[50,27,62,25],[50,28,62,26],[50,31,62,29,"state"],[50,36,62,34],[50,37,62,35,"blkIndent"],[50,46,62,44],[50,48,62,46],[51,8,62,48],[52,6,62,55],[54,6,64,4],[55,6,65,4],[56,6,66,4],[56,10,66,8,"state"],[56,15,66,13],[56,16,66,14,"level"],[56,21,66,19],[56,25,66,23,"maxNesting"],[56,35,66,33],[56,37,66,35],[57,8,67,6,"state"],[57,13,67,11],[57,14,67,12,"line"],[57,18,67,16],[57,21,67,19,"endLine"],[57,28,67,26],[58,8,68,6],[59,6,69,4],[61,6,71,4],[62,6,72,4],[63,6,73,4],[64,6,74,4],[65,6,75,4],[66,6,76,4],[68,6,78,4],[68,11,78,9,"i"],[68,12,78,10],[68,15,78,13],[68,16,78,14],[68,18,78,16,"i"],[68,19,78,17],[68,22,78,20,"len"],[68,25,78,23],[68,27,78,25,"i"],[68,28,78,26],[68,30,78,28],[68,32,78,30],[69,8,79,6,"ok"],[69,10,79,8],[69,13,79,11,"rules"],[69,18,79,16],[69,19,79,17,"i"],[69,20,79,18],[69,21,79,19],[69,22,79,20,"state"],[69,27,79,25],[69,29,79,27,"line"],[69,33,79,31],[69,35,79,33,"endLine"],[69,42,79,40],[69,44,79,42],[69,49,79,47],[69,50,79,48],[70,8,80,6],[70,12,80,10,"ok"],[70,14,80,12],[70,16,80,14],[71,10,80,16],[72,8,80,23],[73,6,81,4],[75,6,83,4],[76,6,84,4],[77,6,85,4,"state"],[77,11,85,9],[77,12,85,10,"tight"],[77,17,85,15],[77,20,85,18],[77,21,85,19,"hasEmptyLines"],[77,34,85,32],[79,6,87,4],[80,6,88,4],[80,10,88,8,"state"],[80,15,88,13],[80,16,88,14,"isEmpty"],[80,23,88,21],[80,24,88,22,"state"],[80,29,88,27],[80,30,88,28,"line"],[80,34,88,32],[80,37,88,35],[80,38,88,36],[80,39,88,37],[80,41,88,39],[81,8,89,6,"hasEmptyLines"],[81,21,89,19],[81,24,89,22],[81,28,89,26],[82,6,90,4],[83,6,92,4,"line"],[83,10,92,8],[83,13,92,11,"state"],[83,18,92,16],[83,19,92,17,"line"],[83,23,92,21],[84,6,94,4],[84,10,94,8,"line"],[84,14,94,12],[84,17,94,15,"endLine"],[84,24,94,22],[84,28,94,26,"state"],[84,33,94,31],[84,34,94,32,"isEmpty"],[84,41,94,39],[84,42,94,40,"line"],[84,46,94,44],[84,47,94,45],[84,49,94,47],[85,8,95,6,"hasEmptyLines"],[85,21,95,19],[85,24,95,22],[85,28,95,26],[86,8,96,6,"line"],[86,12,96,10],[86,14,96,12],[87,8,97,6,"state"],[87,13,97,11],[87,14,97,12,"line"],[87,18,97,16],[87,21,97,19,"line"],[87,25,97,23],[88,6,98,4],[89,4,99,2],[90,2,100,0],[90,3,100,1],[92,2,103,0],[93,0,104,0],[94,0,105,0],[95,0,106,0],[96,0,107,0],[97,2,108,0,"ParserBlock"],[97,13,108,11],[97,14,108,12,"prototype"],[97,23,108,21],[97,24,108,22,"parse"],[97,29,108,27],[97,32,108,30],[97,42,108,40,"src"],[97,45,108,43],[97,47,108,45,"md"],[97,49,108,47],[97,51,108,49,"env"],[97,54,108,52],[97,56,108,54,"outTokens"],[97,65,108,63],[97,67,108,65],[98,4,109,2],[98,8,109,6,"state"],[98,13,109,11],[99,4,111,2],[99,8,111,6],[99,9,111,7,"src"],[99,12,111,10],[99,14,111,12],[100,6,111,14],[101,4,111,22],[102,4,113,2,"state"],[102,9,113,7],[102,12,113,10],[102,16,113,14],[102,20,113,18],[102,21,113,19,"State"],[102,26,113,24],[102,27,113,25,"src"],[102,30,113,28],[102,32,113,30,"md"],[102,34,113,32],[102,36,113,34,"env"],[102,39,113,37],[102,41,113,39,"outTokens"],[102,50,113,48],[102,51,113,49],[103,4,115,2],[103,8,115,6],[103,9,115,7,"tokenize"],[103,17,115,15],[103,18,115,16,"state"],[103,23,115,21],[103,25,115,23,"state"],[103,30,115,28],[103,31,115,29,"line"],[103,35,115,33],[103,37,115,35,"state"],[103,42,115,40],[103,43,115,41,"lineMax"],[103,50,115,48],[103,51,115,49],[104,2,116,0],[104,3,116,1],[105,2,119,0,"ParserBlock"],[105,13,119,11],[105,14,119,12,"prototype"],[105,23,119,21],[105,24,119,22,"State"],[105,29,119,27],[105,32,119,30,"require"],[105,39,119,37],[105,40,119,37,"_dependencyMap"],[105,54,119,37],[105,58,119,65],[105,59,119,66],[106,2,122,0,"module"],[106,8,122,6],[106,9,122,7,"exports"],[106,16,122,14],[106,19,122,17,"ParserBlock"],[106,30,122,28],[107,0,122,29],[107,3]],"functionMap":{"names":["<global>","ParserBlock","ParserBlock.prototype.tokenize","ParserBlock.prototype.parse"],"mappings":"AAA;AC+B;CDW;iCEK;CFoD;8BGQ;CHQ"},"hasCjsExports":true},"type":"js/module"}]}