{"dependencies":[{"name":"./common","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":43,"index":58}}],"key":"T3X1rGrsueEhPeOGTLhHRm6Tz+4=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"Extrapolation\", {\n    enumerable: true,\n    get: function () {\n      return Extrapolation;\n    }\n  });\n  Object.defineProperty(exports, \"interpolate\", {\n    enumerable: true,\n    get: function () {\n      return interpolate;\n    }\n  });\n  Object.defineProperty(exports, \"clamp\", {\n    enumerable: true,\n    get: function () {\n      return clamp;\n    }\n  });\n  var _common = require(_dependencyMap[0]);\n  /**\n   * Extrapolation type.\n   *\n   * @param IDENTITY - Returns the provided value as is.\n   * @param CLAMP - Clamps the value to the edge of the output range.\n   * @param EXTEND - Predicts the values beyond the output range.\n   */\n  var Extrapolation = /*#__PURE__*/function (Extrapolation) {\n    Extrapolation[\"IDENTITY\"] = \"identity\";\n    Extrapolation[\"CLAMP\"] = \"clamp\";\n    Extrapolation[\"EXTEND\"] = \"extend\";\n    return Extrapolation;\n  }({});\n  /** Represents the possible values for extrapolation as a string. */\n  /** Allows to specify extrapolation for left and right edge of the interpolation. */\n  /** Configuration options for extrapolation. */\n  var _worklet_4679268814955_init_data = {\n    code: \"function getVal_reactNativeReanimated_interpolationTs1(type,coef,val,leftEdgeOutput,rightEdgeOutput,x){const{Extrapolation}=this.__closure;switch(type){case Extrapolation.IDENTITY:return x;case Extrapolation.CLAMP:if(coef*val<coef*leftEdgeOutput){return leftEdgeOutput;}return rightEdgeOutput;case Extrapolation.EXTEND:default:return val;}}\"\n  };\n  var getVal = function getVal_reactNativeReanimated_interpolationTs1Factory(_ref) {\n    var _worklet_4679268814955_init_data = _ref._worklet_4679268814955_init_data,\n      Extrapolation = _ref.Extrapolation;\n    var getVal = function (type, coef, val, leftEdgeOutput, rightEdgeOutput, x) {\n      switch (type) {\n        case Extrapolation.IDENTITY:\n          return x;\n        case Extrapolation.CLAMP:\n          if (coef * val < coef * leftEdgeOutput) {\n            return leftEdgeOutput;\n          }\n          return rightEdgeOutput;\n        case Extrapolation.EXTEND:\n        default:\n          return val;\n      }\n    };\n    getVal.__closure = {\n      Extrapolation\n    };\n    getVal.__workletHash = 4679268814955;\n    getVal.__initData = _worklet_4679268814955_init_data;\n    return getVal;\n  }({\n    _worklet_4679268814955_init_data,\n    Extrapolation\n  });\n  var _worklet_16339866960971_init_data = {\n    code: \"function isExtrapolate_reactNativeReanimated_interpolationTs2(value){const{Extrapolation}=this.__closure;return value===Extrapolation.EXTEND||value===Extrapolation.CLAMP||value===Extrapolation.IDENTITY;}\"\n  };\n  var isExtrapolate = function isExtrapolate_reactNativeReanimated_interpolationTs2Factory(_ref2) {\n    var _worklet_16339866960971_init_data = _ref2._worklet_16339866960971_init_data,\n      Extrapolation = _ref2.Extrapolation;\n    var isExtrapolate = function (value) {\n      return /* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */value === Extrapolation.EXTEND || value === Extrapolation.CLAMP || value === Extrapolation.IDENTITY\n      /* eslint-enable @typescript-eslint/no-unsafe-enum-comparison */;\n    };\n    isExtrapolate.__closure = {\n      Extrapolation\n    };\n    isExtrapolate.__workletHash = 16339866960971;\n    isExtrapolate.__initData = _worklet_16339866960971_init_data;\n    return isExtrapolate;\n  }({\n    _worklet_16339866960971_init_data,\n    Extrapolation\n  }); // validates extrapolations type\n  // if type is correct, converts it to ExtrapolationConfig\n  var _worklet_10282335606444_init_data = {\n    code: \"function validateType_reactNativeReanimated_interpolationTs3(type){const{Extrapolation,isExtrapolate}=this.__closure;const extrapolationConfig={extrapolateLeft:Extrapolation.EXTEND,extrapolateRight:Extrapolation.EXTEND};if(!type){return extrapolationConfig;}if(typeof type==='string'){if(!isExtrapolate(type)){throw new ReanimatedError(\\\"Unsupported value for \\\\\\\"interpolate\\\\\\\" \\\\nSupported values: [\\\\\\\"extend\\\\\\\", \\\\\\\"clamp\\\\\\\", \\\\\\\"identity\\\\\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\\\n Valid example:\\\\n        interpolate(value, [inputRange], [outputRange], \\\\\\\"clamp\\\\\\\")\\\");}extrapolationConfig.extrapolateLeft=type;extrapolationConfig.extrapolateRight=type;return extrapolationConfig;}if(type.extrapolateLeft&&!isExtrapolate(type.extrapolateLeft)||type.extrapolateRight&&!isExtrapolate(type.extrapolateRight)){throw new ReanimatedError(\\\"Unsupported value for \\\\\\\"interpolate\\\\\\\" \\\\nSupported values: [\\\\\\\"extend\\\\\\\", \\\\\\\"clamp\\\\\\\", \\\\\\\"identity\\\\\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\\\n Valid example:\\\\n      interpolate(value, [inputRange], [outputRange], {\\\\n        extrapolateLeft: Extrapolation.CLAMP,\\\\n        extrapolateRight: Extrapolation.IDENTITY\\\\n      }})\\\");}Object.assign(extrapolationConfig,type);return extrapolationConfig;}\"\n  };\n  var validateType = function validateType_reactNativeReanimated_interpolationTs3Factory(_ref3) {\n    var _worklet_10282335606444_init_data = _ref3._worklet_10282335606444_init_data,\n      Extrapolation = _ref3.Extrapolation,\n      isExtrapolate = _ref3.isExtrapolate;\n    var validateType = function (type) {\n      // initialize extrapolationConfig with default extrapolation\n      var extrapolationConfig = {\n        extrapolateLeft: Extrapolation.EXTEND,\n        extrapolateRight: Extrapolation.EXTEND\n      };\n      if (!type) {\n        return extrapolationConfig;\n      }\n      if (typeof type === 'string') {\n        if (!isExtrapolate(type)) {\n          throw new _common.ReanimatedError(`Unsupported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n        interpolate(value, [inputRange], [outputRange], \"clamp\")`);\n        }\n        extrapolationConfig.extrapolateLeft = type;\n        extrapolationConfig.extrapolateRight = type;\n        return extrapolationConfig;\n      }\n\n      // otherwise type is extrapolation config object\n      if (type.extrapolateLeft && !isExtrapolate(type.extrapolateLeft) || type.extrapolateRight && !isExtrapolate(type.extrapolateRight)) {\n        throw new _common.ReanimatedError(`Unsupported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n      interpolate(value, [inputRange], [outputRange], {\n        extrapolateLeft: Extrapolation.CLAMP,\n        extrapolateRight: Extrapolation.IDENTITY\n      }})`);\n      }\n      Object.assign(extrapolationConfig, type);\n      return extrapolationConfig;\n    };\n    validateType.__closure = {\n      Extrapolation,\n      isExtrapolate\n    };\n    validateType.__workletHash = 10282335606444;\n    validateType.__initData = _worklet_10282335606444_init_data;\n    return validateType;\n  }({\n    _worklet_10282335606444_init_data,\n    Extrapolation,\n    isExtrapolate\n  });\n  var _worklet_7727686385963_init_data = {\n    code: \"function internalInterpolate_reactNativeReanimated_interpolationTs4(x,narrowedInput,extrapolationConfig){const{getVal}=this.__closure;const{leftEdgeInput:leftEdgeInput,rightEdgeInput:rightEdgeInput,leftEdgeOutput:leftEdgeOutput,rightEdgeOutput:rightEdgeOutput}=narrowedInput;if(rightEdgeInput-leftEdgeInput===0){return leftEdgeOutput;}const progress=(x-leftEdgeInput)/(rightEdgeInput-leftEdgeInput);const val=leftEdgeOutput+progress*(rightEdgeOutput-leftEdgeOutput);const coef=rightEdgeOutput>=leftEdgeOutput?1:-1;if(coef*val<coef*leftEdgeOutput){return getVal(extrapolationConfig.extrapolateLeft,coef,val,leftEdgeOutput,rightEdgeOutput,x);}else if(coef*val>coef*rightEdgeOutput){return getVal(extrapolationConfig.extrapolateRight,coef,val,leftEdgeOutput,rightEdgeOutput,x);}return val;}\"\n  };\n  var internalInterpolate = function internalInterpolate_reactNativeReanimated_interpolationTs4Factory(_ref4) {\n    var _worklet_7727686385963_init_data = _ref4._worklet_7727686385963_init_data,\n      getVal = _ref4.getVal;\n    var internalInterpolate = function (x, narrowedInput, extrapolationConfig) {\n      var leftEdgeInput = narrowedInput.leftEdgeInput,\n        rightEdgeInput = narrowedInput.rightEdgeInput,\n        leftEdgeOutput = narrowedInput.leftEdgeOutput,\n        rightEdgeOutput = narrowedInput.rightEdgeOutput;\n      if (rightEdgeInput - leftEdgeInput === 0) {\n        return leftEdgeOutput;\n      }\n      var progress = (x - leftEdgeInput) / (rightEdgeInput - leftEdgeInput);\n      var val = leftEdgeOutput + progress * (rightEdgeOutput - leftEdgeOutput);\n      var coef = rightEdgeOutput >= leftEdgeOutput ? 1 : -1;\n      if (coef * val < coef * leftEdgeOutput) {\n        return getVal(extrapolationConfig.extrapolateLeft, coef, val, leftEdgeOutput, rightEdgeOutput, x);\n      } else if (coef * val > coef * rightEdgeOutput) {\n        return getVal(extrapolationConfig.extrapolateRight, coef, val, leftEdgeOutput, rightEdgeOutput, x);\n      }\n      return val;\n    };\n    internalInterpolate.__closure = {\n      getVal\n    };\n    internalInterpolate.__workletHash = 7727686385963;\n    internalInterpolate.__initData = _worklet_7727686385963_init_data;\n    return internalInterpolate;\n  }({\n    _worklet_7727686385963_init_data,\n    getVal\n  });\n  /**\n   * Lets you map a value from one range to another using linear interpolation.\n   *\n   * @param value - A number from the `input` range that is going to be mapped to\n   *   the `output` range.\n   * @param inputRange - An array of numbers specifying the input range of the\n   *   interpolation.\n   * @param outputRange - An array of numbers specifying the output range of the\n   *   interpolation.\n   * @param extrapolate - Determines what happens when the `value` goes beyond the\n   *   `input` range. Defaults to `Extrapolation.EXTEND` -\n   *   {@link ExtrapolationType}.\n   * @returns A mapped value within the output range.\n   * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/interpolate\n   */\n  var _worklet_3100536766164_init_data = {\n    code: \"function interpolate_reactNativeReanimated_interpolationTs5(x,inputRange,outputRange,type){const{validateType,internalInterpolate}=this.__closure;if(inputRange.length<2||outputRange.length<2){throw new ReanimatedError('Interpolation input and output ranges should contain at least two values.');}const extrapolationConfig=validateType(type);const length=inputRange.length;const narrowedInput={leftEdgeInput:inputRange[0],rightEdgeInput:inputRange[1],leftEdgeOutput:outputRange[0],rightEdgeOutput:outputRange[1]};if(length>2){if(x>inputRange[length-1]){narrowedInput.leftEdgeInput=inputRange[length-2];narrowedInput.rightEdgeInput=inputRange[length-1];narrowedInput.leftEdgeOutput=outputRange[length-2];narrowedInput.rightEdgeOutput=outputRange[length-1];}else{for(let i=1;i<length;++i){if(x<=inputRange[i]){narrowedInput.leftEdgeInput=inputRange[i-1];narrowedInput.rightEdgeInput=inputRange[i];narrowedInput.leftEdgeOutput=outputRange[i-1];narrowedInput.rightEdgeOutput=outputRange[i];break;}}}}return internalInterpolate(x,narrowedInput,extrapolationConfig);}\"\n  };\n  var interpolate = function interpolate_reactNativeReanimated_interpolationTs5Factory(_ref5) {\n    var _worklet_3100536766164_init_data = _ref5._worklet_3100536766164_init_data,\n      validateType = _ref5.validateType,\n      internalInterpolate = _ref5.internalInterpolate;\n    var interpolate = function (x, inputRange, outputRange, type) {\n      if (inputRange.length < 2 || outputRange.length < 2) {\n        throw new _common.ReanimatedError('Interpolation input and output ranges should contain at least two values.');\n      }\n      var extrapolationConfig = validateType(type);\n      var length = inputRange.length;\n      var narrowedInput = {\n        leftEdgeInput: inputRange[0],\n        rightEdgeInput: inputRange[1],\n        leftEdgeOutput: outputRange[0],\n        rightEdgeOutput: outputRange[1]\n      };\n      if (length > 2) {\n        if (x > inputRange[length - 1]) {\n          narrowedInput.leftEdgeInput = inputRange[length - 2];\n          narrowedInput.rightEdgeInput = inputRange[length - 1];\n          narrowedInput.leftEdgeOutput = outputRange[length - 2];\n          narrowedInput.rightEdgeOutput = outputRange[length - 1];\n        } else {\n          for (var i = 1; i < length; ++i) {\n            if (x <= inputRange[i]) {\n              narrowedInput.leftEdgeInput = inputRange[i - 1];\n              narrowedInput.rightEdgeInput = inputRange[i];\n              narrowedInput.leftEdgeOutput = outputRange[i - 1];\n              narrowedInput.rightEdgeOutput = outputRange[i];\n              break;\n            }\n          }\n        }\n      }\n      return internalInterpolate(x, narrowedInput, extrapolationConfig);\n    };\n    interpolate.__closure = {\n      validateType,\n      internalInterpolate\n    };\n    interpolate.__workletHash = 3100536766164;\n    interpolate.__initData = _worklet_3100536766164_init_data;\n    return interpolate;\n  }({\n    _worklet_3100536766164_init_data,\n    validateType,\n    internalInterpolate\n  });\n  /**\n   * Lets you limit a value within a specified range.\n   *\n   * @param value - A number that will be returned as long as the provided value\n   *   is in range between `min` and `max`.\n   * @param min - A number which will be returned when provided `value` is lower\n   *   than `min`.\n   * @param max - A number which will be returned when provided `value` is higher\n   *   than `max`.\n   * @returns A number between min and max bounds.\n   * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/clamp/\n   */\n  var _worklet_12385095133997_init_data = {\n    code: \"function clamp_reactNativeReanimated_interpolationTs6(value,min,max){return Math.min(Math.max(value,min),max);}\"\n  };\n  var clamp = function clamp_reactNativeReanimated_interpolationTs6Factory(_ref6) {\n    var _worklet_12385095133997_init_data = _ref6._worklet_12385095133997_init_data;\n    var clamp = function (value, min, max) {\n      return Math.min(Math.max(value, min), max);\n    };\n    clamp.__closure = {};\n    clamp.__workletHash = 12385095133997;\n    clamp.__initData = _worklet_12385095133997_init_data;\n    return clamp;\n  }({\n    _worklet_12385095133997_init_data\n  });\n});","lineCount":269,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,12,0,"Object"],[7,8,12,0],[7,9,12,0,"defineProperty"],[7,23,12,0],[7,24,12,0,"exports"],[7,31,12,0],[8,4,12,0,"enumerable"],[8,14,12,0],[9,4,12,0,"get"],[9,7,12,0],[9,18,12,0,"get"],[9,19,12,0],[10,6,12,0],[10,13,12,0,"Extrapolation"],[10,26,12,0],[11,4,12,0],[12,2,12,0],[13,2,179,0,"Object"],[13,8,179,0],[13,9,179,0,"defineProperty"],[13,23,179,0],[13,24,179,0,"exports"],[13,31,179,0],[14,4,179,0,"enumerable"],[14,14,179,0],[15,4,179,0,"get"],[15,7,179,0],[15,18,179,0,"get"],[15,19,179,0],[16,6,179,0],[16,13,179,0,"interpolate"],[16,24,179,0],[17,4,179,0],[18,2,179,0],[19,2,234,0,"Object"],[19,8,234,0],[19,9,234,0,"defineProperty"],[19,23,234,0],[19,24,234,0,"exports"],[19,31,234,0],[20,4,234,0,"enumerable"],[20,14,234,0],[21,4,234,0,"get"],[21,7,234,0],[21,18,234,0,"get"],[21,19,234,0],[22,6,234,0],[22,13,234,0,"clamp"],[22,18,234,0],[23,4,234,0],[24,2,234,0],[25,2,3,0],[25,6,3,0,"_common"],[25,13,3,0],[25,16,3,0,"require"],[25,23,3,0],[25,24,3,0,"_dependencyMap"],[25,38,3,0],[26,2,5,0],[27,0,6,0],[28,0,7,0],[29,0,8,0],[30,0,9,0],[31,0,10,0],[32,0,11,0],[33,2,5,0],[33,6,12,12,"Extrapolation"],[33,19,12,25],[33,45,12,12,"Extrapolation"],[33,58,12,25],[34,4,12,12,"Extrapolation"],[34,17,12,25],[35,4,12,12,"Extrapolation"],[35,17,12,25],[36,4,12,12,"Extrapolation"],[36,17,12,25],[37,4,12,25],[37,11,12,12,"Extrapolation"],[37,24,12,25],[38,2,12,25],[39,2,18,0],[40,2,28,0],[41,2,39,0],[42,2,39,0],[42,6,39,0,"_worklet_4679268814955_init_data"],[42,38,39,0],[43,4,39,0,"code"],[43,8,39,0],[44,2,39,0],[45,2,39,0],[45,6,39,0,"getVal"],[45,12,39,0],[45,15,46,0],[45,24,46,0,"getVal_reactNativeReanimated_interpolationTs1Factory"],[45,77,46,0,"_ref"],[45,81,46,0],[46,4,46,0],[46,8,46,0,"_worklet_4679268814955_init_data"],[46,40,46,0],[46,43,46,0,"_ref"],[46,47,46,0],[46,48,46,0,"_worklet_4679268814955_init_data"],[46,80,46,0],[47,6,57,9,"Extrapolation"],[47,19,57,22],[47,22,57,22,"_ref"],[47,26,57,22],[47,27,57,9,"Extrapolation"],[47,40,57,22],[48,4,57,22],[48,8,57,22,"getVal"],[48,14,57,22],[48,26,57,22,"getVal"],[48,27,47,2,"type"],[48,31,47,21],[48,33,48,2,"coef"],[48,37,48,14],[48,39,49,2,"val"],[48,42,49,13],[48,44,50,2,"leftEdgeOutput"],[48,58,50,24],[48,60,51,2,"rightEdgeOutput"],[48,75,51,25],[48,77,52,2,"x"],[48,78,52,11],[48,80,53,10],[49,6,56,2],[49,14,56,10,"type"],[49,18,56,14],[50,8,57,4],[50,13,57,9,"Extrapolation"],[50,26,57,22],[50,27,57,23,"IDENTITY"],[50,35,57,31],[51,10,58,6],[51,17,58,13,"x"],[51,18,58,14],[52,8,59,4],[52,13,59,9,"Extrapolation"],[52,26,59,22],[52,27,59,23,"CLAMP"],[52,32,59,28],[53,10,60,6],[53,14,60,10,"coef"],[53,18,60,14],[53,21,60,17,"val"],[53,24,60,20],[53,27,60,23,"coef"],[53,31,60,27],[53,34,60,30,"leftEdgeOutput"],[53,48,60,44],[53,50,60,46],[54,12,61,8],[54,19,61,15,"leftEdgeOutput"],[54,33,61,29],[55,10,62,6],[56,10,63,6],[56,17,63,13,"rightEdgeOutput"],[56,32,63,28],[57,8,64,4],[57,13,64,9,"Extrapolation"],[57,26,64,22],[57,27,64,23,"EXTEND"],[57,33,64,29],[58,8,65,4],[59,10,66,6],[59,17,66,13,"val"],[59,20,66,16],[60,6,67,2],[61,4,68,0],[61,5,68,1],[62,4,68,1,"getVal"],[62,10,68,1],[62,11,68,1,"__closure"],[62,20,68,1],[63,6,57,9,"Extrapolation"],[64,4,57,22],[65,4,57,22,"getVal"],[65,10,57,22],[65,11,57,22,"__workletHash"],[65,24,57,22],[66,4,57,22,"getVal"],[66,10,57,22],[66,11,57,22,"__initData"],[66,21,57,22],[66,24,57,22,"_worklet_4679268814955_init_data"],[66,56,57,22],[67,4,57,22],[67,11,57,22,"getVal"],[67,17,57,22],[68,2,57,22],[68,3,46,0],[69,4,46,0,"_worklet_4679268814955_init_data"],[69,36,46,0],[70,4,57,9,"Extrapolation"],[71,2,57,22],[72,2,57,22],[72,6,57,22,"_worklet_16339866960971_init_data"],[72,39,57,22],[73,4,57,22,"code"],[73,8,57,22],[74,2,57,22],[75,2,57,22],[75,6,57,22,"isExtrapolate"],[75,19,57,22],[75,22,70,0],[75,31,70,0,"isExtrapolate_reactNativeReanimated_interpolationTs2Factory"],[75,91,70,0,"_ref2"],[75,96,70,0],[76,4,70,0],[76,8,70,0,"_worklet_16339866960971_init_data"],[76,41,70,0],[76,44,70,0,"_ref2"],[76,49,70,0],[76,50,70,0,"_worklet_16339866960971_init_data"],[76,83,70,0],[77,6,75,14,"Extrapolation"],[77,19,75,27],[77,22,75,27,"_ref2"],[77,27,75,27],[77,28,75,14,"Extrapolation"],[77,41,75,27],[78,4,75,27],[78,8,75,27,"isExtrapolate"],[78,21,75,27],[78,33,75,27,"isExtrapolate"],[78,34,70,23,"value"],[78,39,70,36],[78,41,70,62],[79,6,73,2],[79,13,74,4],[79,78,75,4,"value"],[79,83,75,9],[79,88,75,14,"Extrapolation"],[79,101,75,27],[79,102,75,28,"EXTEND"],[79,108,75,34],[79,112,76,4,"value"],[79,117,76,9],[79,122,76,14,"Extrapolation"],[79,135,76,27],[79,136,76,28,"CLAMP"],[79,141,76,33],[79,145,77,4,"value"],[79,150,77,9],[79,155,77,14,"Extrapolation"],[79,168,77,27],[79,169,77,28,"IDENTITY"],[80,6,78,4],[81,4,80,0],[81,5,80,1],[82,4,80,1,"isExtrapolate"],[82,17,80,1],[82,18,80,1,"__closure"],[82,27,80,1],[83,6,75,14,"Extrapolation"],[84,4,75,27],[85,4,75,27,"isExtrapolate"],[85,17,75,27],[85,18,75,27,"__workletHash"],[85,31,75,27],[86,4,75,27,"isExtrapolate"],[86,17,75,27],[86,18,75,27,"__initData"],[86,28,75,27],[86,31,75,27,"_worklet_16339866960971_init_data"],[86,64,75,27],[87,4,75,27],[87,11,75,27,"isExtrapolate"],[87,24,75,27],[88,2,75,27],[88,3,70,0],[89,4,70,0,"_worklet_16339866960971_init_data"],[89,37,70,0],[90,4,75,14,"Extrapolation"],[91,2,75,27],[91,6,82,0],[92,2,83,0],[93,2,83,0],[93,6,83,0,"_worklet_10282335606444_init_data"],[93,39,83,0],[94,4,83,0,"code"],[94,8,83,0],[95,2,83,0],[96,2,83,0],[96,6,83,0,"validateType"],[96,18,83,0],[96,21,84,0],[96,30,84,0,"validateType_reactNativeReanimated_interpolationTs3Factory"],[96,89,84,0,"_ref3"],[96,94,84,0],[97,4,84,0],[97,8,84,0,"_worklet_10282335606444_init_data"],[97,41,84,0],[97,44,84,0,"_ref3"],[97,49,84,0],[97,50,84,0,"_worklet_10282335606444_init_data"],[97,83,84,0],[98,6,88,21,"Extrapolation"],[98,19,88,34],[98,22,88,34,"_ref3"],[98,27,88,34],[98,28,88,21,"Extrapolation"],[98,41,88,34],[99,6,97,9,"isExtrapolate"],[99,19,97,22],[99,22,97,22,"_ref3"],[99,27,97,22],[99,28,97,9,"isExtrapolate"],[99,41,97,22],[100,4,97,22],[100,8,97,22,"validateType"],[100,20,97,22],[100,32,97,22,"validateType"],[100,33,84,22,"type"],[100,37,84,45],[100,39,84,76],[101,6,86,2],[102,6,87,2],[102,10,87,8,"extrapolationConfig"],[102,29,87,56],[102,32,87,59],[103,8,88,4,"extrapolateLeft"],[103,23,88,19],[103,25,88,21,"Extrapolation"],[103,38,88,34],[103,39,88,35,"EXTEND"],[103,45,88,41],[104,8,89,4,"extrapolateRight"],[104,24,89,20],[104,26,89,22,"Extrapolation"],[104,39,89,35],[104,40,89,36,"EXTEND"],[105,6,90,2],[105,7,90,3],[106,6,92,2],[106,10,92,6],[106,11,92,7,"type"],[106,15,92,11],[106,17,92,13],[107,8,93,4],[107,15,93,11,"extrapolationConfig"],[107,34,93,30],[108,6,94,2],[109,6,96,2],[109,10,96,6],[109,17,96,13,"type"],[109,21,96,17],[109,26,96,22],[109,34,96,30],[109,36,96,32],[110,8,97,4],[110,12,97,8],[110,13,97,9,"isExtrapolate"],[110,26,97,22],[110,27,97,23,"type"],[110,31,97,27],[110,32,97,28],[110,34,97,30],[111,10,98,6],[111,16,98,12],[111,20,98,16,"ReanimatedError"],[111,27,98,31],[111,28,98,31,"ReanimatedError"],[111,43,98,31],[111,44,99,8],[112,0,100,0],[112,65,101,6],[112,66,101,7],[113,8,102,4],[114,8,103,4,"extrapolationConfig"],[114,27,103,23],[114,28,103,24,"extrapolateLeft"],[114,43,103,39],[114,46,103,42,"type"],[114,50,103,46],[115,8,104,4,"extrapolationConfig"],[115,27,104,23],[115,28,104,24,"extrapolateRight"],[115,44,104,40],[115,47,104,43,"type"],[115,51,104,47],[116,8,105,4],[116,15,105,11,"extrapolationConfig"],[116,34,105,30],[117,6,106,2],[119,6,108,2],[120,6,109,2],[120,10,110,5,"type"],[120,14,110,9],[120,15,110,10,"extrapolateLeft"],[120,30,110,25],[120,34,110,29],[120,35,110,30,"isExtrapolate"],[120,48,110,43],[120,49,110,44,"type"],[120,53,110,48],[120,54,110,49,"extrapolateLeft"],[120,69,110,64],[120,70,110,65],[120,74,111,5,"type"],[120,78,111,9],[120,79,111,10,"extrapolateRight"],[120,95,111,26],[120,99,111,30],[120,100,111,31,"isExtrapolate"],[120,113,111,44],[120,114,111,45,"type"],[120,118,111,49],[120,119,111,50,"extrapolateRight"],[120,135,111,66],[120,136,111,68],[120,138,112,4],[121,8,113,4],[121,14,113,10],[121,18,113,14,"ReanimatedError"],[121,25,113,29],[121,26,113,29,"ReanimatedError"],[121,41,113,29],[121,42,114,6],[122,0,115,0],[123,0,116,0],[124,0,117,0],[125,0,118,0],[125,10,119,4],[125,11,119,5],[126,6,120,2],[127,6,122,2,"Object"],[127,12,122,8],[127,13,122,9,"assign"],[127,19,122,15],[127,20,122,16,"extrapolationConfig"],[127,39,122,35],[127,41,122,37,"type"],[127,45,122,41],[127,46,122,42],[128,6,123,2],[128,13,123,9,"extrapolationConfig"],[128,32,123,28],[129,4,124,0],[129,5,124,1],[130,4,124,1,"validateType"],[130,16,124,1],[130,17,124,1,"__closure"],[130,26,124,1],[131,6,88,21,"Extrapolation"],[131,19,88,34],[132,6,97,9,"isExtrapolate"],[133,4,97,22],[134,4,97,22,"validateType"],[134,16,97,22],[134,17,97,22,"__workletHash"],[134,30,97,22],[135,4,97,22,"validateType"],[135,16,97,22],[135,17,97,22,"__initData"],[135,27,97,22],[135,30,97,22,"_worklet_10282335606444_init_data"],[135,63,97,22],[136,4,97,22],[136,11,97,22,"validateType"],[136,23,97,22],[137,2,97,22],[137,3,84,0],[138,4,84,0,"_worklet_10282335606444_init_data"],[138,37,84,0],[139,4,88,21,"Extrapolation"],[139,17,88,34],[140,4,97,9,"isExtrapolate"],[141,2,97,22],[142,2,97,22],[142,6,97,22,"_worklet_7727686385963_init_data"],[142,38,97,22],[143,4,97,22,"code"],[143,8,97,22],[144,2,97,22],[145,2,97,22],[145,6,97,22,"internalInterpolate"],[145,25,97,22],[145,28,126,0],[145,37,126,0,"internalInterpolate_reactNativeReanimated_interpolationTs4Factory"],[145,103,126,0,"_ref4"],[145,108,126,0],[146,4,126,0],[146,8,126,0,"_worklet_7727686385963_init_data"],[146,40,126,0],[146,43,126,0,"_ref4"],[146,48,126,0],[146,49,126,0,"_worklet_7727686385963_init_data"],[146,81,126,0],[147,6,142,11,"getVal"],[147,12,142,17],[147,15,142,17,"_ref4"],[147,20,142,17],[147,21,142,11,"getVal"],[147,27,142,17],[148,4,142,17],[148,8,142,17,"internalInterpolate"],[148,27,142,17],[148,39,142,17,"internalInterpolate"],[148,40,127,2,"x"],[148,41,127,11],[148,43,128,2,"narrowedInput"],[148,56,128,43],[148,58,129,2,"extrapolationConfig"],[148,77,129,50],[148,79,130,2],[149,6,132,2],[149,10,132,10,"leftEdgeInput"],[149,23,132,23],[149,26,133,4,"narrowedInput"],[149,39,133,17],[149,40,132,10,"leftEdgeInput"],[149,53,132,23],[150,8,132,25,"rightEdgeInput"],[150,22,132,39],[150,25,133,4,"narrowedInput"],[150,38,133,17],[150,39,132,25,"rightEdgeInput"],[150,53,132,39],[151,8,132,41,"leftEdgeOutput"],[151,22,132,55],[151,25,133,4,"narrowedInput"],[151,38,133,17],[151,39,132,41,"leftEdgeOutput"],[151,53,132,55],[152,8,132,57,"rightEdgeOutput"],[152,23,132,72],[152,26,133,4,"narrowedInput"],[152,39,133,17],[152,40,132,57,"rightEdgeOutput"],[152,55,132,72],[153,6,134,2],[153,10,134,6,"rightEdgeInput"],[153,24,134,20],[153,27,134,23,"leftEdgeInput"],[153,40,134,36],[153,45,134,41],[153,46,134,42],[153,48,134,44],[154,8,135,4],[154,15,135,11,"leftEdgeOutput"],[154,29,135,25],[155,6,136,2],[156,6,137,2],[156,10,137,8,"progress"],[156,18,137,16],[156,21,137,19],[156,22,137,20,"x"],[156,23,137,21],[156,26,137,24,"leftEdgeInput"],[156,39,137,37],[156,44,137,42,"rightEdgeInput"],[156,58,137,56],[156,61,137,59,"leftEdgeInput"],[156,74,137,72],[156,75,137,73],[157,6,138,2],[157,10,138,8,"val"],[157,13,138,11],[157,16,138,14,"leftEdgeOutput"],[157,30,138,28],[157,33,138,31,"progress"],[157,41,138,39],[157,45,138,43,"rightEdgeOutput"],[157,60,138,58],[157,63,138,61,"leftEdgeOutput"],[157,77,138,75],[157,78,138,76],[158,6,139,2],[158,10,139,8,"coef"],[158,14,139,12],[158,17,139,15,"rightEdgeOutput"],[158,32,139,30],[158,36,139,34,"leftEdgeOutput"],[158,50,139,48],[158,53,139,51],[158,54,139,52],[158,59,139,57],[159,6,141,2],[159,10,141,6,"coef"],[159,14,141,10],[159,17,141,13,"val"],[159,20,141,16],[159,23,141,19,"coef"],[159,27,141,23],[159,30,141,26,"leftEdgeOutput"],[159,44,141,40],[159,46,141,42],[160,8,142,4],[160,15,142,11,"getVal"],[160,21,142,17],[160,22,143,6,"extrapolationConfig"],[160,41,143,25],[160,42,143,26,"extrapolateLeft"],[160,57,143,41],[160,59,144,6,"coef"],[160,63,144,10],[160,65,145,6,"val"],[160,68,145,9],[160,70,146,6,"leftEdgeOutput"],[160,84,146,20],[160,86,147,6,"rightEdgeOutput"],[160,101,147,21],[160,103,148,6,"x"],[160,104,149,4],[160,105,149,5],[161,6,150,2],[161,7,150,3],[161,13,150,9],[161,17,150,13,"coef"],[161,21,150,17],[161,24,150,20,"val"],[161,27,150,23],[161,30,150,26,"coef"],[161,34,150,30],[161,37,150,33,"rightEdgeOutput"],[161,52,150,48],[161,54,150,50],[162,8,151,4],[162,15,151,11,"getVal"],[162,21,151,17],[162,22,152,6,"extrapolationConfig"],[162,41,152,25],[162,42,152,26,"extrapolateRight"],[162,58,152,42],[162,60,153,6,"coef"],[162,64,153,10],[162,66,154,6,"val"],[162,69,154,9],[162,71,155,6,"leftEdgeOutput"],[162,85,155,20],[162,87,156,6,"rightEdgeOutput"],[162,102,156,21],[162,104,157,6,"x"],[162,105,158,4],[162,106,158,5],[163,6,159,2],[164,6,161,2],[164,13,161,9,"val"],[164,16,161,12],[165,4,162,0],[165,5,162,1],[166,4,162,1,"internalInterpolate"],[166,23,162,1],[166,24,162,1,"__closure"],[166,33,162,1],[167,6,142,11,"getVal"],[168,4,142,17],[169,4,142,17,"internalInterpolate"],[169,23,142,17],[169,24,142,17,"__workletHash"],[169,37,142,17],[170,4,142,17,"internalInterpolate"],[170,23,142,17],[170,24,142,17,"__initData"],[170,34,142,17],[170,37,142,17,"_worklet_7727686385963_init_data"],[170,69,142,17],[171,4,142,17],[171,11,142,17,"internalInterpolate"],[171,30,142,17],[172,2,142,17],[172,3,126,0],[173,4,126,0,"_worklet_7727686385963_init_data"],[173,36,126,0],[174,4,142,11,"getVal"],[175,2,142,17],[176,2,164,0],[177,0,165,0],[178,0,166,0],[179,0,167,0],[180,0,168,0],[181,0,169,0],[182,0,170,0],[183,0,171,0],[184,0,172,0],[185,0,173,0],[186,0,174,0],[187,0,175,0],[188,0,176,0],[189,0,177,0],[190,0,178,0],[191,2,164,0],[191,6,164,0,"_worklet_3100536766164_init_data"],[191,38,164,0],[192,4,164,0,"code"],[192,8,164,0],[193,2,164,0],[194,2,164,0],[194,6,164,0,"interpolate"],[194,17,164,0],[194,20,179,7],[194,29,179,7,"interpolate_reactNativeReanimated_interpolationTs5Factory"],[194,87,179,7,"_ref5"],[194,92,179,7],[195,4,179,7],[195,8,179,7,"_worklet_3100536766164_init_data"],[195,40,179,7],[195,43,179,7,"_ref5"],[195,48,179,7],[195,49,179,7,"_worklet_3100536766164_init_data"],[195,81,179,7],[196,6,192,30,"validateType"],[196,18,192,42],[196,21,192,42,"_ref5"],[196,26,192,42],[196,27,192,30,"validateType"],[196,39,192,42],[197,6,219,9,"internalInterpolate"],[197,25,219,28],[197,28,219,28,"_ref5"],[197,33,219,28],[197,34,219,9,"internalInterpolate"],[197,53,219,28],[198,4,219,28],[198,8,219,28,"interpolate"],[198,19,219,28],[198,31,219,28,"interpolate"],[198,32,180,2,"x"],[198,33,180,11],[198,35,181,2,"inputRange"],[198,45,181,31],[198,47,182,2,"outputRange"],[198,58,182,32],[198,60,183,2,"type"],[198,64,183,26],[198,66,184,10],[199,6,186,2],[199,10,186,6,"inputRange"],[199,20,186,16],[199,21,186,17,"length"],[199,27,186,23],[199,30,186,26],[199,31,186,27],[199,35,186,31,"outputRange"],[199,46,186,42],[199,47,186,43,"length"],[199,53,186,49],[199,56,186,52],[199,57,186,53],[199,59,186,55],[200,8,187,4],[200,14,187,10],[200,18,187,14,"ReanimatedError"],[200,25,187,29],[200,26,187,29,"ReanimatedError"],[200,41,187,29],[200,42,188,6],[200,117,189,4],[200,118,189,5],[201,6,190,2],[202,6,192,2],[202,10,192,8,"extrapolationConfig"],[202,29,192,27],[202,32,192,30,"validateType"],[202,44,192,42],[202,45,192,43,"type"],[202,49,192,47],[202,50,192,48],[203,6,193,2],[203,10,193,8,"length"],[203,16,193,14],[203,19,193,17,"inputRange"],[203,29,193,27],[203,30,193,28,"length"],[203,36,193,34],[204,6,194,2],[204,10,194,8,"narrowedInput"],[204,23,194,49],[204,26,194,52],[205,8,195,4,"leftEdgeInput"],[205,21,195,17],[205,23,195,19,"inputRange"],[205,33,195,29],[205,34,195,30],[205,35,195,31],[205,36,195,32],[206,8,196,4,"rightEdgeInput"],[206,22,196,18],[206,24,196,20,"inputRange"],[206,34,196,30],[206,35,196,31],[206,36,196,32],[206,37,196,33],[207,8,197,4,"leftEdgeOutput"],[207,22,197,18],[207,24,197,20,"outputRange"],[207,35,197,31],[207,36,197,32],[207,37,197,33],[207,38,197,34],[208,8,198,4,"rightEdgeOutput"],[208,23,198,19],[208,25,198,21,"outputRange"],[208,36,198,32],[208,37,198,33],[208,38,198,34],[209,6,199,2],[209,7,199,3],[210,6,200,2],[210,10,200,6,"length"],[210,16,200,12],[210,19,200,15],[210,20,200,16],[210,22,200,18],[211,8,201,4],[211,12,201,8,"x"],[211,13,201,9],[211,16,201,12,"inputRange"],[211,26,201,22],[211,27,201,23,"length"],[211,33,201,29],[211,36,201,32],[211,37,201,33],[211,38,201,34],[211,40,201,36],[212,10,202,6,"narrowedInput"],[212,23,202,19],[212,24,202,20,"leftEdgeInput"],[212,37,202,33],[212,40,202,36,"inputRange"],[212,50,202,46],[212,51,202,47,"length"],[212,57,202,53],[212,60,202,56],[212,61,202,57],[212,62,202,58],[213,10,203,6,"narrowedInput"],[213,23,203,19],[213,24,203,20,"rightEdgeInput"],[213,38,203,34],[213,41,203,37,"inputRange"],[213,51,203,47],[213,52,203,48,"length"],[213,58,203,54],[213,61,203,57],[213,62,203,58],[213,63,203,59],[214,10,204,6,"narrowedInput"],[214,23,204,19],[214,24,204,20,"leftEdgeOutput"],[214,38,204,34],[214,41,204,37,"outputRange"],[214,52,204,48],[214,53,204,49,"length"],[214,59,204,55],[214,62,204,58],[214,63,204,59],[214,64,204,60],[215,10,205,6,"narrowedInput"],[215,23,205,19],[215,24,205,20,"rightEdgeOutput"],[215,39,205,35],[215,42,205,38,"outputRange"],[215,53,205,49],[215,54,205,50,"length"],[215,60,205,56],[215,63,205,59],[215,64,205,60],[215,65,205,61],[216,8,206,4],[216,9,206,5],[216,15,206,11],[217,10,207,6],[217,15,207,11],[217,19,207,15,"i"],[217,20,207,16],[217,23,207,19],[217,24,207,20],[217,26,207,22,"i"],[217,27,207,23],[217,30,207,26,"length"],[217,36,207,32],[217,38,207,34],[217,40,207,36,"i"],[217,41,207,37],[217,43,207,39],[218,12,208,8],[218,16,208,12,"x"],[218,17,208,13],[218,21,208,17,"inputRange"],[218,31,208,27],[218,32,208,28,"i"],[218,33,208,29],[218,34,208,30],[218,36,208,32],[219,14,209,10,"narrowedInput"],[219,27,209,23],[219,28,209,24,"leftEdgeInput"],[219,41,209,37],[219,44,209,40,"inputRange"],[219,54,209,50],[219,55,209,51,"i"],[219,56,209,52],[219,59,209,55],[219,60,209,56],[219,61,209,57],[220,14,210,10,"narrowedInput"],[220,27,210,23],[220,28,210,24,"rightEdgeInput"],[220,42,210,38],[220,45,210,41,"inputRange"],[220,55,210,51],[220,56,210,52,"i"],[220,57,210,53],[220,58,210,54],[221,14,211,10,"narrowedInput"],[221,27,211,23],[221,28,211,24,"leftEdgeOutput"],[221,42,211,38],[221,45,211,41,"outputRange"],[221,56,211,52],[221,57,211,53,"i"],[221,58,211,54],[221,61,211,57],[221,62,211,58],[221,63,211,59],[222,14,212,10,"narrowedInput"],[222,27,212,23],[222,28,212,24,"rightEdgeOutput"],[222,43,212,39],[222,46,212,42,"outputRange"],[222,57,212,53],[222,58,212,54,"i"],[222,59,212,55],[222,60,212,56],[223,14,213,10],[224,12,214,8],[225,10,215,6],[226,8,216,4],[227,6,217,2],[228,6,219,2],[228,13,219,9,"internalInterpolate"],[228,32,219,28],[228,33,219,29,"x"],[228,34,219,30],[228,36,219,32,"narrowedInput"],[228,49,219,45],[228,51,219,47,"extrapolationConfig"],[228,70,219,66],[228,71,219,67],[229,4,220,0],[229,5,220,1],[230,4,220,1,"interpolate"],[230,15,220,1],[230,16,220,1,"__closure"],[230,25,220,1],[231,6,192,30,"validateType"],[231,18,192,42],[232,6,219,9,"internalInterpolate"],[233,4,219,28],[234,4,219,28,"interpolate"],[234,15,219,28],[234,16,219,28,"__workletHash"],[234,29,219,28],[235,4,219,28,"interpolate"],[235,15,219,28],[235,16,219,28,"__initData"],[235,26,219,28],[235,29,219,28,"_worklet_3100536766164_init_data"],[235,61,219,28],[236,4,219,28],[236,11,219,28,"interpolate"],[236,22,219,28],[237,2,219,28],[237,3,179,7],[238,4,179,7,"_worklet_3100536766164_init_data"],[238,36,179,7],[239,4,192,30,"validateType"],[239,16,192,42],[240,4,219,9,"internalInterpolate"],[241,2,219,28],[242,2,222,0],[243,0,223,0],[244,0,224,0],[245,0,225,0],[246,0,226,0],[247,0,227,0],[248,0,228,0],[249,0,229,0],[250,0,230,0],[251,0,231,0],[252,0,232,0],[253,0,233,0],[254,2,222,0],[254,6,222,0,"_worklet_12385095133997_init_data"],[254,39,222,0],[255,4,222,0,"code"],[255,8,222,0],[256,2,222,0],[257,2,222,0],[257,6,222,0,"clamp"],[257,11,222,0],[257,14,234,7],[257,23,234,7,"clamp_reactNativeReanimated_interpolationTs6Factory"],[257,75,234,7,"_ref6"],[257,80,234,7],[258,4,234,7],[258,8,234,7,"_worklet_12385095133997_init_data"],[258,41,234,7],[258,44,234,7,"_ref6"],[258,49,234,7],[258,50,234,7,"_worklet_12385095133997_init_data"],[258,83,234,7],[259,4,234,7],[259,8,234,7,"clamp"],[259,13,234,7],[259,25,234,7,"clamp"],[259,26,234,22,"value"],[259,31,234,35],[259,33,234,37,"min"],[259,36,234,48],[259,38,234,50,"max"],[259,41,234,61],[259,43,234,63],[260,6,236,2],[260,13,236,9,"Math"],[260,17,236,13],[260,18,236,14,"min"],[260,21,236,17],[260,22,236,18,"Math"],[260,26,236,22],[260,27,236,23,"max"],[260,30,236,26],[260,31,236,27,"value"],[260,36,236,32],[260,38,236,34,"min"],[260,41,236,37],[260,42,236,38],[260,44,236,40,"max"],[260,47,236,43],[260,48,236,44],[261,4,237,0],[261,5,237,1],[262,4,237,1,"clamp"],[262,9,237,1],[262,10,237,1,"__closure"],[262,19,237,1],[263,4,237,1,"clamp"],[263,9,237,1],[263,10,237,1,"__workletHash"],[263,23,237,1],[264,4,237,1,"clamp"],[264,9,237,1],[264,10,237,1,"__initData"],[264,20,237,1],[264,23,237,1,"_worklet_12385095133997_init_data"],[264,56,237,1],[265,4,237,1],[265,11,237,1,"clamp"],[265,16,237,1],[266,2,237,1],[266,3,234,7],[267,4,234,7,"_worklet_12385095133997_init_data"],[268,2,234,7],[269,0,234,7],[269,3]],"functionMap":{"names":["<global>","getVal","isExtrapolate","validateType","internalInterpolate","interpolate","clamp"],"mappings":"AAA;AC6C;CDsB;AEE;CFU;AGI;CHwC;AIE;CJoC;OKiB;CLyC;OMc;CNG"},"hasCjsExports":false},"type":"js/module"}]}