{"dependencies":[{"name":"../common/utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":21,"index":152},"end":{"line":8,"column":47,"index":178}}],"key":"s68H+Qrc8so5XeN472FI/1YNbEY=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // Replace link-like texts with link nodes.\n  //\n  // Currently restricted by `md.validateLink()` to http/https/ftp\n  //\n  'use strict';\n\n  var arrayReplaceAt = require(_dependencyMap[0]).arrayReplaceAt;\n  function isLinkOpen(str) {\n    return /^<a[>\\s]/i.test(str);\n  }\n  function isLinkClose(str) {\n    return /^<\\/a\\s*>/i.test(str);\n  }\n  module.exports = function linkify(state) {\n    var i,\n      j,\n      l,\n      tokens,\n      token,\n      currentToken,\n      nodes,\n      ln,\n      text,\n      pos,\n      lastPos,\n      level,\n      htmlLinkLevel,\n      url,\n      fullUrl,\n      urlText,\n      blockTokens = state.tokens,\n      links;\n    if (!state.md.options.linkify) {\n      return;\n    }\n    for (j = 0, l = blockTokens.length; j < l; j++) {\n      if (blockTokens[j].type !== 'inline' || !state.md.linkify.pretest(blockTokens[j].content)) {\n        continue;\n      }\n      tokens = blockTokens[j].children;\n      htmlLinkLevel = 0;\n\n      // We scan from the end, to keep position when new tags added.\n      // Use reversed logic in links start/end match\n      for (i = tokens.length - 1; i >= 0; i--) {\n        currentToken = tokens[i];\n\n        // Skip content of markdown links\n        if (currentToken.type === 'link_close') {\n          i--;\n          while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n            i--;\n          }\n          continue;\n        }\n\n        // Skip content of html tag links\n        if (currentToken.type === 'html_inline') {\n          if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n            htmlLinkLevel--;\n          }\n          if (isLinkClose(currentToken.content)) {\n            htmlLinkLevel++;\n          }\n        }\n        if (htmlLinkLevel > 0) {\n          continue;\n        }\n        if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n          text = currentToken.content;\n          links = state.md.linkify.match(text);\n\n          // Now split string to nodes\n          nodes = [];\n          level = currentToken.level;\n          lastPos = 0;\n          for (ln = 0; ln < links.length; ln++) {\n            url = links[ln].url;\n            fullUrl = state.md.normalizeLink(url);\n            if (!state.md.validateLink(fullUrl)) {\n              continue;\n            }\n            urlText = links[ln].text;\n\n            // Linkifier might send raw hostnames like \"example.com\", where url\n            // starts with domain name. So we prepend http:// in those cases,\n            // and remove it afterwards.\n            //\n            if (!links[ln].schema) {\n              urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n            } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n              urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n            } else {\n              urlText = state.md.normalizeLinkText(urlText);\n            }\n            pos = links[ln].index;\n            if (pos > lastPos) {\n              token = new state.Token('text', '', 0);\n              token.content = text.slice(lastPos, pos);\n              token.level = level;\n              nodes.push(token);\n            }\n            token = new state.Token('link_open', 'a', 1);\n            token.attrs = [['href', fullUrl]];\n            token.level = level++;\n            token.markup = 'linkify';\n            token.info = 'auto';\n            nodes.push(token);\n            token = new state.Token('text', '', 0);\n            token.content = urlText;\n            token.level = level;\n            nodes.push(token);\n            token = new state.Token('link_close', 'a', -1);\n            token.level = --level;\n            token.markup = 'linkify';\n            token.info = 'auto';\n            nodes.push(token);\n            lastPos = links[ln].lastIndex;\n          }\n          if (lastPos < text.length) {\n            token = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos);\n            token.level = level;\n            nodes.push(token);\n          }\n\n          // replace current node\n          blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n        }\n      }\n    }\n  };\n});","lineCount":134,"map":[[2,2,1,0],[3,2,2,0],[4,2,3,0],[5,2,4,0],[6,2,5,0],[6,14,5,12],[8,2,8,0],[8,6,8,4,"arrayReplaceAt"],[8,20,8,18],[8,23,8,21,"require"],[8,30,8,28],[8,31,8,28,"_dependencyMap"],[8,45,8,28],[8,48,8,46],[8,49,8,47],[8,50,8,48,"arrayReplaceAt"],[8,64,8,62],[9,2,11,0],[9,11,11,9,"isLinkOpen"],[9,21,11,19,"isLinkOpen"],[9,22,11,20,"str"],[9,25,11,23],[9,27,11,25],[10,4,12,2],[10,11,12,9],[10,22,12,20],[10,23,12,21,"test"],[10,27,12,25],[10,28,12,26,"str"],[10,31,12,29],[10,32,12,30],[11,2,13,0],[12,2,14,0],[12,11,14,9,"isLinkClose"],[12,22,14,20,"isLinkClose"],[12,23,14,21,"str"],[12,26,14,24],[12,28,14,26],[13,4,15,2],[13,11,15,9],[13,23,15,21],[13,24,15,22,"test"],[13,28,15,26],[13,29,15,27,"str"],[13,32,15,30],[13,33,15,31],[14,2,16,0],[15,2,19,0,"module"],[15,8,19,6],[15,9,19,7,"exports"],[15,16,19,14],[15,19,19,17],[15,28,19,26,"linkify"],[15,35,19,33,"linkify"],[15,36,19,34,"state"],[15,41,19,39],[15,43,19,41],[16,4,20,2],[16,8,20,6,"i"],[16,9,20,7],[17,6,20,9,"j"],[17,7,20,10],[18,6,20,12,"l"],[18,7,20,13],[19,6,20,15,"tokens"],[19,12,20,21],[20,6,20,23,"token"],[20,11,20,28],[21,6,20,30,"currentToken"],[21,18,20,42],[22,6,20,44,"nodes"],[22,11,20,49],[23,6,20,51,"ln"],[23,8,20,53],[24,6,20,55,"text"],[24,10,20,59],[25,6,20,61,"pos"],[25,9,20,64],[26,6,20,66,"lastPos"],[26,13,20,73],[27,6,21,6,"level"],[27,11,21,11],[28,6,21,13,"htmlLinkLevel"],[28,19,21,26],[29,6,21,28,"url"],[29,9,21,31],[30,6,21,33,"fullUrl"],[30,13,21,40],[31,6,21,42,"urlText"],[31,13,21,49],[32,6,22,6,"blockTokens"],[32,17,22,17],[32,20,22,20,"state"],[32,25,22,25],[32,26,22,26,"tokens"],[32,32,22,32],[33,6,23,6,"links"],[33,11,23,11],[34,4,25,2],[34,8,25,6],[34,9,25,7,"state"],[34,14,25,12],[34,15,25,13,"md"],[34,17,25,15],[34,18,25,16,"options"],[34,25,25,23],[34,26,25,24,"linkify"],[34,33,25,31],[34,35,25,33],[35,6,25,35],[36,4,25,43],[37,4,27,2],[37,9,27,7,"j"],[37,10,27,8],[37,13,27,11],[37,14,27,12],[37,16,27,14,"l"],[37,17,27,15],[37,20,27,18,"blockTokens"],[37,31,27,29],[37,32,27,30,"length"],[37,38,27,36],[37,40,27,38,"j"],[37,41,27,39],[37,44,27,42,"l"],[37,45,27,43],[37,47,27,45,"j"],[37,48,27,46],[37,50,27,48],[37,52,27,50],[38,6,28,4],[38,10,28,8,"blockTokens"],[38,21,28,19],[38,22,28,20,"j"],[38,23,28,21],[38,24,28,22],[38,25,28,23,"type"],[38,29,28,27],[38,34,28,32],[38,42,28,40],[38,46,29,8],[38,47,29,9,"state"],[38,52,29,14],[38,53,29,15,"md"],[38,55,29,17],[38,56,29,18,"linkify"],[38,63,29,25],[38,64,29,26,"pretest"],[38,71,29,33],[38,72,29,34,"blockTokens"],[38,83,29,45],[38,84,29,46,"j"],[38,85,29,47],[38,86,29,48],[38,87,29,49,"content"],[38,94,29,56],[38,95,29,57],[38,97,29,59],[39,8,30,6],[40,6,31,4],[41,6,33,4,"tokens"],[41,12,33,10],[41,15,33,13,"blockTokens"],[41,26,33,24],[41,27,33,25,"j"],[41,28,33,26],[41,29,33,27],[41,30,33,28,"children"],[41,38,33,36],[42,6,35,4,"htmlLinkLevel"],[42,19,35,17],[42,22,35,20],[42,23,35,21],[44,6,37,4],[45,6,38,4],[46,6,39,4],[46,11,39,9,"i"],[46,12,39,10],[46,15,39,13,"tokens"],[46,21,39,19],[46,22,39,20,"length"],[46,28,39,26],[46,31,39,29],[46,32,39,30],[46,34,39,32,"i"],[46,35,39,33],[46,39,39,37],[46,40,39,38],[46,42,39,40,"i"],[46,43,39,41],[46,45,39,43],[46,47,39,45],[47,8,40,6,"currentToken"],[47,20,40,18],[47,23,40,21,"tokens"],[47,29,40,27],[47,30,40,28,"i"],[47,31,40,29],[47,32,40,30],[49,8,42,6],[50,8,43,6],[50,12,43,10,"currentToken"],[50,24,43,22],[50,25,43,23,"type"],[50,29,43,27],[50,34,43,32],[50,46,43,44],[50,48,43,46],[51,10,44,8,"i"],[51,11,44,9],[51,13,44,11],[52,10,45,8],[52,17,45,15,"tokens"],[52,23,45,21],[52,24,45,22,"i"],[52,25,45,23],[52,26,45,24],[52,27,45,25,"level"],[52,32,45,30],[52,37,45,35,"currentToken"],[52,49,45,47],[52,50,45,48,"level"],[52,55,45,53],[52,59,45,57,"tokens"],[52,65,45,63],[52,66,45,64,"i"],[52,67,45,65],[52,68,45,66],[52,69,45,67,"type"],[52,73,45,71],[52,78,45,76],[52,89,45,87],[52,91,45,89],[53,12,46,10,"i"],[53,13,46,11],[53,15,46,13],[54,10,47,8],[55,10,48,8],[56,8,49,6],[58,8,51,6],[59,8,52,6],[59,12,52,10,"currentToken"],[59,24,52,22],[59,25,52,23,"type"],[59,29,52,27],[59,34,52,32],[59,47,52,45],[59,49,52,47],[60,10,53,8],[60,14,53,12,"isLinkOpen"],[60,24,53,22],[60,25,53,23,"currentToken"],[60,37,53,35],[60,38,53,36,"content"],[60,45,53,43],[60,46,53,44],[60,50,53,48,"htmlLinkLevel"],[60,63,53,61],[60,66,53,64],[60,67,53,65],[60,69,53,67],[61,12,54,10,"htmlLinkLevel"],[61,25,54,23],[61,27,54,25],[62,10,55,8],[63,10,56,8],[63,14,56,12,"isLinkClose"],[63,25,56,23],[63,26,56,24,"currentToken"],[63,38,56,36],[63,39,56,37,"content"],[63,46,56,44],[63,47,56,45],[63,49,56,47],[64,12,57,10,"htmlLinkLevel"],[64,25,57,23],[64,27,57,25],[65,10,58,8],[66,8,59,6],[67,8,60,6],[67,12,60,10,"htmlLinkLevel"],[67,25,60,23],[67,28,60,26],[67,29,60,27],[67,31,60,29],[68,10,60,31],[69,8,60,41],[70,8,62,6],[70,12,62,10,"currentToken"],[70,24,62,22],[70,25,62,23,"type"],[70,29,62,27],[70,34,62,32],[70,40,62,38],[70,44,62,42,"state"],[70,49,62,47],[70,50,62,48,"md"],[70,52,62,50],[70,53,62,51,"linkify"],[70,60,62,58],[70,61,62,59,"test"],[70,65,62,63],[70,66,62,64,"currentToken"],[70,78,62,76],[70,79,62,77,"content"],[70,86,62,84],[70,87,62,85],[70,89,62,87],[71,10,64,8,"text"],[71,14,64,12],[71,17,64,15,"currentToken"],[71,29,64,27],[71,30,64,28,"content"],[71,37,64,35],[72,10,65,8,"links"],[72,15,65,13],[72,18,65,16,"state"],[72,23,65,21],[72,24,65,22,"md"],[72,26,65,24],[72,27,65,25,"linkify"],[72,34,65,32],[72,35,65,33,"match"],[72,40,65,38],[72,41,65,39,"text"],[72,45,65,43],[72,46,65,44],[74,10,67,8],[75,10,68,8,"nodes"],[75,15,68,13],[75,18,68,16],[75,20,68,18],[76,10,69,8,"level"],[76,15,69,13],[76,18,69,16,"currentToken"],[76,30,69,28],[76,31,69,29,"level"],[76,36,69,34],[77,10,70,8,"lastPos"],[77,17,70,15],[77,20,70,18],[77,21,70,19],[78,10,72,8],[78,15,72,13,"ln"],[78,17,72,15],[78,20,72,18],[78,21,72,19],[78,23,72,21,"ln"],[78,25,72,23],[78,28,72,26,"links"],[78,33,72,31],[78,34,72,32,"length"],[78,40,72,38],[78,42,72,40,"ln"],[78,44,72,42],[78,46,72,44],[78,48,72,46],[79,12,74,10,"url"],[79,15,74,13],[79,18,74,16,"links"],[79,23,74,21],[79,24,74,22,"ln"],[79,26,74,24],[79,27,74,25],[79,28,74,26,"url"],[79,31,74,29],[80,12,75,10,"fullUrl"],[80,19,75,17],[80,22,75,20,"state"],[80,27,75,25],[80,28,75,26,"md"],[80,30,75,28],[80,31,75,29,"normalizeLink"],[80,44,75,42],[80,45,75,43,"url"],[80,48,75,46],[80,49,75,47],[81,12,76,10],[81,16,76,14],[81,17,76,15,"state"],[81,22,76,20],[81,23,76,21,"md"],[81,25,76,23],[81,26,76,24,"validateLink"],[81,38,76,36],[81,39,76,37,"fullUrl"],[81,46,76,44],[81,47,76,45],[81,49,76,47],[82,14,76,49],[83,12,76,59],[84,12,78,10,"urlText"],[84,19,78,17],[84,22,78,20,"links"],[84,27,78,25],[84,28,78,26,"ln"],[84,30,78,28],[84,31,78,29],[84,32,78,30,"text"],[84,36,78,34],[86,12,80,10],[87,12,81,10],[88,12,82,10],[89,12,83,10],[90,12,84,10],[90,16,84,14],[90,17,84,15,"links"],[90,22,84,20],[90,23,84,21,"ln"],[90,25,84,23],[90,26,84,24],[90,27,84,25,"schema"],[90,33,84,31],[90,35,84,33],[91,14,85,12,"urlText"],[91,21,85,19],[91,24,85,22,"state"],[91,29,85,27],[91,30,85,28,"md"],[91,32,85,30],[91,33,85,31,"normalizeLinkText"],[91,50,85,48],[91,51,85,49],[91,60,85,58],[91,63,85,61,"urlText"],[91,70,85,68],[91,71,85,69],[91,72,85,70,"replace"],[91,79,85,77],[91,80,85,78],[91,92,85,90],[91,94,85,92],[91,96,85,94],[91,97,85,95],[92,12,86,10],[92,13,86,11],[92,19,86,17],[92,23,86,21,"links"],[92,28,86,26],[92,29,86,27,"ln"],[92,31,86,29],[92,32,86,30],[92,33,86,31,"schema"],[92,39,86,37],[92,44,86,42],[92,53,86,51],[92,57,86,55],[92,58,86,56],[92,69,86,67],[92,70,86,68,"test"],[92,74,86,72],[92,75,86,73,"urlText"],[92,82,86,80],[92,83,86,81],[92,85,86,83],[93,14,87,12,"urlText"],[93,21,87,19],[93,24,87,22,"state"],[93,29,87,27],[93,30,87,28,"md"],[93,32,87,30],[93,33,87,31,"normalizeLinkText"],[93,50,87,48],[93,51,87,49],[93,60,87,58],[93,63,87,61,"urlText"],[93,70,87,68],[93,71,87,69],[93,72,87,70,"replace"],[93,79,87,77],[93,80,87,78],[93,90,87,88],[93,92,87,90],[93,94,87,92],[93,95,87,93],[94,12,88,10],[94,13,88,11],[94,19,88,17],[95,14,89,12,"urlText"],[95,21,89,19],[95,24,89,22,"state"],[95,29,89,27],[95,30,89,28,"md"],[95,32,89,30],[95,33,89,31,"normalizeLinkText"],[95,50,89,48],[95,51,89,49,"urlText"],[95,58,89,56],[95,59,89,57],[96,12,90,10],[97,12,92,10,"pos"],[97,15,92,13],[97,18,92,16,"links"],[97,23,92,21],[97,24,92,22,"ln"],[97,26,92,24],[97,27,92,25],[97,28,92,26,"index"],[97,33,92,31],[98,12,94,10],[98,16,94,14,"pos"],[98,19,94,17],[98,22,94,20,"lastPos"],[98,29,94,27],[98,31,94,29],[99,14,95,12,"token"],[99,19,95,17],[99,22,95,28],[99,26,95,32,"state"],[99,31,95,37],[99,32,95,38,"Token"],[99,37,95,43],[99,38,95,44],[99,44,95,50],[99,46,95,52],[99,48,95,54],[99,50,95,56],[99,51,95,57],[99,52,95,58],[100,14,96,12,"token"],[100,19,96,17],[100,20,96,18,"content"],[100,27,96,25],[100,30,96,28,"text"],[100,34,96,32],[100,35,96,33,"slice"],[100,40,96,38],[100,41,96,39,"lastPos"],[100,48,96,46],[100,50,96,48,"pos"],[100,53,96,51],[100,54,96,52],[101,14,97,12,"token"],[101,19,97,17],[101,20,97,18,"level"],[101,25,97,23],[101,28,97,28,"level"],[101,33,97,33],[102,14,98,12,"nodes"],[102,19,98,17],[102,20,98,18,"push"],[102,24,98,22],[102,25,98,23,"token"],[102,30,98,28],[102,31,98,29],[103,12,99,10],[104,12,101,10,"token"],[104,17,101,15],[104,20,101,26],[104,24,101,30,"state"],[104,29,101,35],[104,30,101,36,"Token"],[104,35,101,41],[104,36,101,42],[104,47,101,53],[104,49,101,55],[104,52,101,58],[104,54,101,60],[104,55,101,61],[104,56,101,62],[105,12,102,10,"token"],[105,17,102,15],[105,18,102,16,"attrs"],[105,23,102,21],[105,26,102,26],[105,27,102,28],[105,28,102,30],[105,34,102,36],[105,36,102,38,"fullUrl"],[105,43,102,45],[105,44,102,47],[105,45,102,49],[106,12,103,10,"token"],[106,17,103,15],[106,18,103,16,"level"],[106,23,103,21],[106,26,103,26,"level"],[106,31,103,31],[106,33,103,33],[107,12,104,10,"token"],[107,17,104,15],[107,18,104,16,"markup"],[107,24,104,22],[107,27,104,26],[107,36,104,35],[108,12,105,10,"token"],[108,17,105,15],[108,18,105,16,"info"],[108,22,105,20],[108,25,105,26],[108,31,105,32],[109,12,106,10,"nodes"],[109,17,106,15],[109,18,106,16,"push"],[109,22,106,20],[109,23,106,21,"token"],[109,28,106,26],[109,29,106,27],[110,12,108,10,"token"],[110,17,108,15],[110,20,108,26],[110,24,108,30,"state"],[110,29,108,35],[110,30,108,36,"Token"],[110,35,108,41],[110,36,108,42],[110,42,108,48],[110,44,108,50],[110,46,108,52],[110,48,108,54],[110,49,108,55],[110,50,108,56],[111,12,109,10,"token"],[111,17,109,15],[111,18,109,16,"content"],[111,25,109,23],[111,28,109,26,"urlText"],[111,35,109,33],[112,12,110,10,"token"],[112,17,110,15],[112,18,110,16,"level"],[112,23,110,21],[112,26,110,26,"level"],[112,31,110,31],[113,12,111,10,"nodes"],[113,17,111,15],[113,18,111,16,"push"],[113,22,111,20],[113,23,111,21,"token"],[113,28,111,26],[113,29,111,27],[114,12,113,10,"token"],[114,17,113,15],[114,20,113,26],[114,24,113,30,"state"],[114,29,113,35],[114,30,113,36,"Token"],[114,35,113,41],[114,36,113,42],[114,48,113,54],[114,50,113,56],[114,53,113,59],[114,57,113,63],[114,58,113,64],[115,12,114,10,"token"],[115,17,114,15],[115,18,114,16,"level"],[115,23,114,21],[115,26,114,26],[115,28,114,28,"level"],[115,33,114,33],[116,12,115,10,"token"],[116,17,115,15],[116,18,115,16,"markup"],[116,24,115,22],[116,27,115,26],[116,36,115,35],[117,12,116,10,"token"],[117,17,116,15],[117,18,116,16,"info"],[117,22,116,20],[117,25,116,26],[117,31,116,32],[118,12,117,10,"nodes"],[118,17,117,15],[118,18,117,16,"push"],[118,22,117,20],[118,23,117,21,"token"],[118,28,117,26],[118,29,117,27],[119,12,119,10,"lastPos"],[119,19,119,17],[119,22,119,20,"links"],[119,27,119,25],[119,28,119,26,"ln"],[119,30,119,28],[119,31,119,29],[119,32,119,30,"lastIndex"],[119,41,119,39],[120,10,120,8],[121,10,121,8],[121,14,121,12,"lastPos"],[121,21,121,19],[121,24,121,22,"text"],[121,28,121,26],[121,29,121,27,"length"],[121,35,121,33],[121,37,121,35],[122,12,122,10,"token"],[122,17,122,15],[122,20,122,26],[122,24,122,30,"state"],[122,29,122,35],[122,30,122,36,"Token"],[122,35,122,41],[122,36,122,42],[122,42,122,48],[122,44,122,50],[122,46,122,52],[122,48,122,54],[122,49,122,55],[122,50,122,56],[123,12,123,10,"token"],[123,17,123,15],[123,18,123,16,"content"],[123,25,123,23],[123,28,123,26,"text"],[123,32,123,30],[123,33,123,31,"slice"],[123,38,123,36],[123,39,123,37,"lastPos"],[123,46,123,44],[123,47,123,45],[124,12,124,10,"token"],[124,17,124,15],[124,18,124,16,"level"],[124,23,124,21],[124,26,124,26,"level"],[124,31,124,31],[125,12,125,10,"nodes"],[125,17,125,15],[125,18,125,16,"push"],[125,22,125,20],[125,23,125,21,"token"],[125,28,125,26],[125,29,125,27],[126,10,126,8],[128,10,128,8],[129,10,129,8,"blockTokens"],[129,21,129,19],[129,22,129,20,"j"],[129,23,129,21],[129,24,129,22],[129,25,129,23,"children"],[129,33,129,31],[129,36,129,34,"tokens"],[129,42,129,40],[129,45,129,43,"arrayReplaceAt"],[129,59,129,57],[129,60,129,58,"tokens"],[129,66,129,64],[129,68,129,66,"i"],[129,69,129,67],[129,71,129,69,"nodes"],[129,76,129,74],[129,77,129,75],[130,8,130,6],[131,6,131,4],[132,4,132,2],[133,2,133,0],[133,3,133,1],[134,0,133,2],[134,3]],"functionMap":{"names":["<global>","isLinkOpen","isLinkClose","linkify"],"mappings":"AAA;ACU;CDE;AEC;CFE;iBGG;CHkH"},"hasCjsExports":true},"type":"js/module"}]}