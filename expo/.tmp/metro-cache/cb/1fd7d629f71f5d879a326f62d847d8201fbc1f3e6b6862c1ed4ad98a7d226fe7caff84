{"dependencies":[{"name":"../common/utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":14,"index":46},"end":{"line":5,"column":40,"index":72}}],"key":"s68H+Qrc8so5XeN472FI/1YNbEY=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // Block quotes\n\n  'use strict';\n\n  var isSpace = require(_dependencyMap[0]).isSpace;\n  module.exports = function blockquote(state, startLine, endLine, silent) {\n    var adjustTab,\n      ch,\n      i,\n      initial,\n      l,\n      lastLineEmpty,\n      lines,\n      nextLine,\n      offset,\n      oldBMarks,\n      oldBSCount,\n      oldIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      spaceAfterMarker,\n      terminate,\n      terminatorRules,\n      token,\n      wasOutdented,\n      oldLineMax = state.lineMax,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) {\n      return false;\n    }\n\n    // check the block quote marker\n    if (state.src.charCodeAt(pos++) !== 0x3E /* > */) {\n      return false;\n    }\n\n    // we know that it's going to be a valid blockquote,\n    // so no point trying to find the end of it in silent mode\n    if (silent) {\n      return true;\n    }\n\n    // skip spaces after \">\" and re-calculate offset\n    initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]);\n\n    // skip one optional space after '>'\n    if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n      // ' >   test '\n      //     ^ -- position start of line here:\n      pos++;\n      initial++;\n      offset++;\n      adjustTab = false;\n      spaceAfterMarker = true;\n    } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n      spaceAfterMarker = true;\n      if ((state.bsCount[startLine] + offset) % 4 === 3) {\n        // '  >\\t  test '\n        //       ^ -- position start of line here (tab has width===1)\n        pos++;\n        initial++;\n        offset++;\n        adjustTab = false;\n      } else {\n        // ' >\\t  test '\n        //    ^ -- position start of line here + shift bsCount slightly\n        //         to make extra space appear\n        adjustTab = true;\n      }\n    } else {\n      spaceAfterMarker = false;\n    }\n    oldBMarks = [state.bMarks[startLine]];\n    state.bMarks[startLine] = pos;\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;\n        } else {\n          offset++;\n        }\n      } else {\n        break;\n      }\n      pos++;\n    }\n    oldBSCount = [state.bsCount[startLine]];\n    state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);\n    lastLineEmpty = pos >= max;\n    oldSCount = [state.sCount[startLine]];\n    state.sCount[startLine] = offset - initial;\n    oldTShift = [state.tShift[startLine]];\n    state.tShift[startLine] = pos - state.bMarks[startLine];\n    terminatorRules = state.md.block.ruler.getRules('blockquote');\n    oldParentType = state.parentType;\n    state.parentType = 'blockquote';\n    wasOutdented = false;\n\n    // Search the end of the block\n    //\n    // Block ends with either:\n    //  1. an empty line outside:\n    //     ```\n    //     > test\n    //\n    //     ```\n    //  2. an empty line inside:\n    //     ```\n    //     >\n    //     test\n    //     ```\n    //  3. another tag:\n    //     ```\n    //     > test\n    //      - - -\n    //     ```\n    for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n      // check if it's outdented, i.e. it's inside list item and indented\n      // less than said list item:\n      //\n      // ```\n      // 1. anything\n      //    > current blockquote\n      // 2. checking this line\n      // ```\n      if (state.sCount[nextLine] < state.blkIndent) wasOutdented = true;\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      if (pos >= max) {\n        // Case 1: line is not inside the blockquote, and this line is empty.\n        break;\n      }\n      if (state.src.charCodeAt(pos++) === 0x3E /* > */ && !wasOutdented) {\n        // This line is inside the blockquote.\n\n        // skip spaces after \">\" and re-calculate offset\n        initial = offset = state.sCount[nextLine] + pos - (state.bMarks[nextLine] + state.tShift[nextLine]);\n\n        // skip one optional space after '>'\n        if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n          // ' >   test '\n          //     ^ -- position start of line here:\n          pos++;\n          initial++;\n          offset++;\n          adjustTab = false;\n          spaceAfterMarker = true;\n        } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n          spaceAfterMarker = true;\n          if ((state.bsCount[nextLine] + offset) % 4 === 3) {\n            // '  >\\t  test '\n            //       ^ -- position start of line here (tab has width===1)\n            pos++;\n            initial++;\n            offset++;\n            adjustTab = false;\n          } else {\n            // ' >\\t  test '\n            //    ^ -- position start of line here + shift bsCount slightly\n            //         to make extra space appear\n            adjustTab = true;\n          }\n        } else {\n          spaceAfterMarker = false;\n        }\n        oldBMarks.push(state.bMarks[nextLine]);\n        state.bMarks[nextLine] = pos;\n        while (pos < max) {\n          ch = state.src.charCodeAt(pos);\n          if (isSpace(ch)) {\n            if (ch === 0x09) {\n              offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n            } else {\n              offset++;\n            }\n          } else {\n            break;\n          }\n          pos++;\n        }\n        lastLineEmpty = pos >= max;\n        oldBSCount.push(state.bsCount[nextLine]);\n        state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] = offset - initial;\n        oldTShift.push(state.tShift[nextLine]);\n        state.tShift[nextLine] = pos - state.bMarks[nextLine];\n        continue;\n      }\n\n      // Case 2: line is not inside the blockquote, and the last line was empty.\n      if (lastLineEmpty) {\n        break;\n      }\n\n      // Case 3: another tag found.\n      terminate = false;\n      for (i = 0, l = terminatorRules.length; i < l; i++) {\n        if (terminatorRules[i](state, nextLine, endLine, true)) {\n          terminate = true;\n          break;\n        }\n      }\n      if (terminate) {\n        // Quirk to enforce \"hard termination mode\" for paragraphs;\n        // normally if you call `tokenize(state, startLine, nextLine)`,\n        // paragraphs will look below nextLine for paragraph continuation,\n        // but if blockquote is terminated by another tag, they shouldn't\n        state.lineMax = nextLine;\n        if (state.blkIndent !== 0) {\n          // state.blkIndent was non-zero, we now set it to zero,\n          // so we need to re-calculate all offsets to appear as\n          // if indent wasn't changed\n          oldBMarks.push(state.bMarks[nextLine]);\n          oldBSCount.push(state.bsCount[nextLine]);\n          oldTShift.push(state.tShift[nextLine]);\n          oldSCount.push(state.sCount[nextLine]);\n          state.sCount[nextLine] -= state.blkIndent;\n        }\n        break;\n      }\n      oldBMarks.push(state.bMarks[nextLine]);\n      oldBSCount.push(state.bsCount[nextLine]);\n      oldTShift.push(state.tShift[nextLine]);\n      oldSCount.push(state.sCount[nextLine]);\n\n      // A negative indentation means that this is a paragraph continuation\n      //\n      state.sCount[nextLine] = -1;\n    }\n    oldIndent = state.blkIndent;\n    state.blkIndent = 0;\n    token = state.push('blockquote_open', 'blockquote', 1);\n    token.markup = '>';\n    token.map = lines = [startLine, 0];\n    state.md.block.tokenize(state, startLine, nextLine);\n    token = state.push('blockquote_close', 'blockquote', -1);\n    token.markup = '>';\n    state.lineMax = oldLineMax;\n    state.parentType = oldParentType;\n    lines[1] = state.line;\n\n    // Restore original tShift; this might not be necessary since the parser\n    // has already been here, but just to make sure we can do that.\n    for (i = 0; i < oldTShift.length; i++) {\n      state.bMarks[i + startLine] = oldBMarks[i];\n      state.tShift[i + startLine] = oldTShift[i];\n      state.sCount[i + startLine] = oldSCount[i];\n      state.bsCount[i + startLine] = oldBSCount[i];\n    }\n    state.blkIndent = oldIndent;\n    return true;\n  };\n});","lineCount":260,"map":[[2,2,1,0],[4,2,3,0],[4,14,3,12],[6,2,5,0],[6,6,5,4,"isSpace"],[6,13,5,11],[6,16,5,14,"require"],[6,23,5,21],[6,24,5,21,"_dependencyMap"],[6,38,5,21],[6,41,5,39],[6,42,5,40],[6,43,5,41,"isSpace"],[6,50,5,48],[7,2,8,0,"module"],[7,8,8,6],[7,9,8,7,"exports"],[7,16,8,14],[7,19,8,17],[7,28,8,26,"blockquote"],[7,38,8,36,"blockquote"],[7,39,8,37,"state"],[7,44,8,42],[7,46,8,44,"startLine"],[7,55,8,53],[7,57,8,55,"endLine"],[7,64,8,62],[7,66,8,64,"silent"],[7,72,8,70],[7,74,8,72],[8,4,9,2],[8,8,9,6,"adjustTab"],[8,17,9,15],[9,6,10,6,"ch"],[9,8,10,8],[10,6,11,6,"i"],[10,7,11,7],[11,6,12,6,"initial"],[11,13,12,13],[12,6,13,6,"l"],[12,7,13,7],[13,6,14,6,"lastLineEmpty"],[13,19,14,19],[14,6,15,6,"lines"],[14,11,15,11],[15,6,16,6,"nextLine"],[15,14,16,14],[16,6,17,6,"offset"],[16,12,17,12],[17,6,18,6,"oldBMarks"],[17,15,18,15],[18,6,19,6,"oldBSCount"],[18,16,19,16],[19,6,20,6,"oldIndent"],[19,15,20,15],[20,6,21,6,"oldParentType"],[20,19,21,19],[21,6,22,6,"oldSCount"],[21,15,22,15],[22,6,23,6,"oldTShift"],[22,15,23,15],[23,6,24,6,"spaceAfterMarker"],[23,22,24,22],[24,6,25,6,"terminate"],[24,15,25,15],[25,6,26,6,"terminatorRules"],[25,21,26,21],[26,6,27,6,"token"],[26,11,27,11],[27,6,28,6,"wasOutdented"],[27,18,28,18],[28,6,29,6,"oldLineMax"],[28,16,29,16],[28,19,29,19,"state"],[28,24,29,24],[28,25,29,25,"lineMax"],[28,32,29,32],[29,6,30,6,"pos"],[29,9,30,9],[29,12,30,12,"state"],[29,17,30,17],[29,18,30,18,"bMarks"],[29,24,30,24],[29,25,30,25,"startLine"],[29,34,30,34],[29,35,30,35],[29,38,30,38,"state"],[29,43,30,43],[29,44,30,44,"tShift"],[29,50,30,50],[29,51,30,51,"startLine"],[29,60,30,60],[29,61,30,61],[30,6,31,6,"max"],[30,9,31,9],[30,12,31,12,"state"],[30,17,31,17],[30,18,31,18,"eMarks"],[30,24,31,24],[30,25,31,25,"startLine"],[30,34,31,34],[30,35,31,35],[32,4,33,2],[33,4,34,2],[33,8,34,6,"state"],[33,13,34,11],[33,14,34,12,"sCount"],[33,20,34,18],[33,21,34,19,"startLine"],[33,30,34,28],[33,31,34,29],[33,34,34,32,"state"],[33,39,34,37],[33,40,34,38,"blkIndent"],[33,49,34,47],[33,53,34,51],[33,54,34,52],[33,56,34,54],[34,6,34,56],[34,13,34,63],[34,18,34,68],[35,4,34,70],[37,4,36,2],[38,4,37,2],[38,8,37,6,"state"],[38,13,37,11],[38,14,37,12,"src"],[38,17,37,15],[38,18,37,16,"charCodeAt"],[38,28,37,26],[38,29,37,27,"pos"],[38,32,37,30],[38,34,37,32],[38,35,37,33],[38,40,37,38],[38,44,37,42],[38,54,37,51],[39,6,37,53],[39,13,37,60],[39,18,37,65],[40,4,37,67],[42,4,39,2],[43,4,40,2],[44,4,41,2],[44,8,41,6,"silent"],[44,14,41,12],[44,16,41,14],[45,6,41,16],[45,13,41,23],[45,17,41,27],[46,4,41,29],[48,4,43,2],[49,4,44,2,"initial"],[49,11,44,9],[49,14,44,12,"offset"],[49,20,44,18],[49,23,44,21,"state"],[49,28,44,26],[49,29,44,27,"sCount"],[49,35,44,33],[49,36,44,34,"startLine"],[49,45,44,43],[49,46,44,44],[49,49,44,47,"pos"],[49,52,44,50],[49,56,44,54,"state"],[49,61,44,59],[49,62,44,60,"bMarks"],[49,68,44,66],[49,69,44,67,"startLine"],[49,78,44,76],[49,79,44,77],[49,82,44,80,"state"],[49,87,44,85],[49,88,44,86,"tShift"],[49,94,44,92],[49,95,44,93,"startLine"],[49,104,44,102],[49,105,44,103],[49,106,44,104],[51,4,46,2],[52,4,47,2],[52,8,47,6,"state"],[52,13,47,11],[52,14,47,12,"src"],[52,17,47,15],[52,18,47,16,"charCodeAt"],[52,28,47,26],[52,29,47,27,"pos"],[52,32,47,30],[52,33,47,31],[52,38,47,36],[52,42,47,40],[52,43,47,41],[52,56,47,54],[53,6,48,4],[54,6,49,4],[55,6,50,4,"pos"],[55,9,50,7],[55,11,50,9],[56,6,51,4,"initial"],[56,13,51,11],[56,15,51,13],[57,6,52,4,"offset"],[57,12,52,10],[57,14,52,12],[58,6,53,4,"adjustTab"],[58,15,53,13],[58,18,53,16],[58,23,53,21],[59,6,54,4,"spaceAfterMarker"],[59,22,54,20],[59,25,54,23],[59,29,54,27],[60,4,55,2],[60,5,55,3],[60,11,55,9],[60,15,55,13,"state"],[60,20,55,18],[60,21,55,19,"src"],[60,24,55,22],[60,25,55,23,"charCodeAt"],[60,35,55,33],[60,36,55,34,"pos"],[60,39,55,37],[60,40,55,38],[60,45,55,43],[60,49,55,47],[60,50,55,48],[60,61,55,59],[61,6,56,4,"spaceAfterMarker"],[61,22,56,20],[61,25,56,23],[61,29,56,27],[62,6,58,4],[62,10,58,8],[62,11,58,9,"state"],[62,16,58,14],[62,17,58,15,"bsCount"],[62,24,58,22],[62,25,58,23,"startLine"],[62,34,58,32],[62,35,58,33],[62,38,58,36,"offset"],[62,44,58,42],[62,48,58,46],[62,49,58,47],[62,54,58,52],[62,55,58,53],[62,57,58,55],[63,8,59,6],[64,8,60,6],[65,8,61,6,"pos"],[65,11,61,9],[65,13,61,11],[66,8,62,6,"initial"],[66,15,62,13],[66,17,62,15],[67,8,63,6,"offset"],[67,14,63,12],[67,16,63,14],[68,8,64,6,"adjustTab"],[68,17,64,15],[68,20,64,18],[68,25,64,23],[69,6,65,4],[69,7,65,5],[69,13,65,11],[70,8,66,6],[71,8,67,6],[72,8,68,6],[73,8,69,6,"adjustTab"],[73,17,69,15],[73,20,69,18],[73,24,69,22],[74,6,70,4],[75,4,71,2],[75,5,71,3],[75,11,71,9],[76,6,72,4,"spaceAfterMarker"],[76,22,72,20],[76,25,72,23],[76,30,72,28],[77,4,73,2],[78,4,75,2,"oldBMarks"],[78,13,75,11],[78,16,75,14],[78,17,75,16,"state"],[78,22,75,21],[78,23,75,22,"bMarks"],[78,29,75,28],[78,30,75,29,"startLine"],[78,39,75,38],[78,40,75,39],[78,41,75,41],[79,4,76,2,"state"],[79,9,76,7],[79,10,76,8,"bMarks"],[79,16,76,14],[79,17,76,15,"startLine"],[79,26,76,24],[79,27,76,25],[79,30,76,28,"pos"],[79,33,76,31],[80,4,78,2],[80,11,78,9,"pos"],[80,14,78,12],[80,17,78,15,"max"],[80,20,78,18],[80,22,78,20],[81,6,79,4,"ch"],[81,8,79,6],[81,11,79,9,"state"],[81,16,79,14],[81,17,79,15,"src"],[81,20,79,18],[81,21,79,19,"charCodeAt"],[81,31,79,29],[81,32,79,30,"pos"],[81,35,79,33],[81,36,79,34],[82,6,81,4],[82,10,81,8,"isSpace"],[82,17,81,15],[82,18,81,16,"ch"],[82,20,81,18],[82,21,81,19],[82,23,81,21],[83,8,82,6],[83,12,82,10,"ch"],[83,14,82,12],[83,19,82,17],[83,23,82,21],[83,25,82,23],[84,10,83,8,"offset"],[84,16,83,14],[84,20,83,18],[84,21,83,19],[84,24,83,22],[84,25,83,23,"offset"],[84,31,83,29],[84,34,83,32,"state"],[84,39,83,37],[84,40,83,38,"bsCount"],[84,47,83,45],[84,48,83,46,"startLine"],[84,57,83,55],[84,58,83,56],[84,62,83,60,"adjustTab"],[84,71,83,69],[84,74,83,72],[84,75,83,73],[84,78,83,76],[84,79,83,77],[84,80,83,78],[84,84,83,82],[84,85,83,83],[85,8,84,6],[85,9,84,7],[85,15,84,13],[86,10,85,8,"offset"],[86,16,85,14],[86,18,85,16],[87,8,86,6],[88,6,87,4],[88,7,87,5],[88,13,87,11],[89,8,88,6],[90,6,89,4],[91,6,91,4,"pos"],[91,9,91,7],[91,11,91,9],[92,4,92,2],[93,4,94,2,"oldBSCount"],[93,14,94,12],[93,17,94,15],[93,18,94,17,"state"],[93,23,94,22],[93,24,94,23,"bsCount"],[93,31,94,30],[93,32,94,31,"startLine"],[93,41,94,40],[93,42,94,41],[93,43,94,43],[94,4,95,2,"state"],[94,9,95,7],[94,10,95,8,"bsCount"],[94,17,95,15],[94,18,95,16,"startLine"],[94,27,95,25],[94,28,95,26],[94,31,95,29,"state"],[94,36,95,34],[94,37,95,35,"sCount"],[94,43,95,41],[94,44,95,42,"startLine"],[94,53,95,51],[94,54,95,52],[94,57,95,55],[94,58,95,56],[94,62,95,60,"spaceAfterMarker"],[94,78,95,76],[94,81,95,79],[94,82,95,80],[94,85,95,83],[94,86,95,84],[94,87,95,85],[95,4,97,2,"lastLineEmpty"],[95,17,97,15],[95,20,97,18,"pos"],[95,23,97,21],[95,27,97,25,"max"],[95,30,97,28],[96,4,99,2,"oldSCount"],[96,13,99,11],[96,16,99,14],[96,17,99,16,"state"],[96,22,99,21],[96,23,99,22,"sCount"],[96,29,99,28],[96,30,99,29,"startLine"],[96,39,99,38],[96,40,99,39],[96,41,99,41],[97,4,100,2,"state"],[97,9,100,7],[97,10,100,8,"sCount"],[97,16,100,14],[97,17,100,15,"startLine"],[97,26,100,24],[97,27,100,25],[97,30,100,28,"offset"],[97,36,100,34],[97,39,100,37,"initial"],[97,46,100,44],[98,4,102,2,"oldTShift"],[98,13,102,11],[98,16,102,14],[98,17,102,16,"state"],[98,22,102,21],[98,23,102,22,"tShift"],[98,29,102,28],[98,30,102,29,"startLine"],[98,39,102,38],[98,40,102,39],[98,41,102,41],[99,4,103,2,"state"],[99,9,103,7],[99,10,103,8,"tShift"],[99,16,103,14],[99,17,103,15,"startLine"],[99,26,103,24],[99,27,103,25],[99,30,103,28,"pos"],[99,33,103,31],[99,36,103,34,"state"],[99,41,103,39],[99,42,103,40,"bMarks"],[99,48,103,46],[99,49,103,47,"startLine"],[99,58,103,56],[99,59,103,57],[100,4,105,2,"terminatorRules"],[100,19,105,17],[100,22,105,20,"state"],[100,27,105,25],[100,28,105,26,"md"],[100,30,105,28],[100,31,105,29,"block"],[100,36,105,34],[100,37,105,35,"ruler"],[100,42,105,40],[100,43,105,41,"getRules"],[100,51,105,49],[100,52,105,50],[100,64,105,62],[100,65,105,63],[101,4,107,2,"oldParentType"],[101,17,107,15],[101,20,107,18,"state"],[101,25,107,23],[101,26,107,24,"parentType"],[101,36,107,34],[102,4,108,2,"state"],[102,9,108,7],[102,10,108,8,"parentType"],[102,20,108,18],[102,23,108,21],[102,35,108,33],[103,4,109,2,"wasOutdented"],[103,16,109,14],[103,19,109,17],[103,24,109,22],[105,4,111,2],[106,4,112,2],[107,4,113,2],[108,4,114,2],[109,4,115,2],[110,4,116,2],[111,4,117,2],[112,4,118,2],[113,4,119,2],[114,4,120,2],[115,4,121,2],[116,4,122,2],[117,4,123,2],[118,4,124,2],[119,4,125,2],[120,4,126,2],[121,4,127,2],[122,4,128,2],[123,4,129,2],[123,9,129,7,"nextLine"],[123,17,129,15],[123,20,129,18,"startLine"],[123,29,129,27],[123,32,129,30],[123,33,129,31],[123,35,129,33,"nextLine"],[123,43,129,41],[123,46,129,44,"endLine"],[123,53,129,51],[123,55,129,53,"nextLine"],[123,63,129,61],[123,65,129,63],[123,67,129,65],[124,6,130,4],[125,6,131,4],[126,6,132,4],[127,6,133,4],[128,6,134,4],[129,6,135,4],[130,6,136,4],[131,6,137,4],[132,6,138,4],[132,10,138,8,"state"],[132,15,138,13],[132,16,138,14,"sCount"],[132,22,138,20],[132,23,138,21,"nextLine"],[132,31,138,29],[132,32,138,30],[132,35,138,33,"state"],[132,40,138,38],[132,41,138,39,"blkIndent"],[132,50,138,48],[132,52,138,50,"wasOutdented"],[132,64,138,62],[132,67,138,65],[132,71,138,69],[133,6,140,4,"pos"],[133,9,140,7],[133,12,140,10,"state"],[133,17,140,15],[133,18,140,16,"bMarks"],[133,24,140,22],[133,25,140,23,"nextLine"],[133,33,140,31],[133,34,140,32],[133,37,140,35,"state"],[133,42,140,40],[133,43,140,41,"tShift"],[133,49,140,47],[133,50,140,48,"nextLine"],[133,58,140,56],[133,59,140,57],[134,6,141,4,"max"],[134,9,141,7],[134,12,141,10,"state"],[134,17,141,15],[134,18,141,16,"eMarks"],[134,24,141,22],[134,25,141,23,"nextLine"],[134,33,141,31],[134,34,141,32],[135,6,143,4],[135,10,143,8,"pos"],[135,13,143,11],[135,17,143,15,"max"],[135,20,143,18],[135,22,143,20],[136,8,144,6],[137,8,145,6],[138,6,146,4],[139,6,148,4],[139,10,148,8,"state"],[139,15,148,13],[139,16,148,14,"src"],[139,19,148,17],[139,20,148,18,"charCodeAt"],[139,30,148,28],[139,31,148,29,"pos"],[139,34,148,32],[139,36,148,34],[139,37,148,35],[139,42,148,40],[139,46,148,44],[139,58,148,55],[139,59,148,56,"wasOutdented"],[139,71,148,68],[139,73,148,70],[140,8,149,6],[142,8,151,6],[143,8,152,6,"initial"],[143,15,152,13],[143,18,152,16,"offset"],[143,24,152,22],[143,27,152,25,"state"],[143,32,152,30],[143,33,152,31,"sCount"],[143,39,152,37],[143,40,152,38,"nextLine"],[143,48,152,46],[143,49,152,47],[143,52,152,50,"pos"],[143,55,152,53],[143,59,152,57,"state"],[143,64,152,62],[143,65,152,63,"bMarks"],[143,71,152,69],[143,72,152,70,"nextLine"],[143,80,152,78],[143,81,152,79],[143,84,152,82,"state"],[143,89,152,87],[143,90,152,88,"tShift"],[143,96,152,94],[143,97,152,95,"nextLine"],[143,105,152,103],[143,106,152,104],[143,107,152,105],[145,8,154,6],[146,8,155,6],[146,12,155,10,"state"],[146,17,155,15],[146,18,155,16,"src"],[146,21,155,19],[146,22,155,20,"charCodeAt"],[146,32,155,30],[146,33,155,31,"pos"],[146,36,155,34],[146,37,155,35],[146,42,155,40],[146,46,155,44],[146,47,155,45],[146,60,155,58],[147,10,156,8],[148,10,157,8],[149,10,158,8,"pos"],[149,13,158,11],[149,15,158,13],[150,10,159,8,"initial"],[150,17,159,15],[150,19,159,17],[151,10,160,8,"offset"],[151,16,160,14],[151,18,160,16],[152,10,161,8,"adjustTab"],[152,19,161,17],[152,22,161,20],[152,27,161,25],[153,10,162,8,"spaceAfterMarker"],[153,26,162,24],[153,29,162,27],[153,33,162,31],[154,8,163,6],[154,9,163,7],[154,15,163,13],[154,19,163,17,"state"],[154,24,163,22],[154,25,163,23,"src"],[154,28,163,26],[154,29,163,27,"charCodeAt"],[154,39,163,37],[154,40,163,38,"pos"],[154,43,163,41],[154,44,163,42],[154,49,163,47],[154,53,163,51],[154,54,163,52],[154,65,163,63],[155,10,164,8,"spaceAfterMarker"],[155,26,164,24],[155,29,164,27],[155,33,164,31],[156,10,166,8],[156,14,166,12],[156,15,166,13,"state"],[156,20,166,18],[156,21,166,19,"bsCount"],[156,28,166,26],[156,29,166,27,"nextLine"],[156,37,166,35],[156,38,166,36],[156,41,166,39,"offset"],[156,47,166,45],[156,51,166,49],[156,52,166,50],[156,57,166,55],[156,58,166,56],[156,60,166,58],[157,12,167,10],[158,12,168,10],[159,12,169,10,"pos"],[159,15,169,13],[159,17,169,15],[160,12,170,10,"initial"],[160,19,170,17],[160,21,170,19],[161,12,171,10,"offset"],[161,18,171,16],[161,20,171,18],[162,12,172,10,"adjustTab"],[162,21,172,19],[162,24,172,22],[162,29,172,27],[163,10,173,8],[163,11,173,9],[163,17,173,15],[164,12,174,10],[165,12,175,10],[166,12,176,10],[167,12,177,10,"adjustTab"],[167,21,177,19],[167,24,177,22],[167,28,177,26],[168,10,178,8],[169,8,179,6],[169,9,179,7],[169,15,179,13],[170,10,180,8,"spaceAfterMarker"],[170,26,180,24],[170,29,180,27],[170,34,180,32],[171,8,181,6],[172,8,183,6,"oldBMarks"],[172,17,183,15],[172,18,183,16,"push"],[172,22,183,20],[172,23,183,21,"state"],[172,28,183,26],[172,29,183,27,"bMarks"],[172,35,183,33],[172,36,183,34,"nextLine"],[172,44,183,42],[172,45,183,43],[172,46,183,44],[173,8,184,6,"state"],[173,13,184,11],[173,14,184,12,"bMarks"],[173,20,184,18],[173,21,184,19,"nextLine"],[173,29,184,27],[173,30,184,28],[173,33,184,31,"pos"],[173,36,184,34],[174,8,186,6],[174,15,186,13,"pos"],[174,18,186,16],[174,21,186,19,"max"],[174,24,186,22],[174,26,186,24],[175,10,187,8,"ch"],[175,12,187,10],[175,15,187,13,"state"],[175,20,187,18],[175,21,187,19,"src"],[175,24,187,22],[175,25,187,23,"charCodeAt"],[175,35,187,33],[175,36,187,34,"pos"],[175,39,187,37],[175,40,187,38],[176,10,189,8],[176,14,189,12,"isSpace"],[176,21,189,19],[176,22,189,20,"ch"],[176,24,189,22],[176,25,189,23],[176,27,189,25],[177,12,190,10],[177,16,190,14,"ch"],[177,18,190,16],[177,23,190,21],[177,27,190,25],[177,29,190,27],[178,14,191,12,"offset"],[178,20,191,18],[178,24,191,22],[178,25,191,23],[178,28,191,26],[178,29,191,27,"offset"],[178,35,191,33],[178,38,191,36,"state"],[178,43,191,41],[178,44,191,42,"bsCount"],[178,51,191,49],[178,52,191,50,"nextLine"],[178,60,191,58],[178,61,191,59],[178,65,191,63,"adjustTab"],[178,74,191,72],[178,77,191,75],[178,78,191,76],[178,81,191,79],[178,82,191,80],[178,83,191,81],[178,87,191,85],[178,88,191,86],[179,12,192,10],[179,13,192,11],[179,19,192,17],[180,14,193,12,"offset"],[180,20,193,18],[180,22,193,20],[181,12,194,10],[182,10,195,8],[182,11,195,9],[182,17,195,15],[183,12,196,10],[184,10,197,8],[185,10,199,8,"pos"],[185,13,199,11],[185,15,199,13],[186,8,200,6],[187,8,202,6,"lastLineEmpty"],[187,21,202,19],[187,24,202,22,"pos"],[187,27,202,25],[187,31,202,29,"max"],[187,34,202,32],[188,8,204,6,"oldBSCount"],[188,18,204,16],[188,19,204,17,"push"],[188,23,204,21],[188,24,204,22,"state"],[188,29,204,27],[188,30,204,28,"bsCount"],[188,37,204,35],[188,38,204,36,"nextLine"],[188,46,204,44],[188,47,204,45],[188,48,204,46],[189,8,205,6,"state"],[189,13,205,11],[189,14,205,12,"bsCount"],[189,21,205,19],[189,22,205,20,"nextLine"],[189,30,205,28],[189,31,205,29],[189,34,205,32,"state"],[189,39,205,37],[189,40,205,38,"sCount"],[189,46,205,44],[189,47,205,45,"nextLine"],[189,55,205,53],[189,56,205,54],[189,59,205,57],[189,60,205,58],[189,64,205,62,"spaceAfterMarker"],[189,80,205,78],[189,83,205,81],[189,84,205,82],[189,87,205,85],[189,88,205,86],[189,89,205,87],[190,8,207,6,"oldSCount"],[190,17,207,15],[190,18,207,16,"push"],[190,22,207,20],[190,23,207,21,"state"],[190,28,207,26],[190,29,207,27,"sCount"],[190,35,207,33],[190,36,207,34,"nextLine"],[190,44,207,42],[190,45,207,43],[190,46,207,44],[191,8,208,6,"state"],[191,13,208,11],[191,14,208,12,"sCount"],[191,20,208,18],[191,21,208,19,"nextLine"],[191,29,208,27],[191,30,208,28],[191,33,208,31,"offset"],[191,39,208,37],[191,42,208,40,"initial"],[191,49,208,47],[192,8,210,6,"oldTShift"],[192,17,210,15],[192,18,210,16,"push"],[192,22,210,20],[192,23,210,21,"state"],[192,28,210,26],[192,29,210,27,"tShift"],[192,35,210,33],[192,36,210,34,"nextLine"],[192,44,210,42],[192,45,210,43],[192,46,210,44],[193,8,211,6,"state"],[193,13,211,11],[193,14,211,12,"tShift"],[193,20,211,18],[193,21,211,19,"nextLine"],[193,29,211,27],[193,30,211,28],[193,33,211,31,"pos"],[193,36,211,34],[193,39,211,37,"state"],[193,44,211,42],[193,45,211,43,"bMarks"],[193,51,211,49],[193,52,211,50,"nextLine"],[193,60,211,58],[193,61,211,59],[194,8,212,6],[195,6,213,4],[197,6,215,4],[198,6,216,4],[198,10,216,8,"lastLineEmpty"],[198,23,216,21],[198,25,216,23],[199,8,216,25],[200,6,216,32],[202,6,218,4],[203,6,219,4,"terminate"],[203,15,219,13],[203,18,219,16],[203,23,219,21],[204,6,220,4],[204,11,220,9,"i"],[204,12,220,10],[204,15,220,13],[204,16,220,14],[204,18,220,16,"l"],[204,19,220,17],[204,22,220,20,"terminatorRules"],[204,37,220,35],[204,38,220,36,"length"],[204,44,220,42],[204,46,220,44,"i"],[204,47,220,45],[204,50,220,48,"l"],[204,51,220,49],[204,53,220,51,"i"],[204,54,220,52],[204,56,220,54],[204,58,220,56],[205,8,221,6],[205,12,221,10,"terminatorRules"],[205,27,221,25],[205,28,221,26,"i"],[205,29,221,27],[205,30,221,28],[205,31,221,29,"state"],[205,36,221,34],[205,38,221,36,"nextLine"],[205,46,221,44],[205,48,221,46,"endLine"],[205,55,221,53],[205,57,221,55],[205,61,221,59],[205,62,221,60],[205,64,221,62],[206,10,222,8,"terminate"],[206,19,222,17],[206,22,222,20],[206,26,222,24],[207,10,223,8],[208,8,224,6],[209,6,225,4],[210,6,227,4],[210,10,227,8,"terminate"],[210,19,227,17],[210,21,227,19],[211,8,228,6],[212,8,229,6],[213,8,230,6],[214,8,231,6],[215,8,232,6,"state"],[215,13,232,11],[215,14,232,12,"lineMax"],[215,21,232,19],[215,24,232,22,"nextLine"],[215,32,232,30],[216,8,234,6],[216,12,234,10,"state"],[216,17,234,15],[216,18,234,16,"blkIndent"],[216,27,234,25],[216,32,234,30],[216,33,234,31],[216,35,234,33],[217,10,235,8],[218,10,236,8],[219,10,237,8],[220,10,238,8,"oldBMarks"],[220,19,238,17],[220,20,238,18,"push"],[220,24,238,22],[220,25,238,23,"state"],[220,30,238,28],[220,31,238,29,"bMarks"],[220,37,238,35],[220,38,238,36,"nextLine"],[220,46,238,44],[220,47,238,45],[220,48,238,46],[221,10,239,8,"oldBSCount"],[221,20,239,18],[221,21,239,19,"push"],[221,25,239,23],[221,26,239,24,"state"],[221,31,239,29],[221,32,239,30,"bsCount"],[221,39,239,37],[221,40,239,38,"nextLine"],[221,48,239,46],[221,49,239,47],[221,50,239,48],[222,10,240,8,"oldTShift"],[222,19,240,17],[222,20,240,18,"push"],[222,24,240,22],[222,25,240,23,"state"],[222,30,240,28],[222,31,240,29,"tShift"],[222,37,240,35],[222,38,240,36,"nextLine"],[222,46,240,44],[222,47,240,45],[222,48,240,46],[223,10,241,8,"oldSCount"],[223,19,241,17],[223,20,241,18,"push"],[223,24,241,22],[223,25,241,23,"state"],[223,30,241,28],[223,31,241,29,"sCount"],[223,37,241,35],[223,38,241,36,"nextLine"],[223,46,241,44],[223,47,241,45],[223,48,241,46],[224,10,242,8,"state"],[224,15,242,13],[224,16,242,14,"sCount"],[224,22,242,20],[224,23,242,21,"nextLine"],[224,31,242,29],[224,32,242,30],[224,36,242,34,"state"],[224,41,242,39],[224,42,242,40,"blkIndent"],[224,51,242,49],[225,8,243,6],[226,8,245,6],[227,6,246,4],[228,6,248,4,"oldBMarks"],[228,15,248,13],[228,16,248,14,"push"],[228,20,248,18],[228,21,248,19,"state"],[228,26,248,24],[228,27,248,25,"bMarks"],[228,33,248,31],[228,34,248,32,"nextLine"],[228,42,248,40],[228,43,248,41],[228,44,248,42],[229,6,249,4,"oldBSCount"],[229,16,249,14],[229,17,249,15,"push"],[229,21,249,19],[229,22,249,20,"state"],[229,27,249,25],[229,28,249,26,"bsCount"],[229,35,249,33],[229,36,249,34,"nextLine"],[229,44,249,42],[229,45,249,43],[229,46,249,44],[230,6,250,4,"oldTShift"],[230,15,250,13],[230,16,250,14,"push"],[230,20,250,18],[230,21,250,19,"state"],[230,26,250,24],[230,27,250,25,"tShift"],[230,33,250,31],[230,34,250,32,"nextLine"],[230,42,250,40],[230,43,250,41],[230,44,250,42],[231,6,251,4,"oldSCount"],[231,15,251,13],[231,16,251,14,"push"],[231,20,251,18],[231,21,251,19,"state"],[231,26,251,24],[231,27,251,25,"sCount"],[231,33,251,31],[231,34,251,32,"nextLine"],[231,42,251,40],[231,43,251,41],[231,44,251,42],[233,6,253,4],[234,6,254,4],[235,6,255,4,"state"],[235,11,255,9],[235,12,255,10,"sCount"],[235,18,255,16],[235,19,255,17,"nextLine"],[235,27,255,25],[235,28,255,26],[235,33,255,31],[236,4,256,2],[237,4,258,2,"oldIndent"],[237,13,258,11],[237,16,258,14,"state"],[237,21,258,19],[237,22,258,20,"blkIndent"],[237,31,258,29],[238,4,259,2,"state"],[238,9,259,7],[238,10,259,8,"blkIndent"],[238,19,259,17],[238,22,259,20],[238,23,259,21],[239,4,261,2,"token"],[239,9,261,7],[239,12,261,17,"state"],[239,17,261,22],[239,18,261,23,"push"],[239,22,261,27],[239,23,261,28],[239,40,261,45],[239,42,261,47],[239,54,261,59],[239,56,261,61],[239,57,261,62],[239,58,261,63],[240,4,262,2,"token"],[240,9,262,7],[240,10,262,8,"markup"],[240,16,262,14],[240,19,262,17],[240,22,262,20],[241,4,263,2,"token"],[241,9,263,7],[241,10,263,8,"map"],[241,13,263,11],[241,16,263,17,"lines"],[241,21,263,22],[241,24,263,25],[241,25,263,27,"startLine"],[241,34,263,36],[241,36,263,38],[241,37,263,39],[241,38,263,41],[242,4,265,2,"state"],[242,9,265,7],[242,10,265,8,"md"],[242,12,265,10],[242,13,265,11,"block"],[242,18,265,16],[242,19,265,17,"tokenize"],[242,27,265,25],[242,28,265,26,"state"],[242,33,265,31],[242,35,265,33,"startLine"],[242,44,265,42],[242,46,265,44,"nextLine"],[242,54,265,52],[242,55,265,53],[243,4,267,2,"token"],[243,9,267,7],[243,12,267,17,"state"],[243,17,267,22],[243,18,267,23,"push"],[243,22,267,27],[243,23,267,28],[243,41,267,46],[243,43,267,48],[243,55,267,60],[243,59,267,64],[243,60,267,65],[244,4,268,2,"token"],[244,9,268,7],[244,10,268,8,"markup"],[244,16,268,14],[244,19,268,17],[244,22,268,20],[245,4,270,2,"state"],[245,9,270,7],[245,10,270,8,"lineMax"],[245,17,270,15],[245,20,270,18,"oldLineMax"],[245,30,270,28],[246,4,271,2,"state"],[246,9,271,7],[246,10,271,8,"parentType"],[246,20,271,18],[246,23,271,21,"oldParentType"],[246,36,271,34],[247,4,272,2,"lines"],[247,9,272,7],[247,10,272,8],[247,11,272,9],[247,12,272,10],[247,15,272,13,"state"],[247,20,272,18],[247,21,272,19,"line"],[247,25,272,23],[249,4,274,2],[250,4,275,2],[251,4,276,2],[251,9,276,7,"i"],[251,10,276,8],[251,13,276,11],[251,14,276,12],[251,16,276,14,"i"],[251,17,276,15],[251,20,276,18,"oldTShift"],[251,29,276,27],[251,30,276,28,"length"],[251,36,276,34],[251,38,276,36,"i"],[251,39,276,37],[251,41,276,39],[251,43,276,41],[252,6,277,4,"state"],[252,11,277,9],[252,12,277,10,"bMarks"],[252,18,277,16],[252,19,277,17,"i"],[252,20,277,18],[252,23,277,21,"startLine"],[252,32,277,30],[252,33,277,31],[252,36,277,34,"oldBMarks"],[252,45,277,43],[252,46,277,44,"i"],[252,47,277,45],[252,48,277,46],[253,6,278,4,"state"],[253,11,278,9],[253,12,278,10,"tShift"],[253,18,278,16],[253,19,278,17,"i"],[253,20,278,18],[253,23,278,21,"startLine"],[253,32,278,30],[253,33,278,31],[253,36,278,34,"oldTShift"],[253,45,278,43],[253,46,278,44,"i"],[253,47,278,45],[253,48,278,46],[254,6,279,4,"state"],[254,11,279,9],[254,12,279,10,"sCount"],[254,18,279,16],[254,19,279,17,"i"],[254,20,279,18],[254,23,279,21,"startLine"],[254,32,279,30],[254,33,279,31],[254,36,279,34,"oldSCount"],[254,45,279,43],[254,46,279,44,"i"],[254,47,279,45],[254,48,279,46],[255,6,280,4,"state"],[255,11,280,9],[255,12,280,10,"bsCount"],[255,19,280,17],[255,20,280,18,"i"],[255,21,280,19],[255,24,280,22,"startLine"],[255,33,280,31],[255,34,280,32],[255,37,280,35,"oldBSCount"],[255,47,280,45],[255,48,280,46,"i"],[255,49,280,47],[255,50,280,48],[256,4,281,2],[257,4,282,2,"state"],[257,9,282,7],[257,10,282,8,"blkIndent"],[257,19,282,17],[257,22,282,20,"oldIndent"],[257,31,282,29],[258,4,284,2],[258,11,284,9],[258,15,284,13],[259,2,285,0],[259,3,285,1],[260,0,285,2],[260,3]],"functionMap":{"names":["<global>","blockquote"],"mappings":"AAA;iBCO;CDqR"},"hasCjsExports":true},"type":"js/module"}]}