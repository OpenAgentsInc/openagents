{"dependencies":[{"name":"../../handlersRegistry","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":60},"end":{"line":2,"column":57,"index":117}}],"key":"Q8MtNj8/mrt1iN8Kay94o881ERE=","exportNames":["*"],"imports":1}},{"name":"../../../RNGestureHandlerModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":118},"end":{"line":3,"column":69,"index":187}}],"key":"2BYIjnTRSFId8SRJ7sJFxLD1BD4=","exportNames":["*"],"imports":1}},{"name":"../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":188},"end":{"line":4,"column":68,"index":256}}],"key":"ByXat9lt9duIJLDmSeH0V+tRq1s=","exportNames":["*"],"imports":1}},{"name":"../../../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":314},"end":{"line":6,"column":61,"index":375}}],"key":"6QYiO8x9sAoDBctSRJ19A8sqUNk=","exportNames":["*"],"imports":1}},{"name":"./utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":424},"end":{"line":12,"column":17,"index":530}}],"key":"fIqjJ6Rx8c7Khc/wm9kX7hQXC5I=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.updateHandlers = updateHandlers;\n  var _handlersRegistry = require(_dependencyMap[0]);\n  var _RNGestureHandlerModule = require(_dependencyMap[1]);\n  var RNGestureHandlerModule = _interopDefault(_RNGestureHandlerModule);\n  var _utils = require(_dependencyMap[2]);\n  var _ghQueueMicrotask = require(_dependencyMap[3]);\n  var _utils2 = require(_dependencyMap[4]);\n  function updateHandlers(preparedGesture, gestureConfig, newGestures) {\n    gestureConfig.prepare();\n    for (var i = 0; i < newGestures.length; i++) {\n      var handler = preparedGesture.attachedGestures[i];\n      (0, _utils2.checkGestureCallbacksForWorklets)(handler);\n\n      // Only update handlerTag when it's actually different, it may be the same\n      // if gesture config object is wrapped with useMemo\n      if (newGestures[i].handlerTag !== handler.handlerTag) {\n        newGestures[i].handlerTag = handler.handlerTag;\n        newGestures[i].handlers.handlerTag = handler.handlerTag;\n      }\n    }\n\n    // Store attached gestures to avoid crash when gestures changed after queueing micro task\n    var attachedGestures = preparedGesture.attachedGestures;\n\n    // Use queueMicrotask to extract handlerTags, because when it's ran, all refs should be updated\n    // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n    // in case of external relations)\n    (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n      if (!preparedGesture.isMounted) {\n        return;\n      }\n\n      // Stop if attached gestures changed after queueing micro task\n      if (attachedGestures !== preparedGesture.attachedGestures) {\n        return;\n      }\n\n      // If amount of gesture configs changes, we need to update the callbacks in shared value\n      var shouldUpdateSharedValueIfUsed = attachedGestures.length !== newGestures.length;\n      for (var _i = 0; _i < newGestures.length; _i++) {\n        var _handler = attachedGestures[_i];\n\n        // If the gestureId is different (gesture isn't wrapped with useMemo or its dependencies changed),\n        // we need to update the shared value, assuming the gesture runs on UI thread or the thread changed\n        if (_handler.handlers.gestureId !== newGestures[_i].handlers.gestureId && (newGestures[_i].shouldUseReanimated || _handler.shouldUseReanimated)) {\n          shouldUpdateSharedValueIfUsed = true;\n        }\n        _handler.config = newGestures[_i].config;\n        _handler.handlers = newGestures[_i].handlers;\n        RNGestureHandlerModule.default.updateGestureHandler(_handler.handlerTag, (0, _utils.filterConfig)(_handler.config, _utils2.ALLOWED_PROPS, (0, _utils2.extractGestureRelations)(_handler)));\n        (0, _handlersRegistry.registerHandler)(_handler.handlerTag, _handler, _handler.config.testId);\n      }\n      if (preparedGesture.animatedHandlers && shouldUpdateSharedValueIfUsed) {\n        var newHandlersValue = attachedGestures.filter(g => g.shouldUseReanimated) // Ignore gestures that shouldn't run on UI\n        .map(g => g.handlers);\n        preparedGesture.animatedHandlers.value = newHandlersValue;\n      }\n      (0, _utils.scheduleFlushOperations)();\n    });\n  }\n});","lineCount":72,"map":[[12,2,14,0,"exports"],[12,9,14,0],[12,10,14,0,"updateHandlers"],[12,24,14,0],[12,27,14,0,"updateHandlers"],[12,41,14,0],[13,2,2,0],[13,6,2,0,"_handlersRegistry"],[13,23,2,0],[13,26,2,0,"require"],[13,33,2,0],[13,34,2,0,"_dependencyMap"],[13,48,2,0],[14,2,3,0],[14,6,3,0,"_RNGestureHandlerModule"],[14,29,3,0],[14,32,3,0,"require"],[14,39,3,0],[14,40,3,0,"_dependencyMap"],[14,54,3,0],[15,2,3,0],[15,6,3,0,"RNGestureHandlerModule"],[15,28,3,0],[15,31,3,0,"_interopDefault"],[15,46,3,0],[15,47,3,0,"_RNGestureHandlerModule"],[15,70,3,0],[16,2,4,0],[16,6,4,0,"_utils"],[16,12,4,0],[16,15,4,0,"require"],[16,22,4,0],[16,23,4,0,"_dependencyMap"],[16,37,4,0],[17,2,6,0],[17,6,6,0,"_ghQueueMicrotask"],[17,23,6,0],[17,26,6,0,"require"],[17,33,6,0],[17,34,6,0,"_dependencyMap"],[17,48,6,0],[18,2,8,0],[18,6,8,0,"_utils2"],[18,13,8,0],[18,16,8,0,"require"],[18,23,8,0],[18,24,8,0,"_dependencyMap"],[18,38,8,0],[19,2,14,7],[19,11,14,16,"updateHandlers"],[19,25,14,30,"updateHandlers"],[19,26,15,2,"preparedGesture"],[19,41,15,39],[19,43,16,2,"gestureConfig"],[19,56,16,46],[19,58,17,2,"newGestures"],[19,69,17,28],[19,71,18,2],[20,4,19,2,"gestureConfig"],[20,17,19,15],[20,18,19,16,"prepare"],[20,25,19,23],[20,26,19,24],[20,27,19,25],[21,4,21,2],[21,9,21,7],[21,13,21,11,"i"],[21,14,21,12],[21,17,21,15],[21,18,21,16],[21,20,21,18,"i"],[21,21,21,19],[21,24,21,22,"newGestures"],[21,35,21,33],[21,36,21,34,"length"],[21,42,21,40],[21,44,21,42,"i"],[21,45,21,43],[21,47,21,45],[21,49,21,47],[22,6,22,4],[22,10,22,10,"handler"],[22,17,22,17],[22,20,22,20,"preparedGesture"],[22,35,22,35],[22,36,22,36,"attachedGestures"],[22,52,22,52],[22,53,22,53,"i"],[22,54,22,54],[22,55,22,55],[23,6,23,4],[23,10,23,4,"checkGestureCallbacksForWorklets"],[23,17,23,36],[23,18,23,36,"checkGestureCallbacksForWorklets"],[23,50,23,36],[23,52,23,37,"handler"],[23,59,23,44],[23,60,23,45],[25,6,25,4],[26,6,26,4],[27,6,27,4],[27,10,27,8,"newGestures"],[27,21,27,19],[27,22,27,20,"i"],[27,23,27,21],[27,24,27,22],[27,25,27,23,"handlerTag"],[27,35,27,33],[27,40,27,38,"handler"],[27,47,27,45],[27,48,27,46,"handlerTag"],[27,58,27,56],[27,60,27,58],[28,8,28,6,"newGestures"],[28,19,28,17],[28,20,28,18,"i"],[28,21,28,19],[28,22,28,20],[28,23,28,21,"handlerTag"],[28,33,28,31],[28,36,28,34,"handler"],[28,43,28,41],[28,44,28,42,"handlerTag"],[28,54,28,52],[29,8,29,6,"newGestures"],[29,19,29,17],[29,20,29,18,"i"],[29,21,29,19],[29,22,29,20],[29,23,29,21,"handlers"],[29,31,29,29],[29,32,29,30,"handlerTag"],[29,42,29,40],[29,45,29,43,"handler"],[29,52,29,50],[29,53,29,51,"handlerTag"],[29,63,29,61],[30,6,30,4],[31,4,31,2],[33,4,33,2],[34,4,34,2],[34,8,34,8,"attachedGestures"],[34,24,34,24],[34,27,34,27,"preparedGesture"],[34,42,34,42],[34,43,34,43,"attachedGestures"],[34,59,34,59],[36,4,36,2],[37,4,37,2],[38,4,38,2],[39,4,39,2],[39,8,39,2,"ghQueueMicrotask"],[39,25,39,18],[39,26,39,18,"ghQueueMicrotask"],[39,42,39,18],[39,44,39,19],[39,50,39,25],[40,6,40,4],[40,10,40,8],[40,11,40,9,"preparedGesture"],[40,26,40,24],[40,27,40,25,"isMounted"],[40,36,40,34],[40,38,40,36],[41,8,41,6],[42,6,42,4],[44,6,44,4],[45,6,45,4],[45,10,45,8,"attachedGestures"],[45,26,45,24],[45,31,45,29,"preparedGesture"],[45,46,45,44],[45,47,45,45,"attachedGestures"],[45,63,45,61],[45,65,45,63],[46,8,46,6],[47,6,47,4],[49,6,49,4],[50,6,50,4],[50,10,50,8,"shouldUpdateSharedValueIfUsed"],[50,39,50,37],[50,42,51,6,"attachedGestures"],[50,58,51,22],[50,59,51,23,"length"],[50,65,51,29],[50,70,51,34,"newGestures"],[50,81,51,45],[50,82,51,46,"length"],[50,88,51,52],[51,6,53,4],[51,11,53,9],[51,15,53,13,"i"],[51,17,53,14],[51,20,53,17],[51,21,53,18],[51,23,53,20,"i"],[51,25,53,21],[51,28,53,24,"newGestures"],[51,39,53,35],[51,40,53,36,"length"],[51,46,53,42],[51,48,53,44,"i"],[51,50,53,45],[51,52,53,47],[51,54,53,49],[52,8,54,6],[52,12,54,12,"handler"],[52,20,54,19],[52,23,54,22,"attachedGestures"],[52,39,54,38],[52,40,54,39,"i"],[52,42,54,40],[52,43,54,41],[54,8,56,6],[55,8,57,6],[56,8,58,6],[56,12,59,8,"handler"],[56,20,59,15],[56,21,59,16,"handlers"],[56,29,59,24],[56,30,59,25,"gestureId"],[56,39,59,34],[56,44,59,39,"newGestures"],[56,55,59,50],[56,56,59,51,"i"],[56,58,59,52],[56,59,59,53],[56,60,59,54,"handlers"],[56,68,59,62],[56,69,59,63,"gestureId"],[56,78,59,72],[56,83,60,9,"newGestures"],[56,94,60,20],[56,95,60,21,"i"],[56,97,60,22],[56,98,60,23],[56,99,60,24,"shouldUseReanimated"],[56,118,60,43],[56,122,60,47,"handler"],[56,130,60,54],[56,131,60,55,"shouldUseReanimated"],[56,150,60,74],[56,151,60,75],[56,153,61,8],[57,10,62,8,"shouldUpdateSharedValueIfUsed"],[57,39,62,37],[57,42,62,40],[57,46,62,44],[58,8,63,6],[59,8,65,6,"handler"],[59,16,65,13],[59,17,65,14,"config"],[59,23,65,20],[59,26,65,23,"newGestures"],[59,37,65,34],[59,38,65,35,"i"],[59,40,65,36],[59,41,65,37],[59,42,65,38,"config"],[59,48,65,44],[60,8,66,6,"handler"],[60,16,66,13],[60,17,66,14,"handlers"],[60,25,66,22],[60,28,66,25,"newGestures"],[60,39,66,36],[60,40,66,37,"i"],[60,42,66,38],[60,43,66,39],[60,44,66,40,"handlers"],[60,52,66,48],[61,8,68,6,"RNGestureHandlerModule"],[61,30,68,28],[61,31,68,28,"default"],[61,38,68,28],[61,39,68,29,"updateGestureHandler"],[61,59,68,49],[61,60,69,8,"handler"],[61,68,69,15],[61,69,69,16,"handlerTag"],[61,79,69,26],[61,81,70,8],[61,85,70,8,"filterConfig"],[61,91,70,20],[61,92,70,20,"filterConfig"],[61,104,70,20],[61,106,71,10,"handler"],[61,114,71,17],[61,115,71,18,"config"],[61,121,71,24],[61,123,72,10,"ALLOWED_PROPS"],[61,130,72,23],[61,131,72,23,"ALLOWED_PROPS"],[61,144,72,23],[61,146,73,10],[61,150,73,10,"extractGestureRelations"],[61,157,73,33],[61,158,73,33,"extractGestureRelations"],[61,181,73,33],[61,183,73,34,"handler"],[61,191,73,41],[61,192,74,8],[61,193,75,6],[61,194,75,7],[62,8,77,6],[62,12,77,6,"registerHandler"],[62,29,77,21],[62,30,77,21,"registerHandler"],[62,45,77,21],[62,47,77,22,"handler"],[62,55,77,29],[62,56,77,30,"handlerTag"],[62,66,77,40],[62,68,77,42,"handler"],[62,76,77,49],[62,78,77,51,"handler"],[62,86,77,58],[62,87,77,59,"config"],[62,93,77,65],[62,94,77,66,"testId"],[62,100,77,72],[62,101,77,73],[63,6,78,4],[64,6,80,4],[64,10,80,8,"preparedGesture"],[64,25,80,23],[64,26,80,24,"animatedHandlers"],[64,42,80,40],[64,46,80,44,"shouldUpdateSharedValueIfUsed"],[64,75,80,73],[64,77,80,75],[65,8,81,6],[65,12,81,12,"newHandlersValue"],[65,28,81,28],[65,31,81,31,"attachedGestures"],[65,47,81,47],[65,48,82,9,"filter"],[65,54,82,15],[65,55,82,17,"g"],[65,56,82,18],[65,60,82,23,"g"],[65,61,82,24],[65,62,82,25,"shouldUseReanimated"],[65,81,82,44],[65,82,82,45],[65,83,82,46],[66,8,82,46],[66,9,83,9,"map"],[66,12,83,12],[66,13,83,14,"g"],[66,14,83,15],[66,18,83,20,"g"],[66,19,83,21],[66,20,83,22,"handlers"],[66,28,83,30],[66,29,85,9],[67,8,87,6,"preparedGesture"],[67,23,87,21],[67,24,87,22,"animatedHandlers"],[67,40,87,38],[67,41,87,39,"value"],[67,46,87,44],[67,49,87,47,"newHandlersValue"],[67,65,87,63],[68,6,88,4],[69,6,90,4],[69,10,90,4,"scheduleFlushOperations"],[69,16,90,27],[69,17,90,27,"scheduleFlushOperations"],[69,40,90,27],[69,42,90,28],[69,43,90,29],[70,4,91,2],[70,5,91,3],[70,6,91,4],[71,2,92,0],[72,0,92,1],[72,3]],"functionMap":{"names":["<global>","updateHandlers","ghQueueMicrotask$argument_0","attachedGestures.filter$argument_0","attachedGestures.filter.map$argument_0"],"mappings":"AAA;OCa;mBCyB;gBC2C,4BD;aEC,iBF;GDQ;CDC"},"hasCjsExports":false},"type":"js/module"}]}