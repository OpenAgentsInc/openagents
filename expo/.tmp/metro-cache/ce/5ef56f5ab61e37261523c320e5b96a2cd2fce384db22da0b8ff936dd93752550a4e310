{"dependencies":[{"name":"./util/tokensToAST","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":45,"index":45}}],"key":"+j9lLhoJlL+Q8BGt/Sx0SzcjXu8=","exportNames":["*"],"imports":1}},{"name":"./util/stringToTokens","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":46},"end":{"line":2,"column":53,"index":99}}],"key":"pG/QmF4gGgBi8wIO/HRmrPsQliA=","exportNames":["*"],"imports":1}},{"name":"./util/cleanupTokens","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":100},"end":{"line":3,"column":51,"index":151}}],"key":"IZO8NpOFGJhBckeRoDpEn8kr1Qw=","exportNames":["*"],"imports":1}},{"name":"./util/groupTextTokens","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":152},"end":{"line":4,"column":53,"index":205}}],"key":"p1a1ZRoWauLACWf4YRU1rnqTzuE=","exportNames":["*"],"imports":1}},{"name":"./util/omitListItemParagraph","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":206},"end":{"line":5,"column":65,"index":271}}],"key":"Z1W0LEoR5yv1YC4eVCmtxvqBWSs=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return parser;\n    }\n  });\n  var _utilTokensToAST = require(_dependencyMap[0]);\n  var tokensToAST = _interopDefault(_utilTokensToAST);\n  var _utilStringToTokens = require(_dependencyMap[1]);\n  var _utilCleanupTokens = require(_dependencyMap[2]);\n  var _utilGroupTextTokens = require(_dependencyMap[3]);\n  var groupTextTokens = _interopDefault(_utilGroupTextTokens);\n  var _utilOmitListItemParagraph = require(_dependencyMap[4]);\n  var omitListItemParagraph = _interopDefault(_utilOmitListItemParagraph);\n  /**\n   *\n   * @param {string} source\n   * @param {function} [renderer]\n   * @param {AstRenderer} [markdownIt]\n   * @return {View}\n   */\n  function parser(source, renderer, markdownIt) {\n    if (Array.isArray(source)) {\n      return renderer(source);\n    }\n    var tokens = (0, _utilStringToTokens.stringToTokens)(source, markdownIt);\n    tokens = (0, _utilCleanupTokens.cleanupTokens)(tokens);\n    tokens = (0, groupTextTokens.default)(tokens);\n    tokens = (0, omitListItemParagraph.default)(tokens);\n    var astTree = (0, tokensToAST.default)(tokens);\n    return renderer(astTree);\n  }\n});","lineCount":44,"map":[[12,2,14,15,"Object"],[12,8,14,15],[12,9,14,15,"defineProperty"],[12,23,14,15],[12,24,14,15,"exports"],[12,31,14,15],[13,4,14,15,"enumerable"],[13,14,14,15],[14,4,14,15,"get"],[14,7,14,15],[14,18,14,15,"get"],[14,19,14,15],[15,6,14,15],[15,13,14,15,"parser"],[15,19,14,15],[16,4,14,15],[17,2,14,15],[18,2,1,0],[18,6,1,0,"_utilTokensToAST"],[18,22,1,0],[18,25,1,0,"require"],[18,32,1,0],[18,33,1,0,"_dependencyMap"],[18,47,1,0],[19,2,1,0],[19,6,1,0,"tokensToAST"],[19,17,1,0],[19,20,1,0,"_interopDefault"],[19,35,1,0],[19,36,1,0,"_utilTokensToAST"],[19,52,1,0],[20,2,2,0],[20,6,2,0,"_utilStringToTokens"],[20,25,2,0],[20,28,2,0,"require"],[20,35,2,0],[20,36,2,0,"_dependencyMap"],[20,50,2,0],[21,2,3,0],[21,6,3,0,"_utilCleanupTokens"],[21,24,3,0],[21,27,3,0,"require"],[21,34,3,0],[21,35,3,0,"_dependencyMap"],[21,49,3,0],[22,2,4,0],[22,6,4,0,"_utilGroupTextTokens"],[22,26,4,0],[22,29,4,0,"require"],[22,36,4,0],[22,37,4,0,"_dependencyMap"],[22,51,4,0],[23,2,4,0],[23,6,4,0,"groupTextTokens"],[23,21,4,0],[23,24,4,0,"_interopDefault"],[23,39,4,0],[23,40,4,0,"_utilGroupTextTokens"],[23,60,4,0],[24,2,5,0],[24,6,5,0,"_utilOmitListItemParagraph"],[24,32,5,0],[24,35,5,0,"require"],[24,42,5,0],[24,43,5,0,"_dependencyMap"],[24,57,5,0],[25,2,5,0],[25,6,5,0,"omitListItemParagraph"],[25,27,5,0],[25,30,5,0,"_interopDefault"],[25,45,5,0],[25,46,5,0,"_utilOmitListItemParagraph"],[25,72,5,0],[26,2,7,0],[27,0,8,0],[28,0,9,0],[29,0,10,0],[30,0,11,0],[31,0,12,0],[32,0,13,0],[33,2,14,15],[33,11,14,24,"parser"],[33,17,14,30,"parser"],[33,18,14,31,"source"],[33,24,14,37],[33,26,14,39,"renderer"],[33,34,14,47],[33,36,14,49,"markdownIt"],[33,46,14,59],[33,48,14,61],[34,4,15,2],[34,8,15,6,"Array"],[34,13,15,11],[34,14,15,12,"isArray"],[34,21,15,19],[34,22,15,20,"source"],[34,28,15,26],[34,29,15,27],[34,31,15,29],[35,6,16,4],[35,13,16,11,"renderer"],[35,21,16,19],[35,22,16,20,"source"],[35,28,16,26],[35,29,16,27],[36,4,17,2],[37,4,19,2],[37,8,19,6,"tokens"],[37,14,19,12],[37,17,19,15],[37,21,19,15,"stringToTokens"],[37,40,19,29],[37,41,19,29,"stringToTokens"],[37,55,19,29],[37,57,19,30,"source"],[37,63,19,36],[37,65,19,38,"markdownIt"],[37,75,19,48],[37,76,19,49],[38,4,20,2,"tokens"],[38,10,20,8],[38,13,20,11],[38,17,20,11,"cleanupTokens"],[38,35,20,24],[38,36,20,24,"cleanupTokens"],[38,49,20,24],[38,51,20,25,"tokens"],[38,57,20,31],[38,58,20,32],[39,4,21,2,"tokens"],[39,10,21,8],[39,13,21,11],[39,17,21,11,"groupTextTokens"],[39,32,21,26],[39,33,21,26,"default"],[39,40,21,26],[39,42,21,27,"tokens"],[39,48,21,33],[39,49,21,34],[40,4,22,2,"tokens"],[40,10,22,8],[40,13,22,11],[40,17,22,11,"omitListItemParagraph"],[40,38,22,32],[40,39,22,32,"default"],[40,46,22,32],[40,48,22,33,"tokens"],[40,54,22,39],[40,55,22,40],[41,4,24,2],[41,8,24,8,"astTree"],[41,15,24,15],[41,18,24,18],[41,22,24,18,"tokensToAST"],[41,33,24,29],[41,34,24,29,"default"],[41,41,24,29],[41,43,24,30,"tokens"],[41,49,24,36],[41,50,24,37],[42,4,26,2],[42,11,26,9,"renderer"],[42,19,26,17],[42,20,26,18,"astTree"],[42,27,26,25],[42,28,26,26],[43,2,27,0],[44,0,27,1],[44,3]],"functionMap":{"names":["<global>","parser"],"mappings":"AAA;eCa;CDa"},"hasCjsExports":false},"type":"js/module"}]}