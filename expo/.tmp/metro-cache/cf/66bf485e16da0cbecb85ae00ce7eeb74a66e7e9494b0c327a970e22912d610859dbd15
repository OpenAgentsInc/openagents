{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.installGlobal = installGlobal;\n  /**\n   * Copyright © 2025 650 Industries.\n   * Copyright © Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * Fork of unexposed react-native module\n   * https://github.com/facebook/react-native/blob/c5fb371061c1083684a23aa0852f6dbfb74a8b52/packages/react-native/Libraries/Utilities/PolyfillFunctions.js#L1\n   */\n\n  // Add a well-known shared symbol that doesn't show up in iteration or inspection\n  // this can be used to detect if the global object abides by the Expo team's documented\n  // built-in requirements.\n  var BUILTIN_SYMBOL = Symbol.for('expo.builtin');\n\n  /** Defines a lazily evaluated property on the supplied `object` */\n  function defineLazyObjectProperty(object, name, descriptor) {\n    var get = descriptor.get;\n    var enumerable = descriptor.enumerable !== false;\n    var writable = descriptor.writable !== false;\n    var value;\n    var valueSet = false;\n    function getValue() {\n      // WORKAROUND: A weird infinite loop occurs where calling `getValue` calls\n      // `setValue` which calls `Object.defineProperty` which somehow triggers\n      // `getValue` again. Adding `valueSet` breaks this loop.\n      if (!valueSet) {\n        // Calling `get()` here can trigger an infinite loop if it fails to\n        // remove the getter on the property, which can happen when executing\n        // JS in a V8 context.  `valueSet = true` will break this loop, and\n        // sets the value of the property to undefined, until the code in `get()`\n        // finishes, at which point the property is set to the correct value.\n        valueSet = true;\n        setValue(get());\n      }\n      return value;\n    }\n    function setValue(newValue) {\n      value = newValue;\n      valueSet = true;\n      Object.defineProperty(object, name, {\n        value: newValue,\n        configurable: true,\n        enumerable,\n        writable\n      });\n    }\n    Object.defineProperty(object, name, {\n      get: getValue,\n      set: setValue,\n      configurable: true,\n      enumerable\n    });\n  }\n\n  /**\n   * Sets an object's property. If a property with the same name exists, this will\n   * replace it but maintain its descriptor configuration. The property will be\n   * replaced with a lazy getter.\n   *\n   * In DEV mode the original property value will be preserved as `original[PropertyName]`\n   * so that, if necessary, it can be restored. For example, if you want to route\n   * network requests through DevTools (to trace them):\n   *\n   *   global.XMLHttpRequest = global.originalXMLHttpRequest;\n   *\n   * @see https://github.com/facebook/react-native/issues/934\n   */\n  function installGlobal(name, getValue) {\n    // @ts-ignore: globalThis is not defined in all environments\n    var object = typeof global !== 'undefined' ? global : globalThis;\n    var descriptor = Object.getOwnPropertyDescriptor(object, name);\n    var _ref = descriptor || {},\n      enumerable = _ref.enumerable,\n      writable = _ref.writable,\n      _ref$configurable = _ref.configurable,\n      configurable = _ref$configurable === undefined ? false : _ref$configurable;\n    if (descriptor && !configurable) {\n      console.error('Failed to set polyfill. ' + name + ' is not configurable.');\n      return;\n    }\n    defineLazyObjectProperty(object, name, {\n      get() {\n        var value = getValue();\n        Object.defineProperty(value, BUILTIN_SYMBOL, {\n          value: true,\n          enumerable: false,\n          configurable: false\n        });\n        return value;\n      },\n      enumerable: enumerable !== false,\n      writable: writable !== false\n    });\n  }\n});","lineCount":104,"map":[[7,2,80,0,"exports"],[7,9,80,0],[7,10,80,0,"installGlobal"],[7,23,80,0],[7,26,80,0,"installGlobal"],[7,39,80,0],[8,2,1,0],[9,0,2,0],[10,0,3,0],[11,0,4,0],[12,0,5,0],[13,0,6,0],[14,0,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[19,2,12,0],[20,2,13,0],[21,2,14,0],[22,2,15,0],[22,6,15,6,"BUILTIN_SYMBOL"],[22,20,15,20],[22,23,15,23,"Symbol"],[22,29,15,29],[22,30,15,30,"for"],[22,33,15,33],[22,34,15,34],[22,48,15,48],[22,49,15,49],[24,2,17,0],[25,2,18,0],[25,11,18,9,"defineLazyObjectProperty"],[25,35,18,33,"defineLazyObjectProperty"],[25,36,19,2,"object"],[25,42,19,16],[25,44,20,2,"name"],[25,48,20,14],[25,50,21,2,"descriptor"],[25,60,25,3],[25,62,26,8],[26,4,27,2],[26,8,27,10,"get"],[26,11,27,13],[26,14,27,18,"descriptor"],[26,24,27,28],[26,25,27,10,"get"],[26,28,27,13],[27,4,28,2],[27,8,28,8,"enumerable"],[27,18,28,18],[27,21,28,21,"descriptor"],[27,31,28,31],[27,32,28,32,"enumerable"],[27,42,28,42],[27,47,28,47],[27,52,28,52],[28,4,29,2],[28,8,29,8,"writable"],[28,16,29,16],[28,19,29,19,"descriptor"],[28,29,29,29],[28,30,29,30,"writable"],[28,38,29,38],[28,43,29,43],[28,48,29,48],[29,4,31,2],[29,8,31,6,"value"],[29,13,31,16],[30,4,32,2],[30,8,32,6,"valueSet"],[30,16,32,14],[30,19,32,17],[30,24,32,22],[31,4,33,2],[31,13,33,11,"getValue"],[31,21,33,19,"getValue"],[31,22,33,19],[31,24,33,25],[32,6,34,4],[33,6,35,4],[34,6,36,4],[35,6,37,4],[35,10,37,8],[35,11,37,9,"valueSet"],[35,19,37,17],[35,21,37,19],[36,8,38,6],[37,8,39,6],[38,8,40,6],[39,8,41,6],[40,8,42,6],[41,8,43,6,"valueSet"],[41,16,43,14],[41,19,43,17],[41,23,43,21],[42,8,44,6,"setValue"],[42,16,44,14],[42,17,44,15,"get"],[42,20,44,18],[42,21,44,19],[42,22,44,20],[42,23,44,21],[43,6,45,4],[44,6,46,4],[44,13,46,11,"value"],[44,18,46,16],[45,4,47,2],[46,4,48,2],[46,13,48,11,"setValue"],[46,21,48,19,"setValue"],[46,22,48,20,"newValue"],[46,30,48,31],[46,32,48,39],[47,6,49,4,"value"],[47,11,49,9],[47,14,49,12,"newValue"],[47,22,49,20],[48,6,50,4,"valueSet"],[48,14,50,12],[48,17,50,15],[48,21,50,19],[49,6,51,4,"Object"],[49,12,51,10],[49,13,51,11,"defineProperty"],[49,27,51,25],[49,28,51,26,"object"],[49,34,51,32],[49,36,51,34,"name"],[49,40,51,38],[49,42,51,40],[50,8,52,6,"value"],[50,13,52,11],[50,15,52,13,"newValue"],[50,23,52,21],[51,8,53,6,"configurable"],[51,20,53,18],[51,22,53,20],[51,26,53,24],[52,8,54,6,"enumerable"],[52,18,54,16],[53,8,55,6,"writable"],[54,6,56,4],[54,7,56,5],[54,8,56,6],[55,4,57,2],[56,4,59,2,"Object"],[56,10,59,8],[56,11,59,9,"defineProperty"],[56,25,59,23],[56,26,59,24,"object"],[56,32,59,30],[56,34,59,32,"name"],[56,38,59,36],[56,40,59,38],[57,6,60,4,"get"],[57,9,60,7],[57,11,60,9,"getValue"],[57,19,60,17],[58,6,61,4,"set"],[58,9,61,7],[58,11,61,9,"setValue"],[58,19,61,17],[59,6,62,4,"configurable"],[59,18,62,16],[59,20,62,18],[59,24,62,22],[60,6,63,4,"enumerable"],[61,4,64,2],[61,5,64,3],[61,6,64,4],[62,2,65,0],[64,2,67,0],[65,0,68,0],[66,0,69,0],[67,0,70,0],[68,0,71,0],[69,0,72,0],[70,0,73,0],[71,0,74,0],[72,0,75,0],[73,0,76,0],[74,0,77,0],[75,0,78,0],[76,0,79,0],[77,2,80,7],[77,11,80,16,"installGlobal"],[77,24,80,29,"installGlobal"],[77,25,80,48,"name"],[77,29,80,60],[77,31,80,62,"getValue"],[77,39,80,79],[77,41,80,87],[78,4,81,2],[79,4,82,2],[79,8,82,8,"object"],[79,14,82,14],[79,17,82,17],[79,24,82,24,"global"],[79,30,82,30],[79,35,82,35],[79,46,82,46],[79,49,82,49,"global"],[79,55,82,55],[79,58,82,58,"globalThis"],[79,68,82,68],[80,4,83,2],[80,8,83,8,"descriptor"],[80,18,83,18],[80,21,83,21,"Object"],[80,27,83,27],[80,28,83,28,"getOwnPropertyDescriptor"],[80,52,83,52],[80,53,83,53,"object"],[80,59,83,59],[80,61,83,61,"name"],[80,65,83,65],[80,66,83,66],[81,4,89,2],[81,8,89,2,"_ref"],[81,12,89,2],[81,15,89,57,"descriptor"],[81,25,89,67],[81,29,89,71],[81,30,89,72],[81,31,89,73],[82,6,89,10,"enumerable"],[82,16,89,20],[82,19,89,20,"_ref"],[82,23,89,20],[82,24,89,10,"enumerable"],[82,34,89,20],[83,6,89,22,"writable"],[83,14,89,30],[83,17,89,30,"_ref"],[83,21,89,30],[83,22,89,22,"writable"],[83,30,89,30],[84,6,89,30,"_ref$configurable"],[84,23,89,30],[84,26,89,30,"_ref"],[84,30,89,30],[84,31,89,32,"configurable"],[84,43,89,44],[85,6,89,32,"configurable"],[85,18,89,44],[85,21,89,44,"_ref$configurable"],[85,38,89,44],[85,43,89,44,"undefined"],[85,52,89,44],[85,55,89,47],[85,60,89,52],[85,63,89,52,"_ref$configurable"],[85,80,89,52],[86,4,90,2],[86,8,90,6,"descriptor"],[86,18,90,16],[86,22,90,20],[86,23,90,21,"configurable"],[86,35,90,33],[86,37,90,35],[87,6,91,4,"console"],[87,13,91,11],[87,14,91,12,"error"],[87,19,91,17],[87,20,91,18],[87,46,91,44],[87,49,91,47,"name"],[87,53,91,51],[87,56,91,54],[87,79,91,77],[87,80,91,78],[88,6,92,4],[89,4,93,2],[90,4,95,2,"defineLazyObjectProperty"],[90,28,95,26],[90,29,95,27,"object"],[90,35,95,33],[90,37,95,35,"name"],[90,41,95,39],[90,43,95,41],[91,6,96,4,"get"],[91,9,96,7,"get"],[91,10,96,7],[91,12,96,10],[92,8,97,6],[92,12,97,12,"value"],[92,17,97,17],[92,20,97,20,"getValue"],[92,28,97,28],[92,29,97,29],[92,30,97,30],[93,8,98,6,"Object"],[93,14,98,12],[93,15,98,13,"defineProperty"],[93,29,98,27],[93,30,98,28,"value"],[93,35,98,33],[93,37,98,35,"BUILTIN_SYMBOL"],[93,51,98,49],[93,53,98,51],[94,10,99,8,"value"],[94,15,99,13],[94,17,99,15],[94,21,99,19],[95,10,100,8,"enumerable"],[95,20,100,18],[95,22,100,20],[95,27,100,25],[96,10,101,8,"configurable"],[96,22,101,20],[96,24,101,22],[97,8,102,6],[97,9,102,7],[97,10,102,8],[98,8,104,6],[98,15,104,13,"value"],[98,20,104,18],[99,6,105,4],[99,7,105,5],[100,6,106,4,"enumerable"],[100,16,106,14],[100,18,106,16,"enumerable"],[100,28,106,26],[100,33,106,31],[100,38,106,36],[101,6,107,4,"writable"],[101,14,107,12],[101,16,107,14,"writable"],[101,24,107,22],[101,29,107,27],[102,4,108,2],[102,5,108,3],[102,6,108,4],[103,2,109,0],[104,0,109,1],[104,3]],"functionMap":{"names":["<global>","defineLazyObjectProperty","getValue","setValue","installGlobal","defineLazyObjectProperty$argument_2.get"],"mappings":"AAA;ACiB;ECe;GDc;EEC;GFS;CDQ;OIe;ICgB;KDS;CJI"},"hasCjsExports":false},"type":"js/module"}]}