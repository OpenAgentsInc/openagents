{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"./helpers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":190},"end":{"line":13,"column":19,"index":288}}],"key":"kg0rJsyHf+Iyf4Z1AFOYGhKLkW4=","exportNames":["*"],"imports":1}},{"name":"./RCTAsyncStorage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":289},"end":{"line":14,"column":48,"index":337}}],"key":"vxraiZFVwMwLuYvN1qAVa4yTx+A=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0]);\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _helpers = require(_dependencyMap[1]);\n  var _RCTAsyncStorage = require(_dependencyMap[2]);\n  var RCTAsyncStorage = _interopDefault(_RCTAsyncStorage);\n  /**\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  if (!RCTAsyncStorage.default) {\n    throw new Error(`[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.\n\nTo fix this issue try these steps:\n\n  • Uninstall, rebuild and restart the app.\n\n  • Run the packager with \\`--reset-cache\\` flag.\n\n  • If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory, then rebuild and re-run the app.\n\n  • Make sure your project's \\`package.json\\` depends on \\`@react-native-async-storage/async-storage\\`, even if you only depend on it indirectly through other dependencies. CLI only autolinks native modules found in your \\`package.json\\`.\n\n  • If this happens while testing with Jest, check out how to integrate AsyncStorage here: https://react-native-async-storage.github.io/async-storage/docs/advanced/jest\n\nIf none of these fix the issue, please open an issue on the GitHub repository: https://github.com/react-native-async-storage/async-storage/issues\n`);\n  }\n\n  /**\n   * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n   * storage system that is global to the app. It should be used instead of\n   * LocalStorage.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api\n   */\n  var AsyncStorage = (() => {\n    var _getRequests = [];\n    var _getKeys = [];\n    var _immediate = null;\n    return {\n      /**\n       * Fetches an item for a `key` and invokes a callback upon completion.\n       *\n       * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\n       */\n      getItem: (key, callback) => {\n        return new Promise((resolve, reject) => {\n          (0, _helpers.checkValidInput)(key);\n          RCTAsyncStorage.default.multiGet([key], (errors, result) => {\n            // Unpack result to get value from [[key,value]]\n            var value = result?.[0]?.[1] ? result[0][1] : null;\n            var errs = (0, _helpers.convertErrors)(errors);\n            callback?.(errs?.[0], value);\n            if (errs) {\n              reject(errs[0]);\n            } else {\n              resolve(value);\n            }\n          });\n        });\n      },\n      /**\n       * Sets the value for a `key` and invokes a callback upon completion.\n       *\n       * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\n       */\n      setItem: (key, value, callback) => {\n        return new Promise((resolve, reject) => {\n          (0, _helpers.checkValidInput)(key, value);\n          RCTAsyncStorage.default.multiSet([[key, value]], errors => {\n            var errs = (0, _helpers.convertErrors)(errors);\n            callback?.(errs?.[0]);\n            if (errs) {\n              reject(errs[0]);\n            } else {\n              resolve();\n            }\n          });\n        });\n      },\n      /**\n       * Removes an item for a `key` and invokes a callback upon completion.\n       *\n       * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\n       */\n      removeItem: (key, callback) => {\n        return new Promise((resolve, reject) => {\n          (0, _helpers.checkValidInput)(key);\n          RCTAsyncStorage.default.multiRemove([key], errors => {\n            var errs = (0, _helpers.convertErrors)(errors);\n            callback?.(errs?.[0]);\n            if (errs) {\n              reject(errs[0]);\n            } else {\n              resolve();\n            }\n          });\n        });\n      },\n      /**\n       * Merges an existing `key` value with an input value, assuming both values\n       * are stringified JSON.\n       *\n       * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\n       */\n      mergeItem: (key, value, callback) => {\n        return new Promise((resolve, reject) => {\n          (0, _helpers.checkValidInput)(key, value);\n          RCTAsyncStorage.default.multiMerge([[key, value]], errors => {\n            var errs = (0, _helpers.convertErrors)(errors);\n            callback?.(errs?.[0]);\n            if (errs) {\n              reject(errs[0]);\n            } else {\n              resolve();\n            }\n          });\n        });\n      },\n      /**\n       * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n       * don't want to call this; use `removeItem` or `multiRemove` to clear only\n       * your app's keys.\n       *\n       * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\n       */\n      clear: callback => {\n        return new Promise((resolve, reject) => {\n          RCTAsyncStorage.default.clear(error => {\n            var err = (0, _helpers.convertError)(error);\n            callback?.(err);\n            if (err) {\n              reject(err);\n            } else {\n              resolve();\n            }\n          });\n        });\n      },\n      /**\n       * Gets *all* keys known to your app; for all callers, libraries, etc.\n       *\n       * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\n       */\n      getAllKeys: callback => {\n        return new Promise((resolve, reject) => {\n          RCTAsyncStorage.default.getAllKeys((error, keys) => {\n            var err = (0, _helpers.convertError)(error);\n            callback?.(err, keys);\n            if (keys) {\n              resolve(keys);\n            } else {\n              reject(err);\n            }\n          });\n        });\n      },\n      /**\n       * The following batched functions are useful for executing a lot of\n       * operations at once, allowing for native optimizations and provide the\n       * convenience of a single callback after all operations are complete.\n       *\n       * These functions return arrays of errors, potentially one for every key.\n       * For key-specific errors, the Error object will have a key property to\n       * indicate which key caused the error.\n       */\n\n      /**\n       * Flushes any pending requests using a single batch call to get the data.\n       *\n       * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\n       * */\n      flushGetRequests: () => {\n        var getRequests = _getRequests;\n        var getKeys = _getKeys;\n        _getRequests = [];\n        _getKeys = [];\n        RCTAsyncStorage.default.multiGet(getKeys, (errors, result) => {\n          // Even though the runtime complexity of this is theoretically worse vs if we used a map,\n          // it's much, much faster in practice for the data sets we deal with (we avoid\n          // allocating result pair arrays). This was heavily benchmarked.\n          //\n          // Is there a way to avoid using the map but fix the bug in this breaking test?\n          // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\n          var map = {};\n          result?.forEach(_ref => {\n            var _ref2 = (0, _slicedToArray.default)(_ref, 2),\n              key = _ref2[0],\n              value = _ref2[1];\n            map[key] = value;\n            return value;\n          });\n          var reqLength = getRequests.length;\n\n          /**\n           * As mentioned few lines above, this method could be called with the array of potential error,\n           * in case of anything goes wrong. The problem is, if any of the batched calls fails\n           * the rest of them would fail too, but the error would be consumed by just one. The rest\n           * would simply return `undefined` as their result, rendering false negatives.\n           *\n           * In order to avoid this situation, in case of any call failing,\n           * the rest of them will be rejected as well (with the same error).\n           */\n          var errorList = (0, _helpers.convertErrors)(errors);\n          var error = errorList?.length ? errorList[0] : null;\n          for (var i = 0; i < reqLength; i++) {\n            var request = getRequests[i];\n            if (error) {\n              request.callback?.(errorList);\n              request.reject?.(error);\n              continue;\n            }\n            var requestResult = request.keys.map(key => [key, map[key]]);\n            request.callback?.(null, requestResult);\n            request.resolve?.(requestResult);\n          }\n        });\n      },\n      /**\n       * This allows you to batch the fetching of items given an array of `key`\n       * inputs. Your callback will be invoked with an array of corresponding\n       * key-value pairs found.\n       *\n       * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\n       */\n      multiGet: (keys, callback) => {\n        if (!_immediate) {\n          _immediate = setImmediate(() => {\n            _immediate = null;\n            AsyncStorage.flushGetRequests();\n          });\n        }\n        var getRequest = {\n          keys: keys,\n          callback: callback,\n          // do we need this?\n          keyIndex: _getKeys.length\n        };\n        var promiseResult = new Promise((resolve, reject) => {\n          getRequest.resolve = resolve;\n          getRequest.reject = reject;\n        });\n        _getRequests.push(getRequest);\n        // avoid fetching duplicates\n        keys.forEach(key => {\n          if (_getKeys.indexOf(key) === -1) {\n            _getKeys.push(key);\n          }\n        });\n        return promiseResult;\n      },\n      /**\n       * Use this as a batch operation for storing multiple key-value pairs. When\n       * the operation completes you'll get a single callback with any errors.\n       *\n       * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\n       */\n      multiSet: (keyValuePairs, callback) => {\n        (0, _helpers.checkValidArgs)(keyValuePairs, callback);\n        return new Promise((resolve, reject) => {\n          keyValuePairs.forEach(_ref3 => {\n            var _ref4 = (0, _slicedToArray.default)(_ref3, 2),\n              key = _ref4[0],\n              value = _ref4[1];\n            (0, _helpers.checkValidInput)(key, value);\n          });\n          RCTAsyncStorage.default.multiSet(keyValuePairs, errors => {\n            var error = (0, _helpers.convertErrors)(errors);\n            callback?.(error);\n            if (error) {\n              reject(error);\n            } else {\n              resolve();\n            }\n          });\n        });\n      },\n      /**\n       * Call this to batch the deletion of all keys in the `keys` array.\n       *\n       * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\n       */\n      multiRemove: (keys, callback) => {\n        return new Promise((resolve, reject) => {\n          keys.forEach(key => (0, _helpers.checkValidInput)(key));\n          RCTAsyncStorage.default.multiRemove(keys, errors => {\n            var error = (0, _helpers.convertErrors)(errors);\n            callback?.(error);\n            if (error) {\n              reject(error);\n            } else {\n              resolve();\n            }\n          });\n        });\n      },\n      /**\n       * Batch operation to merge in existing and new values for a given set of\n       * keys. This assumes that the values are stringified JSON.\n       *\n       * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\n       */\n      multiMerge: (keyValuePairs, callback) => {\n        return new Promise((resolve, reject) => {\n          RCTAsyncStorage.default.multiMerge(keyValuePairs, errors => {\n            var error = (0, _helpers.convertErrors)(errors);\n            callback?.(error);\n            if (error) {\n              reject(error);\n            } else {\n              resolve();\n            }\n          });\n        });\n      }\n    };\n  })();\n  var _default = AsyncStorage;\n});","lineCount":339,"map":[[12,2,356,0,"Object"],[12,8,356,0],[12,9,356,0,"defineProperty"],[12,23,356,0],[12,24,356,0,"exports"],[12,31,356,0],[13,4,356,0,"enumerable"],[13,14,356,0],[14,4,356,0,"get"],[14,7,356,0],[14,18,356,0,"get"],[14,19,356,0],[15,6,356,0],[15,13,356,0,"_default"],[15,21,356,0],[16,4,356,0],[17,2,356,0],[18,2,356,28],[18,6,356,28,"_babelRuntimeHelpersSlicedToArray"],[18,39,356,28],[18,42,356,28,"require"],[18,49,356,28],[18,50,356,28,"_dependencyMap"],[18,64,356,28],[19,2,356,28],[19,6,356,28,"_slicedToArray"],[19,20,356,28],[19,23,356,28,"_interopDefault"],[19,38,356,28],[19,39,356,28,"_babelRuntimeHelpersSlicedToArray"],[19,72,356,28],[20,2,8,0],[20,6,8,0,"_helpers"],[20,14,8,0],[20,17,8,0,"require"],[20,24,8,0],[20,25,8,0,"_dependencyMap"],[20,39,8,0],[21,2,14,0],[21,6,14,0,"_RCTAsyncStorage"],[21,22,14,0],[21,25,14,0,"require"],[21,32,14,0],[21,33,14,0,"_dependencyMap"],[21,47,14,0],[22,2,14,0],[22,6,14,0,"RCTAsyncStorage"],[22,21,14,0],[22,24,14,0,"_interopDefault"],[22,39,14,0],[22,40,14,0,"_RCTAsyncStorage"],[22,56,14,0],[23,2,1,0],[24,0,2,0],[25,0,3,0],[26,0,4,0],[27,0,5,0],[28,0,6,0],[30,2,22,0],[30,6,22,4],[30,7,22,5,"RCTAsyncStorage"],[30,22,22,20],[30,23,22,20,"default"],[30,30,22,20],[30,32,22,22],[31,4,23,2],[31,10,23,8],[31,14,23,12,"Error"],[31,19,23,17],[31,20,23,18],[32,0,24,0],[33,0,25,0],[34,0,26,0],[35,0,27,0],[36,0,28,0],[37,0,29,0],[38,0,30,0],[39,0,31,0],[40,0,32,0],[41,0,33,0],[42,0,34,0],[43,0,35,0],[44,0,36,0],[45,0,37,0],[46,0,38,0],[46,1,38,1],[46,2,38,2],[47,2,39,0],[49,2,41,0],[50,0,42,0],[51,0,43,0],[52,0,44,0],[53,0,45,0],[54,0,46,0],[55,0,47,0],[56,2,48,0],[56,6,48,6,"AsyncStorage"],[56,18,48,18],[56,21,48,21],[56,22,48,22],[56,28,48,48],[57,4,49,2],[57,8,49,6,"_getRequests"],[57,20,49,34],[57,23,49,37],[57,25,49,39],[58,4,50,2],[58,8,50,6,"_getKeys"],[58,16,50,24],[58,19,50,27],[58,21,50,29],[59,4,51,2],[59,8,51,6,"_immediate"],[59,18,51,56],[59,21,51,59],[59,25,51,63],[60,4,53,2],[60,11,53,9],[61,6,54,4],[62,0,55,0],[63,0,56,0],[64,0,57,0],[65,0,58,0],[66,6,59,4,"getItem"],[66,13,59,11],[66,15,59,13,"getItem"],[66,16,59,14,"key"],[66,19,59,17],[66,21,59,19,"callback"],[66,29,59,27],[66,34,59,32],[67,8,60,6],[67,15,60,13],[67,19,60,17,"Promise"],[67,26,60,24],[67,27,60,25],[67,28,60,26,"resolve"],[67,35,60,33],[67,37,60,35,"reject"],[67,43,60,41],[67,48,60,46],[68,10,61,8],[68,14,61,8,"checkValidInput"],[68,22,61,23],[68,23,61,23,"checkValidInput"],[68,38,61,23],[68,40,61,24,"key"],[68,43,61,27],[68,44,61,28],[69,10,62,8,"RCTAsyncStorage"],[69,25,62,23],[69,26,62,23,"default"],[69,33,62,23],[69,34,62,24,"multiGet"],[69,42,62,32],[69,43,63,10],[69,44,63,11,"key"],[69,47,63,14],[69,48,63,15],[69,50,64,10],[69,51,64,11,"errors"],[69,57,64,31],[69,59,64,33,"result"],[69,65,64,52],[69,70,64,57],[70,12,65,12],[71,12,66,12],[71,16,66,18,"value"],[71,21,66,23],[71,24,66,26,"result"],[71,30,66,32],[71,33,66,35],[71,34,66,36],[71,35,66,37],[71,38,66,40],[71,39,66,41],[71,40,66,42],[71,43,66,45,"result"],[71,49,66,51],[71,50,66,52],[71,51,66,53],[71,52,66,54],[71,53,66,55],[71,54,66,56],[71,55,66,57],[71,58,66,60],[71,62,66,64],[72,12,67,12],[72,16,67,18,"errs"],[72,20,67,22],[72,23,67,25],[72,27,67,25,"convertErrors"],[72,35,67,38],[72,36,67,38,"convertErrors"],[72,49,67,38],[72,51,67,39,"errors"],[72,57,67,45],[72,58,67,46],[73,12,68,12,"callback"],[73,20,68,20],[73,23,68,23,"errs"],[73,27,68,27],[73,30,68,30],[73,31,68,31],[73,32,68,32],[73,34,68,34,"value"],[73,39,68,39],[73,40,68,40],[74,12,69,12],[74,16,69,16,"errs"],[74,20,69,20],[74,22,69,22],[75,14,70,14,"reject"],[75,20,70,20],[75,21,70,21,"errs"],[75,25,70,25],[75,26,70,26],[75,27,70,27],[75,28,70,28],[75,29,70,29],[76,12,71,12],[76,13,71,13],[76,19,71,19],[77,14,72,14,"resolve"],[77,21,72,21],[77,22,72,22,"value"],[77,27,72,27],[77,28,72,28],[78,12,73,12],[79,10,74,10],[79,11,75,8],[79,12,75,9],[80,8,76,6],[80,9,76,7],[80,10,76,8],[81,6,77,4],[81,7,77,5],[82,6,79,4],[83,0,80,0],[84,0,81,0],[85,0,82,0],[86,0,83,0],[87,6,84,4,"setItem"],[87,13,84,11],[87,15,84,13,"setItem"],[87,16,84,14,"key"],[87,19,84,17],[87,21,84,19,"value"],[87,26,84,24],[87,28,84,26,"callback"],[87,36,84,34],[87,41,84,39],[88,8,85,6],[88,15,85,13],[88,19,85,17,"Promise"],[88,26,85,24],[88,27,85,25],[88,28,85,26,"resolve"],[88,35,85,33],[88,37,85,35,"reject"],[88,43,85,41],[88,48,85,46],[89,10,86,8],[89,14,86,8,"checkValidInput"],[89,22,86,23],[89,23,86,23,"checkValidInput"],[89,38,86,23],[89,40,86,24,"key"],[89,43,86,27],[89,45,86,29,"value"],[89,50,86,34],[89,51,86,35],[90,10,87,8,"RCTAsyncStorage"],[90,25,87,23],[90,26,87,23,"default"],[90,33,87,23],[90,34,87,24,"multiSet"],[90,42,87,32],[90,43,87,33],[90,44,87,34],[90,45,87,35,"key"],[90,48,87,38],[90,50,87,40,"value"],[90,55,87,45],[90,56,87,46],[90,57,87,47],[90,59,87,50,"errors"],[90,65,87,70],[90,69,87,75],[91,12,88,10],[91,16,88,16,"errs"],[91,20,88,20],[91,23,88,23],[91,27,88,23,"convertErrors"],[91,35,88,36],[91,36,88,36,"convertErrors"],[91,49,88,36],[91,51,88,37,"errors"],[91,57,88,43],[91,58,88,44],[92,12,89,10,"callback"],[92,20,89,18],[92,23,89,21,"errs"],[92,27,89,25],[92,30,89,28],[92,31,89,29],[92,32,89,30],[92,33,89,31],[93,12,90,10],[93,16,90,14,"errs"],[93,20,90,18],[93,22,90,20],[94,14,91,12,"reject"],[94,20,91,18],[94,21,91,19,"errs"],[94,25,91,23],[94,26,91,24],[94,27,91,25],[94,28,91,26],[94,29,91,27],[95,12,92,10],[95,13,92,11],[95,19,92,17],[96,14,93,12,"resolve"],[96,21,93,19],[96,22,93,20],[96,23,93,21],[97,12,94,10],[98,10,95,8],[98,11,95,9],[98,12,95,10],[99,8,96,6],[99,9,96,7],[99,10,96,8],[100,6,97,4],[100,7,97,5],[101,6,99,4],[102,0,100,0],[103,0,101,0],[104,0,102,0],[105,0,103,0],[106,6,104,4,"removeItem"],[106,16,104,14],[106,18,104,16,"removeItem"],[106,19,104,17,"key"],[106,22,104,20],[106,24,104,22,"callback"],[106,32,104,30],[106,37,104,35],[107,8,105,6],[107,15,105,13],[107,19,105,17,"Promise"],[107,26,105,24],[107,27,105,25],[107,28,105,26,"resolve"],[107,35,105,33],[107,37,105,35,"reject"],[107,43,105,41],[107,48,105,46],[108,10,106,8],[108,14,106,8,"checkValidInput"],[108,22,106,23],[108,23,106,23,"checkValidInput"],[108,38,106,23],[108,40,106,24,"key"],[108,43,106,27],[108,44,106,28],[109,10,107,8,"RCTAsyncStorage"],[109,25,107,23],[109,26,107,23,"default"],[109,33,107,23],[109,34,107,24,"multiRemove"],[109,45,107,35],[109,46,107,36],[109,47,107,37,"key"],[109,50,107,40],[109,51,107,41],[109,53,107,44,"errors"],[109,59,107,64],[109,63,107,69],[110,12,108,10],[110,16,108,16,"errs"],[110,20,108,20],[110,23,108,23],[110,27,108,23,"convertErrors"],[110,35,108,36],[110,36,108,36,"convertErrors"],[110,49,108,36],[110,51,108,37,"errors"],[110,57,108,43],[110,58,108,44],[111,12,109,10,"callback"],[111,20,109,18],[111,23,109,21,"errs"],[111,27,109,25],[111,30,109,28],[111,31,109,29],[111,32,109,30],[111,33,109,31],[112,12,110,10],[112,16,110,14,"errs"],[112,20,110,18],[112,22,110,20],[113,14,111,12,"reject"],[113,20,111,18],[113,21,111,19,"errs"],[113,25,111,23],[113,26,111,24],[113,27,111,25],[113,28,111,26],[113,29,111,27],[114,12,112,10],[114,13,112,11],[114,19,112,17],[115,14,113,12,"resolve"],[115,21,113,19],[115,22,113,20],[115,23,113,21],[116,12,114,10],[117,10,115,8],[117,11,115,9],[117,12,115,10],[118,8,116,6],[118,9,116,7],[118,10,116,8],[119,6,117,4],[119,7,117,5],[120,6,119,4],[121,0,120,0],[122,0,121,0],[123,0,122,0],[124,0,123,0],[125,0,124,0],[126,6,125,4,"mergeItem"],[126,15,125,13],[126,17,125,15,"mergeItem"],[126,18,125,16,"key"],[126,21,125,19],[126,23,125,21,"value"],[126,28,125,26],[126,30,125,28,"callback"],[126,38,125,36],[126,43,125,41],[127,8,126,6],[127,15,126,13],[127,19,126,17,"Promise"],[127,26,126,24],[127,27,126,25],[127,28,126,26,"resolve"],[127,35,126,33],[127,37,126,35,"reject"],[127,43,126,41],[127,48,126,46],[128,10,127,8],[128,14,127,8,"checkValidInput"],[128,22,127,23],[128,23,127,23,"checkValidInput"],[128,38,127,23],[128,40,127,24,"key"],[128,43,127,27],[128,45,127,29,"value"],[128,50,127,34],[128,51,127,35],[129,10,128,8,"RCTAsyncStorage"],[129,25,128,23],[129,26,128,23,"default"],[129,33,128,23],[129,34,128,24,"multiMerge"],[129,44,128,34],[129,45,128,35],[129,46,128,36],[129,47,128,37,"key"],[129,50,128,40],[129,52,128,42,"value"],[129,57,128,47],[129,58,128,48],[129,59,128,49],[129,61,128,52,"errors"],[129,67,128,72],[129,71,128,77],[130,12,129,10],[130,16,129,16,"errs"],[130,20,129,20],[130,23,129,23],[130,27,129,23,"convertErrors"],[130,35,129,36],[130,36,129,36,"convertErrors"],[130,49,129,36],[130,51,129,37,"errors"],[130,57,129,43],[130,58,129,44],[131,12,130,10,"callback"],[131,20,130,18],[131,23,130,21,"errs"],[131,27,130,25],[131,30,130,28],[131,31,130,29],[131,32,130,30],[131,33,130,31],[132,12,131,10],[132,16,131,14,"errs"],[132,20,131,18],[132,22,131,20],[133,14,132,12,"reject"],[133,20,132,18],[133,21,132,19,"errs"],[133,25,132,23],[133,26,132,24],[133,27,132,25],[133,28,132,26],[133,29,132,27],[134,12,133,10],[134,13,133,11],[134,19,133,17],[135,14,134,12,"resolve"],[135,21,134,19],[135,22,134,20],[135,23,134,21],[136,12,135,10],[137,10,136,8],[137,11,136,9],[137,12,136,10],[138,8,137,6],[138,9,137,7],[138,10,137,8],[139,6,138,4],[139,7,138,5],[140,6,140,4],[141,0,141,0],[142,0,142,0],[143,0,143,0],[144,0,144,0],[145,0,145,0],[146,0,146,0],[147,6,147,4,"clear"],[147,11,147,9],[147,13,147,12,"callback"],[147,21,147,20],[147,25,147,25],[148,8,148,6],[148,15,148,13],[148,19,148,17,"Promise"],[148,26,148,24],[148,27,148,25],[148,28,148,26,"resolve"],[148,35,148,33],[148,37,148,35,"reject"],[148,43,148,41],[148,48,148,46],[149,10,149,8,"RCTAsyncStorage"],[149,25,149,23],[149,26,149,23,"default"],[149,33,149,23],[149,34,149,24,"clear"],[149,39,149,29],[149,40,149,31,"error"],[149,45,149,48],[149,49,149,53],[150,12,150,10],[150,16,150,16,"err"],[150,19,150,19],[150,22,150,22],[150,26,150,22,"convertError"],[150,34,150,34],[150,35,150,34,"convertError"],[150,47,150,34],[150,49,150,35,"error"],[150,54,150,40],[150,55,150,41],[151,12,151,10,"callback"],[151,20,151,18],[151,23,151,21,"err"],[151,26,151,24],[151,27,151,25],[152,12,152,10],[152,16,152,14,"err"],[152,19,152,17],[152,21,152,19],[153,14,153,12,"reject"],[153,20,153,18],[153,21,153,19,"err"],[153,24,153,22],[153,25,153,23],[154,12,154,10],[154,13,154,11],[154,19,154,17],[155,14,155,12,"resolve"],[155,21,155,19],[155,22,155,20],[155,23,155,21],[156,12,156,10],[157,10,157,8],[157,11,157,9],[157,12,157,10],[158,8,158,6],[158,9,158,7],[158,10,158,8],[159,6,159,4],[159,7,159,5],[160,6,161,4],[161,0,162,0],[162,0,163,0],[163,0,164,0],[164,0,165,0],[165,6,166,4,"getAllKeys"],[165,16,166,14],[165,18,166,17,"callback"],[165,26,166,25],[165,30,166,30],[166,8,167,6],[166,15,167,13],[166,19,167,17,"Promise"],[166,26,167,24],[166,27,167,25],[166,28,167,26,"resolve"],[166,35,167,33],[166,37,167,35,"reject"],[166,43,167,41],[166,48,167,46],[167,10,168,8,"RCTAsyncStorage"],[167,25,168,23],[167,26,168,23,"default"],[167,33,168,23],[167,34,168,24,"getAllKeys"],[167,44,168,34],[167,45,168,35],[167,46,168,36,"error"],[167,51,168,53],[167,53,168,55,"keys"],[167,57,168,70],[167,62,168,75],[168,12,169,10],[168,16,169,16,"err"],[168,19,169,19],[168,22,169,22],[168,26,169,22,"convertError"],[168,34,169,34],[168,35,169,34,"convertError"],[168,47,169,34],[168,49,169,35,"error"],[168,54,169,40],[168,55,169,41],[169,12,170,10,"callback"],[169,20,170,18],[169,23,170,21,"err"],[169,26,170,24],[169,28,170,26,"keys"],[169,32,170,30],[169,33,170,31],[170,12,171,10],[170,16,171,14,"keys"],[170,20,171,18],[170,22,171,20],[171,14,172,12,"resolve"],[171,21,172,19],[171,22,172,20,"keys"],[171,26,172,24],[171,27,172,25],[172,12,173,10],[172,13,173,11],[172,19,173,17],[173,14,174,12,"reject"],[173,20,174,18],[173,21,174,19,"err"],[173,24,174,22],[173,25,174,23],[174,12,175,10],[175,10,176,8],[175,11,176,9],[175,12,176,10],[176,8,177,6],[176,9,177,7],[176,10,177,8],[177,6,178,4],[177,7,178,5],[178,6,180,4],[179,0,181,0],[180,0,182,0],[181,0,183,0],[182,0,184,0],[183,0,185,0],[184,0,186,0],[185,0,187,0],[186,0,188,0],[188,6,190,4],[189,0,191,0],[190,0,192,0],[191,0,193,0],[192,0,194,0],[193,6,195,4,"flushGetRequests"],[193,22,195,20],[193,24,195,22,"flushGetRequests"],[193,25,195,22],[193,30,195,28],[194,8,196,6],[194,12,196,12,"getRequests"],[194,23,196,23],[194,26,196,26,"_getRequests"],[194,38,196,38],[195,8,197,6],[195,12,197,12,"getKeys"],[195,19,197,19],[195,22,197,22,"_getKeys"],[195,30,197,30],[196,8,199,6,"_getRequests"],[196,20,199,18],[196,23,199,21],[196,25,199,23],[197,8,200,6,"_getKeys"],[197,16,200,14],[197,19,200,17],[197,21,200,19],[198,8,202,6,"RCTAsyncStorage"],[198,23,202,21],[198,24,202,21,"default"],[198,31,202,21],[198,32,202,22,"multiGet"],[198,40,202,30],[198,41,203,8,"getKeys"],[198,48,203,15],[198,50,204,8],[198,51,204,9,"errors"],[198,57,204,29],[198,59,204,31,"result"],[198,65,204,50],[198,70,204,55],[199,10,205,10],[200,10,206,10],[201,10,207,10],[202,10,208,10],[203,10,209,10],[204,10,210,10],[205,10,211,10],[205,14,211,16,"map"],[205,17,211,43],[205,20,211,46],[205,21,211,47],[205,22,211,48],[206,10,212,10,"result"],[206,16,212,16],[206,18,212,18,"forEach"],[206,25,212,25],[206,26,212,26,"_ref"],[206,30,212,26],[206,34,212,44],[207,12,212,44],[207,16,212,44,"_ref2"],[207,21,212,44],[207,28,212,44,"_slicedToArray"],[207,42,212,44],[207,43,212,44,"default"],[207,50,212,44],[207,52,212,44,"_ref"],[207,56,212,44],[208,14,212,28,"key"],[208,17,212,31],[208,20,212,31,"_ref2"],[208,25,212,31],[209,14,212,33,"value"],[209,19,212,38],[209,22,212,38,"_ref2"],[209,27,212,38],[210,12,213,12,"map"],[210,15,213,15],[210,16,213,16,"key"],[210,19,213,19],[210,20,213,20],[210,23,213,23,"value"],[210,28,213,28],[211,12,214,12],[211,19,214,19,"value"],[211,24,214,24],[212,10,215,10],[212,11,215,11],[212,12,215,12],[213,10,216,10],[213,14,216,16,"reqLength"],[213,23,216,25],[213,26,216,28,"getRequests"],[213,37,216,39],[213,38,216,40,"length"],[213,44,216,46],[215,10,218,10],[216,0,219,0],[217,0,220,0],[218,0,221,0],[219,0,222,0],[220,0,223,0],[221,0,224,0],[222,0,225,0],[223,0,226,0],[224,10,227,10],[224,14,227,16,"errorList"],[224,23,227,25],[224,26,227,28],[224,30,227,28,"convertErrors"],[224,38,227,41],[224,39,227,41,"convertErrors"],[224,52,227,41],[224,54,227,42,"errors"],[224,60,227,48],[224,61,227,49],[225,10,228,10],[225,14,228,16,"error"],[225,19,228,21],[225,22,228,24,"errorList"],[225,31,228,33],[225,33,228,35,"length"],[225,39,228,41],[225,42,228,44,"errorList"],[225,51,228,53],[225,52,228,54],[225,53,228,55],[225,54,228,56],[225,57,228,59],[225,61,228,63],[226,10,230,10],[226,15,230,15],[226,19,230,19,"i"],[226,20,230,20],[226,23,230,23],[226,24,230,24],[226,26,230,26,"i"],[226,27,230,27],[226,30,230,30,"reqLength"],[226,39,230,39],[226,41,230,41,"i"],[226,42,230,42],[226,44,230,44],[226,46,230,46],[227,12,231,12],[227,16,231,18,"request"],[227,23,231,25],[227,26,231,28,"getRequests"],[227,37,231,39],[227,38,231,40,"i"],[227,39,231,41],[227,40,231,42],[228,12,232,12],[228,16,232,16,"error"],[228,21,232,21],[228,23,232,23],[229,14,233,14,"request"],[229,21,233,21],[229,22,233,22,"callback"],[229,30,233,30],[229,33,233,33,"errorList"],[229,42,233,42],[229,43,233,43],[230,14,234,14,"request"],[230,21,234,21],[230,22,234,22,"reject"],[230,28,234,28],[230,31,234,31,"error"],[230,36,234,36],[230,37,234,37],[231,14,235,14],[232,12,236,12],[233,12,237,12],[233,16,237,18,"requestResult"],[233,29,237,31],[233,32,237,34,"request"],[233,39,237,41],[233,40,237,42,"keys"],[233,44,237,46],[233,45,237,47,"map"],[233,48,237,50],[233,49,237,66,"key"],[233,52,237,69],[233,56,237,74],[233,57,238,14,"key"],[233,60,238,17],[233,62,239,14,"map"],[233,65,239,17],[233,66,239,18,"key"],[233,69,239,21],[233,70,239,22],[233,71,240,13],[233,72,240,14],[234,12,241,12,"request"],[234,19,241,19],[234,20,241,20,"callback"],[234,28,241,28],[234,31,241,31],[234,35,241,35],[234,37,241,37,"requestResult"],[234,50,241,50],[234,51,241,51],[235,12,242,12,"request"],[235,19,242,19],[235,20,242,20,"resolve"],[235,27,242,27],[235,30,242,30,"requestResult"],[235,43,242,43],[235,44,242,44],[236,10,243,10],[237,8,244,8],[237,9,245,6],[237,10,245,7],[238,6,246,4],[238,7,246,5],[239,6,248,4],[240,0,249,0],[241,0,250,0],[242,0,251,0],[243,0,252,0],[244,0,253,0],[245,0,254,0],[246,6,255,4,"multiGet"],[246,14,255,12],[246,16,255,14,"multiGet"],[246,17,255,15,"keys"],[246,21,255,19],[246,23,255,21,"callback"],[246,31,255,29],[246,36,255,34],[247,8,256,6],[247,12,256,10],[247,13,256,11,"_immediate"],[247,23,256,21],[247,25,256,23],[248,10,257,8,"_immediate"],[248,20,257,18],[248,23,257,21,"setImmediate"],[248,35,257,33],[248,36,257,34],[248,42,257,40],[249,12,258,10,"_immediate"],[249,22,258,20],[249,25,258,23],[249,29,258,27],[250,12,259,10,"AsyncStorage"],[250,24,259,22],[250,25,259,23,"flushGetRequests"],[250,41,259,39],[250,42,259,40],[250,43,259,41],[251,10,260,8],[251,11,260,9],[251,12,260,10],[252,8,261,6],[253,8,263,6],[253,12,263,12,"getRequest"],[253,22,263,36],[253,25,263,39],[254,10,264,8,"keys"],[254,14,264,12],[254,16,264,14,"keys"],[254,20,264,18],[255,10,265,8,"callback"],[255,18,265,16],[255,20,265,18,"callback"],[255,28,265,26],[256,10,266,8],[257,10,267,8,"keyIndex"],[257,18,267,16],[257,20,267,18,"_getKeys"],[257,28,267,26],[257,29,267,27,"length"],[258,8,268,6],[258,9,268,7],[259,8,270,6],[259,12,270,12,"promiseResult"],[259,25,270,25],[259,28,270,28],[259,32,270,32,"Promise"],[259,39,270,39],[259,40,271,8],[259,41,271,9,"resolve"],[259,48,271,16],[259,50,271,18,"reject"],[259,56,271,24],[259,61,271,29],[260,10,272,10,"getRequest"],[260,20,272,20],[260,21,272,21,"resolve"],[260,28,272,28],[260,31,272,31,"resolve"],[260,38,272,38],[261,10,273,10,"getRequest"],[261,20,273,20],[261,21,273,21,"reject"],[261,27,273,27],[261,30,273,30,"reject"],[261,36,273,36],[262,8,274,8],[262,9,275,6],[262,10,275,7],[263,8,277,6,"_getRequests"],[263,20,277,18],[263,21,277,19,"push"],[263,25,277,23],[263,26,277,24,"getRequest"],[263,36,277,34],[263,37,277,35],[264,8,278,6],[265,8,279,6,"keys"],[265,12,279,10],[265,13,279,11,"forEach"],[265,20,279,18],[265,21,279,20,"key"],[265,24,279,23],[265,28,279,28],[266,10,280,8],[266,14,280,12,"_getKeys"],[266,22,280,20],[266,23,280,21,"indexOf"],[266,30,280,28],[266,31,280,29,"key"],[266,34,280,32],[266,35,280,33],[266,42,280,40],[266,44,280,42],[267,12,281,10,"_getKeys"],[267,20,281,18],[267,21,281,19,"push"],[267,25,281,23],[267,26,281,24,"key"],[267,29,281,27],[267,30,281,28],[268,10,282,8],[269,8,283,6],[269,9,283,7],[269,10,283,8],[270,8,285,6],[270,15,285,13,"promiseResult"],[270,28,285,26],[271,6,286,4],[271,7,286,5],[272,6,288,4],[273,0,289,0],[274,0,290,0],[275,0,291,0],[276,0,292,0],[277,0,293,0],[278,6,294,4,"multiSet"],[278,14,294,12],[278,16,294,14,"multiSet"],[278,17,294,15,"keyValuePairs"],[278,30,294,28],[278,32,294,30,"callback"],[278,40,294,38],[278,45,294,43],[279,8,295,6],[279,12,295,6,"checkValidArgs"],[279,20,295,20],[279,21,295,20,"checkValidArgs"],[279,35,295,20],[279,37,295,21,"keyValuePairs"],[279,50,295,34],[279,52,295,36,"callback"],[279,60,295,44],[279,61,295,45],[280,8,296,6],[280,15,296,13],[280,19,296,17,"Promise"],[280,26,296,24],[280,27,296,25],[280,28,296,26,"resolve"],[280,35,296,33],[280,37,296,35,"reject"],[280,43,296,41],[280,48,296,46],[281,10,297,8,"keyValuePairs"],[281,23,297,21],[281,24,297,22,"forEach"],[281,31,297,29],[281,32,297,30,"_ref3"],[281,37,297,30],[281,41,297,48],[282,12,297,48],[282,16,297,48,"_ref4"],[282,21,297,48],[282,28,297,48,"_slicedToArray"],[282,42,297,48],[282,43,297,48,"default"],[282,50,297,48],[282,52,297,48,"_ref3"],[282,57,297,48],[283,14,297,32,"key"],[283,17,297,35],[283,20,297,35,"_ref4"],[283,25,297,35],[284,14,297,37,"value"],[284,19,297,42],[284,22,297,42,"_ref4"],[284,27,297,42],[285,12,298,10],[285,16,298,10,"checkValidInput"],[285,24,298,25],[285,25,298,25,"checkValidInput"],[285,40,298,25],[285,42,298,26,"key"],[285,45,298,29],[285,47,298,31,"value"],[285,52,298,36],[285,53,298,37],[286,10,299,8],[286,11,299,9],[286,12,299,10],[287,10,301,8,"RCTAsyncStorage"],[287,25,301,23],[287,26,301,23,"default"],[287,33,301,23],[287,34,301,24,"multiSet"],[287,42,301,32],[287,43,301,33,"keyValuePairs"],[287,56,301,46],[287,58,301,49,"errors"],[287,64,301,69],[287,68,301,74],[288,12,302,10],[288,16,302,16,"error"],[288,21,302,21],[288,24,302,24],[288,28,302,24,"convertErrors"],[288,36,302,37],[288,37,302,37,"convertErrors"],[288,50,302,37],[288,52,302,38,"errors"],[288,58,302,44],[288,59,302,45],[289,12,303,10,"callback"],[289,20,303,18],[289,23,303,21,"error"],[289,28,303,26],[289,29,303,27],[290,12,304,10],[290,16,304,14,"error"],[290,21,304,19],[290,23,304,21],[291,14,305,12,"reject"],[291,20,305,18],[291,21,305,19,"error"],[291,26,305,24],[291,27,305,25],[292,12,306,10],[292,13,306,11],[292,19,306,17],[293,14,307,12,"resolve"],[293,21,307,19],[293,22,307,20],[293,23,307,21],[294,12,308,10],[295,10,309,8],[295,11,309,9],[295,12,309,10],[296,8,310,6],[296,9,310,7],[296,10,310,8],[297,6,311,4],[297,7,311,5],[298,6,313,4],[299,0,314,0],[300,0,315,0],[301,0,316,0],[302,0,317,0],[303,6,318,4,"multiRemove"],[303,17,318,15],[303,19,318,17,"multiRemove"],[303,20,318,18,"keys"],[303,24,318,22],[303,26,318,24,"callback"],[303,34,318,32],[303,39,318,37],[304,8,319,6],[304,15,319,13],[304,19,319,17,"Promise"],[304,26,319,24],[304,27,319,25],[304,28,319,26,"resolve"],[304,35,319,33],[304,37,319,35,"reject"],[304,43,319,41],[304,48,319,46],[305,10,320,8,"keys"],[305,14,320,12],[305,15,320,13,"forEach"],[305,22,320,20],[305,23,320,22,"key"],[305,26,320,25],[305,30,320,30],[305,34,320,30,"checkValidInput"],[305,42,320,45],[305,43,320,45,"checkValidInput"],[305,58,320,45],[305,60,320,46,"key"],[305,63,320,49],[305,64,320,50],[305,65,320,51],[306,10,322,8,"RCTAsyncStorage"],[306,25,322,23],[306,26,322,23,"default"],[306,33,322,23],[306,34,322,24,"multiRemove"],[306,45,322,35],[306,46,322,36,"keys"],[306,50,322,40],[306,52,322,43,"errors"],[306,58,322,63],[306,62,322,68],[307,12,323,10],[307,16,323,16,"error"],[307,21,323,21],[307,24,323,24],[307,28,323,24,"convertErrors"],[307,36,323,37],[307,37,323,37,"convertErrors"],[307,50,323,37],[307,52,323,38,"errors"],[307,58,323,44],[307,59,323,45],[308,12,324,10,"callback"],[308,20,324,18],[308,23,324,21,"error"],[308,28,324,26],[308,29,324,27],[309,12,325,10],[309,16,325,14,"error"],[309,21,325,19],[309,23,325,21],[310,14,326,12,"reject"],[310,20,326,18],[310,21,326,19,"error"],[310,26,326,24],[310,27,326,25],[311,12,327,10],[311,13,327,11],[311,19,327,17],[312,14,328,12,"resolve"],[312,21,328,19],[312,22,328,20],[312,23,328,21],[313,12,329,10],[314,10,330,8],[314,11,330,9],[314,12,330,10],[315,8,331,6],[315,9,331,7],[315,10,331,8],[316,6,332,4],[316,7,332,5],[317,6,334,4],[318,0,335,0],[319,0,336,0],[320,0,337,0],[321,0,338,0],[322,0,339,0],[323,6,340,4,"multiMerge"],[323,16,340,14],[323,18,340,16,"multiMerge"],[323,19,340,17,"keyValuePairs"],[323,32,340,30],[323,34,340,32,"callback"],[323,42,340,40],[323,47,340,45],[324,8,341,6],[324,15,341,13],[324,19,341,17,"Promise"],[324,26,341,24],[324,27,341,25],[324,28,341,26,"resolve"],[324,35,341,33],[324,37,341,35,"reject"],[324,43,341,41],[324,48,341,46],[325,10,342,8,"RCTAsyncStorage"],[325,25,342,23],[325,26,342,23,"default"],[325,33,342,23],[325,34,342,24,"multiMerge"],[325,44,342,34],[325,45,342,35,"keyValuePairs"],[325,58,342,48],[325,60,342,51,"errors"],[325,66,342,71],[325,70,342,76],[326,12,343,10],[326,16,343,16,"error"],[326,21,343,21],[326,24,343,24],[326,28,343,24,"convertErrors"],[326,36,343,37],[326,37,343,37,"convertErrors"],[326,50,343,37],[326,52,343,38,"errors"],[326,58,343,44],[326,59,343,45],[327,12,344,10,"callback"],[327,20,344,18],[327,23,344,21,"error"],[327,28,344,26],[327,29,344,27],[328,12,345,10],[328,16,345,14,"error"],[328,21,345,19],[328,23,345,21],[329,14,346,12,"reject"],[329,20,346,18],[329,21,346,19,"error"],[329,26,346,24],[329,27,346,25],[330,12,347,10],[330,13,347,11],[330,19,347,17],[331,14,348,12,"resolve"],[331,21,348,19],[331,22,348,20],[331,23,348,21],[332,12,349,10],[333,10,350,8],[333,11,350,9],[333,12,350,10],[334,8,351,6],[334,9,351,7],[334,10,351,8],[335,6,352,4],[336,4,353,2],[336,5,353,3],[337,2,354,0],[337,3,354,1],[337,5,354,3],[337,6,354,4],[338,2,356,0],[338,6,356,0,"_default"],[338,14,356,0],[338,17,356,15,"AsyncStorage"],[338,29,356,27],[339,0,356,28],[339,3]],"functionMap":{"names":["<global>","<anonymous>","getItem","Promise$argument_0","RCTAsyncStorage.multiGet$argument_1","setItem","RCTAsyncStorage.multiSet$argument_1","removeItem","RCTAsyncStorage.multiRemove$argument_1","mergeItem","RCTAsyncStorage.multiMerge$argument_1","clear","RCTAsyncStorage.clear$argument_0","getAllKeys","RCTAsyncStorage.getAllKeys$argument_0","flushGetRequests","result.forEach$argument_0","request.keys.map$argument_0","multiGet","setImmediate$argument_0","keys.forEach$argument_0","multiSet","keyValuePairs.forEach$argument_0","multiRemove","multiMerge"],"mappings":"AAA;sBC+C;aCW;yBCC;UCI;WDU;ODE;KDC;aIO;yBFC;iDGE;SHQ;OEC;KJC;gBMO;yBJC;2CKE;SLQ;OIC;KNC;eQQ;yBNC;mDOE;SPQ;OMC;KRC;WUS;yBRC;8BSC;STQ;OQC;KVC;gBYO;yBVC;mCWC;SXQ;OUC;KZC;sBciB;QXS;0BYQ;WZG;iEasB;abG;SWI;KdE;ciBS;kCCE;SDG;QfW;SeG;mBEK;OFI;KjBG;coBQ;yBlBE;8BmBC;SnBE;gDGE;SHQ;OkBC;KpBC;iBsBO;yBpBC;qBiBC,6BjB;0CKE;SLQ;OoBC;KtBC;gBuBQ;yBrBC;kDOC;SPQ;OqBC;KvBC;CDE"},"hasCjsExports":false},"type":"js/module"}]}