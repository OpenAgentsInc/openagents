{"dependencies":[{"name":"./ExpoFontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":46,"index":46}}],"key":"7dk3JQGwGYesJt8OOG3pkBz+dtE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"loadPromises\", {\n    enumerable: true,\n    get: function () {\n      return loadPromises;\n    }\n  });\n  exports.markLoaded = markLoaded;\n  exports.isLoadedInCache = isLoadedInCache;\n  exports.isLoadedNative = isLoadedNative;\n  exports.purgeFontFamilyFromCache = purgeFontFamilyFromCache;\n  exports.purgeCache = purgeCache;\n  var _ExpoFontLoader = require(_dependencyMap[0]);\n  var ExpoFontLoader = _interopDefault(_ExpoFontLoader);\n  var loadPromises = {};\n  // cache the value on the js side for fast access to the fonts that are loaded\n  var cache = {};\n  function markLoaded(fontFamily) {\n    cache[fontFamily] = true;\n  }\n  function isLoadedInCache(fontFamily) {\n    return fontFamily in cache;\n  }\n  function isLoadedNative(fontFamily) {\n    if (isLoadedInCache(fontFamily)) {\n      return true;\n    } else {\n      var loadedNativeFonts = ExpoFontLoader.default.getLoadedFonts();\n      // NOTE(brentvatne): Bail out here if there are no loaded fonts. This\n      // is functionally equivalent to the behavior below if the returned array\n      // is empty, but this handles improper mocking of `getLoadedFonts`.\n      if (!loadedNativeFonts?.length) {\n        return false;\n      }\n      loadedNativeFonts.forEach(font => {\n        cache[font] = true;\n      });\n      return fontFamily in cache;\n    }\n  }\n  function purgeFontFamilyFromCache(fontFamily) {\n    delete cache[fontFamily];\n  }\n  function purgeCache() {\n    cache = {};\n  }\n});","lineCount":57,"map":[[12,2,2,0,"Object"],[12,8,2,0],[12,9,2,0,"defineProperty"],[12,23,2,0],[12,24,2,0,"exports"],[12,31,2,0],[13,4,2,0,"enumerable"],[13,14,2,0],[14,4,2,0,"get"],[14,7,2,0],[14,18,2,0,"get"],[14,19,2,0],[15,6,2,0],[15,13,2,0,"loadPromises"],[15,25,2,0],[16,4,2,0],[17,2,2,0],[18,2,5,0,"exports"],[18,9,5,0],[18,10,5,0,"markLoaded"],[18,20,5,0],[18,23,5,0,"markLoaded"],[18,33,5,0],[19,2,8,0,"exports"],[19,9,8,0],[19,10,8,0,"isLoadedInCache"],[19,25,8,0],[19,28,8,0,"isLoadedInCache"],[19,43,8,0],[20,2,11,0,"exports"],[20,9,11,0],[20,10,11,0,"isLoadedNative"],[20,24,11,0],[20,27,11,0,"isLoadedNative"],[20,41,11,0],[21,2,29,0,"exports"],[21,9,29,0],[21,10,29,0,"purgeFontFamilyFromCache"],[21,34,29,0],[21,37,29,0,"purgeFontFamilyFromCache"],[21,61,29,0],[22,2,32,0,"exports"],[22,9,32,0],[22,10,32,0,"purgeCache"],[22,20,32,0],[22,23,32,0,"purgeCache"],[22,33,32,0],[23,2,1,0],[23,6,1,0,"_ExpoFontLoader"],[23,21,1,0],[23,24,1,0,"require"],[23,31,1,0],[23,32,1,0,"_dependencyMap"],[23,46,1,0],[24,2,1,0],[24,6,1,0,"ExpoFontLoader"],[24,20,1,0],[24,23,1,0,"_interopDefault"],[24,38,1,0],[24,39,1,0,"_ExpoFontLoader"],[24,54,1,0],[25,2,2,7],[25,6,2,13,"loadPromises"],[25,18,2,25],[25,21,2,28],[25,22,2,29],[25,23,2,30],[26,2,3,0],[27,2,4,0],[27,6,4,4,"cache"],[27,11,4,9],[27,14,4,12],[27,15,4,13],[27,16,4,14],[28,2,5,7],[28,11,5,16,"markLoaded"],[28,21,5,26,"markLoaded"],[28,22,5,27,"fontFamily"],[28,32,5,37],[28,34,5,39],[29,4,6,4,"cache"],[29,9,6,9],[29,10,6,10,"fontFamily"],[29,20,6,20],[29,21,6,21],[29,24,6,24],[29,28,6,28],[30,2,7,0],[31,2,8,7],[31,11,8,16,"isLoadedInCache"],[31,26,8,31,"isLoadedInCache"],[31,27,8,32,"fontFamily"],[31,37,8,42],[31,39,8,44],[32,4,9,4],[32,11,9,11,"fontFamily"],[32,21,9,21],[32,25,9,25,"cache"],[32,30,9,30],[33,2,10,0],[34,2,11,7],[34,11,11,16,"isLoadedNative"],[34,25,11,30,"isLoadedNative"],[34,26,11,31,"fontFamily"],[34,36,11,41],[34,38,11,43],[35,4,12,4],[35,8,12,8,"isLoadedInCache"],[35,23,12,23],[35,24,12,24,"fontFamily"],[35,34,12,34],[35,35,12,35],[35,37,12,37],[36,6,13,8],[36,13,13,15],[36,17,13,19],[37,4,14,4],[37,5,14,5],[37,11,15,9],[38,6,16,8],[38,10,16,14,"loadedNativeFonts"],[38,27,16,31],[38,30,16,34,"ExpoFontLoader"],[38,44,16,48],[38,45,16,48,"default"],[38,52,16,48],[38,53,16,49,"getLoadedFonts"],[38,67,16,63],[38,68,16,64],[38,69,16,65],[39,6,17,8],[40,6,18,8],[41,6,19,8],[42,6,20,8],[42,10,20,12],[42,11,20,13,"loadedNativeFonts"],[42,28,20,30],[42,30,20,32,"length"],[42,36,20,38],[42,38,20,40],[43,8,21,12],[43,15,21,19],[43,20,21,24],[44,6,22,8],[45,6,23,8,"loadedNativeFonts"],[45,23,23,25],[45,24,23,26,"forEach"],[45,31,23,33],[45,32,23,35,"font"],[45,36,23,39],[45,40,23,44],[46,8,24,12,"cache"],[46,13,24,17],[46,14,24,18,"font"],[46,18,24,22],[46,19,24,23],[46,22,24,26],[46,26,24,30],[47,6,25,8],[47,7,25,9],[47,8,25,10],[48,6,26,8],[48,13,26,15,"fontFamily"],[48,23,26,25],[48,27,26,29,"cache"],[48,32,26,34],[49,4,27,4],[50,2,28,0],[51,2,29,7],[51,11,29,16,"purgeFontFamilyFromCache"],[51,35,29,40,"purgeFontFamilyFromCache"],[51,36,29,41,"fontFamily"],[51,46,29,51],[51,48,29,53],[52,4,30,4],[52,11,30,11,"cache"],[52,16,30,16],[52,17,30,17,"fontFamily"],[52,27,30,27],[52,28,30,28],[53,2,31,0],[54,2,32,7],[54,11,32,16,"purgeCache"],[54,21,32,26,"purgeCache"],[54,22,32,26],[54,24,32,29],[55,4,33,4,"cache"],[55,9,33,9],[55,12,33,12],[55,13,33,13],[55,14,33,14],[56,2,34,0],[57,0,34,1],[57,3]],"functionMap":{"names":["<global>","markLoaded","isLoadedInCache","isLoadedNative","loadedNativeFonts.forEach$argument_0","purgeFontFamilyFromCache","purgeCache"],"mappings":"AAA;OCI;CDE;OEC;CFE;OGC;kCCY;SDE;CHG;OKC;CLE;OMC;CNE"},"hasCjsExports":false},"type":"js/module"}]}