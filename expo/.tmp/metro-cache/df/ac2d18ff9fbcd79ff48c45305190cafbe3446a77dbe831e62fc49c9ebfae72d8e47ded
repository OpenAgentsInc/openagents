{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.checkValidArgs = checkValidArgs;\n  exports.checkValidInput = checkValidInput;\n  exports.convertError = convertError;\n  exports.convertErrors = convertErrors;\n  function checkValidArgs(keyValuePairs, callback) {\n    if (!Array.isArray(keyValuePairs) || keyValuePairs.length === 0 || !Array.isArray(keyValuePairs[0])) {\n      throw new Error(\"[AsyncStorage] Expected array of key-value pairs as first argument to multiSet\");\n    }\n    if (callback && typeof callback !== \"function\") {\n      if (Array.isArray(callback)) {\n        throw new Error(\"[AsyncStorage] Expected function as second argument to multiSet. Did you forget to wrap key-value pairs in an array for the first argument?\");\n      }\n      throw new Error(\"[AsyncStorage] Expected function as second argument to multiSet\");\n    }\n  }\n  function checkValidInput() {\n    for (var _len = arguments.length, input = new Array(_len), _key = 0; _key < _len; _key++) {\n      input[_key] = arguments[_key];\n    }\n    var key = input[0],\n      value = input[1];\n    if (typeof key !== \"string\") {\n      // eslint-disable-next-line no-console\n      console.warn(`[AsyncStorage] Using ${typeof key} type for key is not supported. This can lead to unexpected behavior/errors. Use string instead.\\nKey passed: ${key}\\n`);\n    }\n    if (input.length > 1 && typeof value !== \"string\") {\n      if (value == null) {\n        throw new Error(`[AsyncStorage] Passing null/undefined as value is not supported. If you want to remove value, Use .removeItem method instead.\\nPassed value: ${value}\\nPassed key: ${key}\\n`);\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(`[AsyncStorage] The value for key \"${key}\" is not a string. This can lead to unexpected behavior/errors. Consider stringifying it.\\nPassed value: ${value}\\nPassed key: ${key}\\n`);\n      }\n    }\n  }\n  function convertError(error) {\n    if (!error) {\n      return null;\n    }\n    var out = new Error(error.message);\n    out[\"key\"] = error.key;\n    return out;\n  }\n  function convertErrors(errs) {\n    var errors = ensureArray(errs);\n    return errors ? errors.map(e => convertError(e)) : null;\n  }\n  function ensureArray(e) {\n    if (Array.isArray(e)) {\n      return e.length === 0 ? null : e;\n    } else if (e) {\n      return [e];\n    } else {\n      return null;\n    }\n  }\n});","lineCount":62,"map":[[7,2,3,0,"exports"],[7,9,3,0],[7,10,3,0,"checkValidArgs"],[7,24,3,0],[7,27,3,0,"checkValidArgs"],[7,41,3,0],[8,2,30,0,"exports"],[8,9,30,0],[8,10,30,0,"checkValidInput"],[8,25,30,0],[8,28,30,0,"checkValidInput"],[8,43,30,0],[9,2,54,0,"exports"],[9,9,54,0],[9,10,54,0,"convertError"],[9,22,54,0],[9,25,54,0,"convertError"],[9,37,54,0],[10,2,64,0,"exports"],[10,9,64,0],[10,10,64,0,"convertErrors"],[10,23,64,0],[10,26,64,0,"convertErrors"],[10,39,64,0],[11,2,3,7],[11,11,3,16,"checkValidArgs"],[11,25,3,30,"checkValidArgs"],[11,26,4,2,"keyValuePairs"],[11,39,4,35],[11,41,5,2,"callback"],[11,49,5,19],[11,51,6,2],[12,4,7,2],[12,8,8,4],[12,9,8,5,"Array"],[12,14,8,10],[12,15,8,11,"isArray"],[12,22,8,18],[12,23,8,19,"keyValuePairs"],[12,36,8,32],[12,37,8,33],[12,41,9,4,"keyValuePairs"],[12,54,9,17],[12,55,9,18,"length"],[12,61,9,24],[12,66,9,29],[12,67,9,30],[12,71,10,4],[12,72,10,5,"Array"],[12,77,10,10],[12,78,10,11,"isArray"],[12,85,10,18],[12,86,10,19,"keyValuePairs"],[12,99,10,32],[12,100,10,33],[12,101,10,34],[12,102,10,35],[12,103,10,36],[12,105,11,4],[13,6,12,4],[13,12,12,10],[13,16,12,14,"Error"],[13,21,12,19],[13,22,13,6],[13,102,14,4],[13,103,14,5],[14,4,15,2],[15,4,17,2],[15,8,17,6,"callback"],[15,16,17,14],[15,20,17,18],[15,27,17,25,"callback"],[15,35,17,33],[15,40,17,38],[15,50,17,48],[15,52,17,50],[16,6,18,4],[16,10,18,8,"Array"],[16,15,18,13],[16,16,18,14,"isArray"],[16,23,18,21],[16,24,18,22,"callback"],[16,32,18,30],[16,33,18,31],[16,35,18,33],[17,8,19,6],[17,14,19,12],[17,18,19,16,"Error"],[17,23,19,21],[17,24,20,8],[17,165,21,6],[17,166,21,7],[18,6,22,4],[19,6,24,4],[19,12,24,10],[19,16,24,14,"Error"],[19,21,24,19],[19,22,25,6],[19,87,26,4],[19,88,26,5],[20,4,27,2],[21,2,28,0],[22,2,30,7],[22,11,30,16,"checkValidInput"],[22,26,30,31,"checkValidInput"],[22,27,30,31],[22,29,30,53],[23,4,30,53],[23,13,30,53,"_len"],[23,17,30,53],[23,20,30,53,"arguments"],[23,29,30,53],[23,30,30,53,"length"],[23,36,30,53],[23,38,30,35,"input"],[23,43,30,40],[23,50,30,40,"Array"],[23,55,30,40],[23,56,30,40,"_len"],[23,60,30,40],[23,63,30,40,"_key"],[23,67,30,40],[23,73,30,40,"_key"],[23,77,30,40],[23,80,30,40,"_len"],[23,84,30,40],[23,86,30,40,"_key"],[23,90,30,40],[24,6,30,35,"input"],[24,11,30,40],[24,12,30,40,"_key"],[24,16,30,40],[24,20,30,40,"arguments"],[24,29,30,40],[24,30,30,40,"_key"],[24,34,30,40],[25,4,30,40],[26,4,31,2],[26,8,31,9,"key"],[26,11,31,12],[26,14,31,23,"input"],[26,19,31,28],[27,6,31,14,"value"],[27,11,31,19],[27,14,31,23,"input"],[27,19,31,28],[28,4,33,2],[28,8,33,6],[28,15,33,13,"key"],[28,18,33,16],[28,23,33,21],[28,31,33,29],[28,33,33,31],[29,6,34,4],[30,6,35,4,"console"],[30,13,35,11],[30,14,35,12,"warn"],[30,18,35,16],[30,19,36,6],[30,43,36,30],[30,50,36,37,"key"],[30,53,36,40],[30,166,36,153,"key"],[30,169,36,156],[30,173,37,4],[30,174,37,5],[31,4,38,2],[32,4,40,2],[32,8,40,6,"input"],[32,13,40,11],[32,14,40,12,"length"],[32,20,40,18],[32,23,40,21],[32,24,40,22],[32,28,40,26],[32,35,40,33,"value"],[32,40,40,38],[32,45,40,43],[32,53,40,51],[32,55,40,53],[33,6,41,4],[33,10,41,8,"value"],[33,15,41,13],[33,19,41,17],[33,23,41,21],[33,25,41,23],[34,8,42,6],[34,14,42,12],[34,18,42,16,"Error"],[34,23,42,21],[34,24,43,8],[34,168,43,152,"value"],[34,173,43,157],[34,190,43,174,"key"],[34,193,43,177],[34,197,44,6],[34,198,44,7],[35,6,45,4],[35,7,45,5],[35,13,45,11],[36,8,46,6],[37,8,47,6,"console"],[37,15,47,13],[37,16,47,14,"warn"],[37,20,47,18],[37,21,48,8],[37,58,48,45,"key"],[37,61,48,48],[37,169,48,156,"value"],[37,174,48,161],[37,191,48,178,"key"],[37,194,48,181],[37,198,49,6],[37,199,49,7],[38,6,50,4],[39,4,51,2],[40,2,52,0],[41,2,54,7],[41,11,54,16,"convertError"],[41,23,54,28,"convertError"],[41,24,54,29,"error"],[41,29,54,46],[41,31,54,62],[42,4,55,2],[42,8,55,6],[42,9,55,7,"error"],[42,14,55,12],[42,16,55,14],[43,6,56,4],[43,13,56,11],[43,17,56,15],[44,4,57,2],[45,4,59,2],[45,8,59,8,"out"],[45,11,59,11],[45,14,59,14],[45,18,59,18,"Error"],[45,23,59,23],[45,24,59,24,"error"],[45,29,59,29],[45,30,59,30,"message"],[45,37,59,37],[45,38,59,59],[46,4,60,2,"out"],[46,7,60,5],[46,8,60,6],[46,13,60,11],[46,14,60,12],[46,17,60,15,"error"],[46,22,60,20],[46,23,60,21,"key"],[46,26,60,24],[47,4,61,2],[47,11,61,9,"out"],[47,14,61,12],[48,2,62,0],[49,2,64,7],[49,11,64,16,"convertErrors"],[49,24,64,29,"convertErrors"],[49,25,65,2,"errs"],[49,29,65,20],[49,31,66,38],[50,4,67,2],[50,8,67,8,"errors"],[50,14,67,14],[50,17,67,17,"ensureArray"],[50,28,67,28],[50,29,67,29,"errs"],[50,33,67,33],[50,34,67,34],[51,4,68,2],[51,11,68,9,"errors"],[51,17,68,15],[51,20,68,18,"errors"],[51,26,68,24],[51,27,68,25,"map"],[51,30,68,28],[51,31,68,30,"e"],[51,32,68,31],[51,36,68,36,"convertError"],[51,48,68,48],[51,49,68,49,"e"],[51,50,68,50],[51,51,68,51],[51,52,68,52],[51,55,68,55],[51,59,68,59],[52,2,69,0],[53,2,71,0],[53,11,71,9,"ensureArray"],[53,22,71,20,"ensureArray"],[53,23,71,21,"e"],[53,24,71,48],[53,26,71,70],[54,4,72,2],[54,8,72,6,"Array"],[54,13,72,11],[54,14,72,12,"isArray"],[54,21,72,19],[54,22,72,20,"e"],[54,23,72,21],[54,24,72,22],[54,26,72,24],[55,6,73,4],[55,13,73,11,"e"],[55,14,73,12],[55,15,73,13,"length"],[55,21,73,19],[55,26,73,24],[55,27,73,25],[55,30,73,28],[55,34,73,32],[55,37,73,35,"e"],[55,38,73,36],[56,4,74,2],[56,5,74,3],[56,11,74,9],[56,15,74,13,"e"],[56,16,74,14],[56,18,74,16],[57,6,75,4],[57,13,75,11],[57,14,75,12,"e"],[57,15,75,13],[57,16,75,14],[58,4,76,2],[58,5,76,3],[58,11,76,9],[59,6,77,4],[59,13,77,11],[59,17,77,15],[60,4,78,2],[61,2,79,0],[62,0,79,1],[62,3]],"functionMap":{"names":["<global>","checkValidArgs","checkValidInput","convertError","convertErrors","errors.map$argument_0","ensureArray"],"mappings":"AAA;OCE;CDyB;OEE;CFsB;OGE;CHQ;OIE;6BCI,sBD;CJC;AME;CNQ"},"hasCjsExports":false},"type":"js/module"}]}