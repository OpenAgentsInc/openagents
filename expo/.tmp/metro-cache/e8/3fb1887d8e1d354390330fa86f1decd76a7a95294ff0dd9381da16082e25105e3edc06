{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n  // modes. For example, to parse bold/italic only.\n\n  'use strict';\n\n  module.exports = {\n    options: {\n      html: false,\n      // Enable HTML tags in source\n      xhtmlOut: false,\n      // Use '/' to close single tags (<br />)\n      breaks: false,\n      // Convert '\\n' in paragraphs into <br>\n      langPrefix: 'language-',\n      // CSS language prefix for fenced blocks\n      linkify: false,\n      // autoconvert URL-like texts to links\n\n      // Enable some language-neutral replacements + quotes beautification\n      typographer: false,\n      // Double + single quotes replacement pairs, when typographer enabled,\n      // and smartquotes on. Could be either a String or an Array.\n      //\n      // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n      // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n      quotes: '\\u201c\\u201d\\u2018\\u2019',\n      /* “”‘’ */\n\n      // Highlighter function. Should return escaped HTML,\n      // or '' if the source string is not changed and should be escaped externaly.\n      // If result starts with <pre... internal wrapper is skipped.\n      //\n      // function (/*str, lang*/) { return ''; }\n      //\n      highlight: null,\n      maxNesting: 20 // Internal protection, recursion limit\n    },\n    components: {\n      core: {\n        rules: ['normalize', 'block', 'inline']\n      },\n      block: {\n        rules: ['paragraph']\n      },\n      inline: {\n        rules: ['text'],\n        rules2: ['balance_pairs', 'text_collapse']\n      }\n    }\n  };\n});","lineCount":52,"map":[[2,2,1,0],[3,2,2,0],[5,2,4,0],[5,14,4,12],[7,2,7,0,"module"],[7,8,7,6],[7,9,7,7,"exports"],[7,16,7,14],[7,19,7,17],[8,4,8,2,"options"],[8,11,8,9],[8,13,8,11],[9,6,9,4,"html"],[9,10,9,8],[9,12,9,18],[9,17,9,23],[10,6,9,32],[11,6,10,4,"xhtmlOut"],[11,14,10,12],[11,16,10,18],[11,21,10,23],[12,6,10,32],[13,6,11,4,"breaks"],[13,12,11,10],[13,14,11,18],[13,19,11,23],[14,6,11,32],[15,6,12,4,"langPrefix"],[15,16,12,14],[15,18,12,18],[15,29,12,29],[16,6,12,32],[17,6,13,4,"linkify"],[17,13,13,11],[17,15,13,18],[17,20,13,23],[18,6,13,32],[20,6,15,4],[21,6,16,4,"typographer"],[21,17,16,15],[21,19,16,18],[21,24,16,23],[22,6,18,4],[23,6,19,4],[24,6,20,4],[25,6,21,4],[26,6,22,4],[27,6,23,4,"quotes"],[27,12,23,10],[27,14,23,12],[27,40,23,38],[28,6,23,40],[30,6,25,4],[31,6,26,4],[32,6,27,4],[33,6,28,4],[34,6,29,4],[35,6,30,4],[36,6,31,4,"highlight"],[36,15,31,13],[36,17,31,15],[36,21,31,19],[37,6,33,4,"maxNesting"],[37,16,33,14],[37,18,33,18],[37,20,33,20],[37,21,33,32],[38,4,34,2],[38,5,34,3],[39,4,36,2,"components"],[39,14,36,12],[39,16,36,14],[40,6,38,4,"core"],[40,10,38,8],[40,12,38,10],[41,8,39,6,"rules"],[41,13,39,11],[41,15,39,13],[41,16,40,8],[41,27,40,19],[41,29,41,8],[41,36,41,15],[41,38,42,8],[41,46,42,16],[42,6,44,4],[42,7,44,5],[43,6,46,4,"block"],[43,11,46,9],[43,13,46,11],[44,8,47,6,"rules"],[44,13,47,11],[44,15,47,13],[44,16,48,8],[44,27,48,19],[45,6,50,4],[45,7,50,5],[46,6,52,4,"inline"],[46,12,52,10],[46,14,52,12],[47,8,53,6,"rules"],[47,13,53,11],[47,15,53,13],[47,16,54,8],[47,22,54,14],[47,23,55,7],[48,8,56,6,"rules2"],[48,14,56,12],[48,16,56,14],[48,17,57,8],[48,32,57,23],[48,34,58,8],[48,49,58,23],[49,6,60,4],[50,4,61,2],[51,2,62,0],[51,3,62,1],[52,0,62,2],[52,3]],"functionMap":{"names":["<global>"],"mappings":"AAA"},"hasCjsExports":true},"type":"js/module"}]}