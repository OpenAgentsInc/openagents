{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./ExpoFontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":79},"end":{"line":2,"column":46,"index":125}}],"key":"7dk3JQGwGYesJt8OOG3pkBz+dtE=","exportNames":["*"],"imports":1}},{"name":"./Font.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":126},"end":{"line":3,"column":43,"index":169}}],"key":"iwvcxaVgfIXdww6iPrKSgtcaZy8=","exportNames":["*"],"imports":1}},{"name":"./FontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":170},"end":{"line":4,"column":70,"index":240}}],"key":"ubgLNxOkixzH8pVapAwap9wQ8XU=","exportNames":["*"],"imports":1}},{"name":"./memory","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}}],"key":"wlrMBDc1MVhnZOig0xhYu83J328=","exportNames":["*"],"imports":1}},{"name":"./server","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":366},"end":{"line":6,"column":46,"index":412}}],"key":"QinwpQMs5c8GY+myVdgXEzx55Tw=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.isLoaded = isLoaded;\n  exports.getLoadedFonts = getLoadedFonts;\n  exports.isLoading = isLoading;\n  exports.loadAsync = loadAsync;\n  exports.unloadAllAsync = unloadAllAsync;\n  exports.unloadAsync = unloadAsync;\n  Object.defineProperty(exports, \"FontDisplay\", {\n    enumerable: true,\n    get: function () {\n      return _FontTypes.FontDisplay;\n    }\n  });\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0]);\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _expoModulesCore = require(_dependencyMap[1]);\n  var _ExpoFontLoader = require(_dependencyMap[2]);\n  var ExpoFontLoader = _interopDefault(_ExpoFontLoader);\n  var _FontTypes = require(_dependencyMap[3]);\n  var _FontLoader = require(_dependencyMap[4]);\n  var _memory = require(_dependencyMap[5]);\n  var _server = require(_dependencyMap[6]);\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` has finished loading.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @return Returns `true` if the font has fully loaded.\n   */\n  function isLoaded(fontFamily) {\n    return (0, _memory.isLoadedNative)(fontFamily);\n  }\n  /**\n   * Synchronously get all the fonts that have been loaded.\n   * This includes fonts that were bundled at build time using the config plugin, as well as those loaded at runtime using `loadAsync`.\n   *\n   * @returns Returns array of strings which you can use as `fontFamily` [style prop](https://reactnative.dev/docs/text#style).\n   */\n  function getLoadedFonts() {\n    return ExpoFontLoader.default.getLoadedFonts();\n  }\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` is still being loaded.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @returns Returns `true` if the font is still loading.\n   */\n  function isLoading(fontFamily) {\n    return fontFamily in _memory.loadPromises;\n  }\n  // @needsAudit\n  /**\n   * An efficient method for loading fonts from static or remote resources which can then be used\n   * with the platform's native text elements. In the browser, this generates a `@font-face` block in\n   * a shared style sheet for fonts. No CSS is needed to use this method.\n   *\n   * > **Note**: We recommend using the [config plugin](#configuration-in-app-config) instead whenever possible.\n   *\n   * @param fontFamilyOrFontMap String or map of values that can be used as the `fontFamily` [style prop](https://reactnative.dev/docs/text#style)\n   * with React Native `Text` elements.\n   * @param source The font asset that should be loaded into the `fontFamily` namespace.\n   *\n   * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n   * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n   */\n  function loadAsync(fontFamilyOrFontMap, source) {\n    // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n    // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n    // standard Expo SDK style guide.\n    var isServer = false;\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (source) {\n        return Promise.reject(new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));\n      }\n      var fontMap = fontFamilyOrFontMap;\n      var names = Object.keys(fontMap);\n      return Promise.all(names.map(name => loadFontInNamespaceAsync(name, fontMap[name]))).then(() => {});\n    }\n    return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n  }\n  function loadFontInNamespaceAsync(_x, _x2) {\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unloads all the custom fonts. This is used for testing.\n   * @hidden\n   */\n  function _loadFontInNamespaceAsync() {\n    _loadFontInNamespaceAsync = (0, _asyncToGenerator.default)(function* (fontFamily, source) {\n      if (!source) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n      }\n      // we consult the native module to see if the font is already loaded\n      // this is slower than checking the cache but can help avoid loading the same font n times\n      if (isLoaded(fontFamily)) {\n        return;\n      }\n      if (_memory.loadPromises.hasOwnProperty(fontFamily)) {\n        return _memory.loadPromises[fontFamily];\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      var asset = (0, _FontLoader.getAssetForSource)(source);\n      _memory.loadPromises[fontFamily] = (0, _asyncToGenerator.default)(function* () {\n        try {\n          yield (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);\n          (0, _memory.markLoaded)(fontFamily);\n        } finally {\n          delete _memory.loadPromises[fontFamily];\n        }\n      })();\n      yield _memory.loadPromises[fontFamily];\n    });\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function unloadAllAsync() {\n    return _unloadAllAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unload custom fonts matching the `fontFamily`s and display values provided.\n   * This is used for testing.\n   *\n   * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n   * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n   * the custom font originally.\n   * @hidden\n   */\n  function _unloadAllAsync() {\n    _unloadAllAsync = (0, _asyncToGenerator.default)(function* () {\n      if (!ExpoFontLoader.default.unloadAllAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n      }\n      if (Object.keys(_memory.loadPromises).length) {\n        throw new _expoModulesCore.CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(_memory.loadPromises).join(', ')}`);\n      }\n      (0, _memory.purgeCache)();\n      yield ExpoFontLoader.default.unloadAllAsync();\n    });\n    return _unloadAllAsync.apply(this, arguments);\n  }\n  function unloadAsync(_x3, _x4) {\n    return _unloadAsync.apply(this, arguments);\n  }\n  function _unloadAsync() {\n    _unloadAsync = (0, _asyncToGenerator.default)(function* (fontFamilyOrFontMap, options) {\n      if (!ExpoFontLoader.default.unloadAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n      }\n      if (typeof fontFamilyOrFontMap === 'object') {\n        if (options) {\n          throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n        }\n        var fontMap = fontFamilyOrFontMap;\n        var names = Object.keys(fontMap);\n        yield Promise.all(names.map(name => unloadFontInNamespaceAsync(name, fontMap[name])));\n        return;\n      }\n      return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n    });\n    return _unloadAsync.apply(this, arguments);\n  }\n  function unloadFontInNamespaceAsync(_x5, _x6) {\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function _unloadFontInNamespaceAsync() {\n    _unloadFontInNamespaceAsync = (0, _asyncToGenerator.default)(function* (fontFamily, options) {\n      if (!isLoaded(fontFamily)) {\n        return;\n      } else {\n        (0, _memory.purgeFontFamilyFromCache)(fontFamily);\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      if (!fontFamily) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n      }\n      if (!ExpoFontLoader.default.unloadAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n      }\n      yield ExpoFontLoader.default.unloadAsync(fontFamily, options);\n    });\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n});","lineCount":199,"map":[[12,2,14,0,"exports"],[12,9,14,0],[12,10,14,0,"isLoaded"],[12,18,14,0],[12,21,14,0,"isLoaded"],[12,29,14,0],[13,2,29,0,"exports"],[13,9,29,0],[13,10,29,0,"getLoadedFonts"],[13,24,29,0],[13,27,29,0,"getLoadedFonts"],[13,41,29,0],[14,2,39,0,"exports"],[14,9,39,0],[14,10,39,0,"isLoading"],[14,19,39,0],[14,22,39,0,"isLoading"],[14,31,39,0],[15,2,57,0,"exports"],[15,9,57,0],[15,10,57,0,"loadAsync"],[15,19,57,0],[15,22,57,0,"loadAsync"],[15,31,57,0],[16,2,113,0,"exports"],[16,9,113,0],[16,10,113,0,"unloadAllAsync"],[16,24,113,0],[16,27,113,0,"unloadAllAsync"],[16,41,113,0],[17,2,133,0,"exports"],[17,9,133,0],[17,10,133,0,"unloadAsync"],[17,21,133,0],[17,24,133,0,"unloadAsync"],[17,35,133,0],[18,2,167,0,"Object"],[18,8,167,0],[18,9,167,0,"defineProperty"],[18,23,167,0],[18,24,167,0,"exports"],[18,31,167,0],[19,4,167,0,"enumerable"],[19,14,167,0],[20,4,167,0,"get"],[20,7,167,0],[20,18,167,0,"get"],[20,19,167,0],[21,6,167,0],[21,13,167,9,"FontDisplay"],[21,23,167,20],[21,24,167,20,"FontDisplay"],[21,35,167,20],[22,4,167,20],[23,2,167,20],[24,2,167,23],[24,6,167,23,"_babelRuntimeHelpersAsyncToGenerator"],[24,42,167,23],[24,45,167,23,"require"],[24,52,167,23],[24,53,167,23,"_dependencyMap"],[24,67,167,23],[25,2,167,23],[25,6,167,23,"_asyncToGenerator"],[25,23,167,23],[25,26,167,23,"_interopDefault"],[25,41,167,23],[25,42,167,23,"_babelRuntimeHelpersAsyncToGenerator"],[25,78,167,23],[26,2,1,0],[26,6,1,0,"_expoModulesCore"],[26,22,1,0],[26,25,1,0,"require"],[26,32,1,0],[26,33,1,0,"_dependencyMap"],[26,47,1,0],[27,2,2,0],[27,6,2,0,"_ExpoFontLoader"],[27,21,2,0],[27,24,2,0,"require"],[27,31,2,0],[27,32,2,0,"_dependencyMap"],[27,46,2,0],[28,2,2,0],[28,6,2,0,"ExpoFontLoader"],[28,20,2,0],[28,23,2,0,"_interopDefault"],[28,38,2,0],[28,39,2,0,"_ExpoFontLoader"],[28,54,2,0],[29,2,3,0],[29,6,3,0,"_FontTypes"],[29,16,3,0],[29,19,3,0,"require"],[29,26,3,0],[29,27,3,0,"_dependencyMap"],[29,41,3,0],[30,2,4,0],[30,6,4,0,"_FontLoader"],[30,17,4,0],[30,20,4,0,"require"],[30,27,4,0],[30,28,4,0,"_dependencyMap"],[30,42,4,0],[31,2,5,0],[31,6,5,0,"_memory"],[31,13,5,0],[31,16,5,0,"require"],[31,23,5,0],[31,24,5,0,"_dependencyMap"],[31,38,5,0],[32,2,6,0],[32,6,6,0,"_server"],[32,13,6,0],[32,16,6,0,"require"],[32,23,6,0],[32,24,6,0,"_dependencyMap"],[32,38,6,0],[33,2,7,0],[34,2,8,0],[35,0,9,0],[36,0,10,0],[37,0,11,0],[38,0,12,0],[39,0,13,0],[40,2,14,7],[40,11,14,16,"isLoaded"],[40,19,14,24,"isLoaded"],[40,20,14,25,"fontFamily"],[40,30,14,35],[40,32,14,37],[41,4,21,4],[41,11,21,11],[41,15,21,11,"isLoadedNative"],[41,22,21,25],[41,23,21,25,"isLoadedNative"],[41,37,21,25],[41,39,21,26,"fontFamily"],[41,49,21,36],[41,50,21,37],[42,2,22,0],[43,2,23,0],[44,0,24,0],[45,0,25,0],[46,0,26,0],[47,0,27,0],[48,0,28,0],[49,2,29,7],[49,11,29,16,"getLoadedFonts"],[49,25,29,30,"getLoadedFonts"],[49,26,29,30],[49,28,29,33],[50,4,30,4],[50,11,30,11,"ExpoFontLoader"],[50,25,30,25],[50,26,30,25,"default"],[50,33,30,25],[50,34,30,26,"getLoadedFonts"],[50,48,30,40],[50,49,30,41],[50,50,30,42],[51,2,31,0],[52,2,32,0],[53,2,33,0],[54,0,34,0],[55,0,35,0],[56,0,36,0],[57,0,37,0],[58,0,38,0],[59,2,39,7],[59,11,39,16,"isLoading"],[59,20,39,25,"isLoading"],[59,21,39,26,"fontFamily"],[59,31,39,36],[59,33,39,38],[60,4,40,4],[60,11,40,11,"fontFamily"],[60,21,40,21],[60,25,40,25,"loadPromises"],[60,32,40,37],[60,33,40,37,"loadPromises"],[60,45,40,37],[61,2,41,0],[62,2,42,0],[63,2,43,0],[64,0,44,0],[65,0,45,0],[66,0,46,0],[67,0,47,0],[68,0,48,0],[69,0,49,0],[70,0,50,0],[71,0,51,0],[72,0,52,0],[73,0,53,0],[74,0,54,0],[75,0,55,0],[76,0,56,0],[77,2,57,7],[77,11,57,16,"loadAsync"],[77,20,57,25,"loadAsync"],[77,21,57,26,"fontFamilyOrFontMap"],[77,40,57,45],[77,42,57,47,"source"],[77,48,57,53],[77,50,57,55],[78,4,58,4],[79,4,59,4],[80,4,60,4],[81,4,61,4],[81,8,61,10,"isServer"],[81,16,61,18],[81,24,61,75],[82,4,62,4],[82,8,62,8],[82,15,62,15,"fontFamilyOrFontMap"],[82,34,62,34],[82,39,62,39],[82,47,62,47],[82,49,62,49],[83,6,63,8],[83,10,63,12,"source"],[83,16,63,18],[83,18,63,20],[84,8,64,12],[84,15,64,19,"Promise"],[84,22,64,26],[84,23,64,27,"reject"],[84,29,64,33],[84,30,64,34],[84,34,64,38,"CodedError"],[84,50,64,48],[84,51,64,48,"CodedError"],[84,61,64,48],[84,62,64,49],[84,76,64,63],[84,78,64,65],[84,132,64,119,"source"],[84,138,64,125],[84,244,64,231],[84,245,64,232],[84,246,64,233],[85,6,65,8],[86,6,66,8],[86,10,66,14,"fontMap"],[86,17,66,21],[86,20,66,24,"fontFamilyOrFontMap"],[86,39,66,43],[87,6,67,8],[87,10,67,14,"names"],[87,15,67,19],[87,18,67,22,"Object"],[87,24,67,28],[87,25,67,29,"keys"],[87,29,67,33],[87,30,67,34,"fontMap"],[87,37,67,41],[87,38,67,42],[88,6,72,8],[88,13,72,15,"Promise"],[88,20,72,22],[88,21,72,23,"all"],[88,24,72,26],[88,25,72,27,"names"],[88,30,72,32],[88,31,72,33,"map"],[88,34,72,36],[88,35,72,38,"name"],[88,39,72,42],[88,43,72,47,"loadFontInNamespaceAsync"],[88,67,72,71],[88,68,72,72,"name"],[88,72,72,76],[88,74,72,78,"fontMap"],[88,81,72,85],[88,82,72,86,"name"],[88,86,72,90],[88,87,72,91],[88,88,72,92],[88,89,72,93],[88,90,72,94],[88,91,72,95,"then"],[88,95,72,99],[88,96,72,100],[88,102,72,106],[88,103,72,108],[88,104,72,109],[88,105,72,110],[89,4,73,4],[90,4,78,4],[90,11,78,11,"loadFontInNamespaceAsync"],[90,35,78,35],[90,36,78,36,"fontFamilyOrFontMap"],[90,55,78,55],[90,57,78,57,"source"],[90,63,78,63],[90,64,78,64],[91,2,79,0],[92,2,79,1],[92,11,80,15,"loadFontInNamespaceAsync"],[92,35,80,39,"loadFontInNamespaceAsync"],[92,36,80,39,"_x"],[92,38,80,39],[92,40,80,39,"_x2"],[92,43,80,39],[93,4,80,39],[93,11,80,39,"_loadFontInNamespaceAsync"],[93,36,80,39],[93,37,80,39,"apply"],[93,42,80,39],[93,49,80,39,"arguments"],[93,58,80,39],[94,2,80,39],[94,4,108,0],[95,2,109,0],[96,0,110,0],[97,0,111,0],[98,0,112,0],[99,2,109,0],[99,11,109,0,"_loadFontInNamespaceAsync"],[99,37,109,0],[100,4,109,0,"_loadFontInNamespaceAsync"],[100,29,109,0],[100,36,109,0,"_asyncToGenerator"],[100,53,109,0],[100,54,109,0,"default"],[100,61,109,0],[100,63,80,0],[100,74,80,40,"fontFamily"],[100,84,80,50],[100,86,80,52,"source"],[100,92,80,58],[100,94,80,60],[101,6,81,4],[101,10,81,8],[101,11,81,9,"source"],[101,17,81,15],[101,19,81,17],[102,8,82,8],[102,14,82,14],[102,18,82,18,"CodedError"],[102,34,82,28],[102,35,82,28,"CodedError"],[102,45,82,28],[102,46,82,29],[102,63,82,46],[102,65,82,48],[102,114,82,97,"fontFamily"],[102,124,82,107],[102,130,82,113,"source"],[102,136,82,119],[102,206,82,189,"fontFamily"],[102,216,82,199],[102,219,82,202],[102,220,82,203],[103,6,83,4],[104,6,84,4],[105,6,85,4],[106,6,86,4],[106,10,86,8,"isLoaded"],[106,18,86,16],[106,19,86,17,"fontFamily"],[106,29,86,27],[106,30,86,28],[106,32,86,30],[107,8,87,8],[108,6,88,4],[109,6,89,4],[109,10,89,8,"loadPromises"],[109,17,89,20],[109,18,89,20,"loadPromises"],[109,30,89,20],[109,31,89,21,"hasOwnProperty"],[109,45,89,35],[109,46,89,36,"fontFamily"],[109,56,89,46],[109,57,89,47],[109,59,89,49],[110,8,90,8],[110,15,90,15,"loadPromises"],[110,22,90,27],[110,23,90,27,"loadPromises"],[110,35,90,27],[110,36,90,28,"fontFamily"],[110,46,90,38],[110,47,90,39],[111,6,91,4],[112,6,92,4],[113,6,93,4],[114,6,94,4],[115,6,95,4],[116,6,96,4],[116,10,96,10,"asset"],[116,15,96,15],[116,18,96,18],[116,22,96,18,"getAssetForSource"],[116,33,96,35],[116,34,96,35,"getAssetForSource"],[116,51,96,35],[116,53,96,36,"source"],[116,59,96,42],[116,60,96,43],[117,6,97,4,"loadPromises"],[117,13,97,16],[117,14,97,16,"loadPromises"],[117,26,97,16],[117,27,97,17,"fontFamily"],[117,37,97,27],[117,38,97,28],[117,41,97,31],[117,45,97,31,"_asyncToGenerator"],[117,62,97,31],[117,63,97,31,"default"],[117,70,97,31],[117,72,97,32],[117,85,97,44],[118,8,98,8],[118,12,98,12],[119,10,99,12],[119,16,99,18],[119,20,99,18,"loadSingleFontAsync"],[119,31,99,37],[119,32,99,37,"loadSingleFontAsync"],[119,51,99,37],[119,53,99,38,"fontFamily"],[119,63,99,48],[119,65,99,50,"asset"],[119,70,99,55],[119,71,99,56],[120,10,100,12],[120,14,100,12,"markLoaded"],[120,21,100,22],[120,22,100,22,"markLoaded"],[120,32,100,22],[120,34,100,23,"fontFamily"],[120,44,100,33],[120,45,100,34],[121,8,101,8],[121,9,101,9],[121,18,102,16],[122,10,103,12],[122,17,103,19,"loadPromises"],[122,24,103,31],[122,25,103,31,"loadPromises"],[122,37,103,31],[122,38,103,32,"fontFamily"],[122,48,103,42],[122,49,103,43],[123,8,104,8],[124,6,105,4],[124,7,105,5],[124,9,105,7],[124,10,105,8],[125,6,106,4],[125,12,106,10,"loadPromises"],[125,19,106,22],[125,20,106,22,"loadPromises"],[125,32,106,22],[125,33,106,23,"fontFamily"],[125,43,106,33],[125,44,106,34],[126,4,107,0],[126,5,107,1],[127,4,107,1],[127,11,107,1,"_loadFontInNamespaceAsync"],[127,36,107,1],[127,37,107,1,"apply"],[127,42,107,1],[127,49,107,1,"arguments"],[127,58,107,1],[128,2,107,1],[129,2,107,1],[129,11,113,22,"unloadAllAsync"],[129,25,113,36,"unloadAllAsync"],[129,26,113,36],[130,4,113,36],[130,11,113,36,"_unloadAllAsync"],[130,26,113,36],[130,27,113,36,"apply"],[130,32,113,36],[130,39,113,36,"arguments"],[130,48,113,36],[131,2,113,36],[131,4,123,0],[132,2,124,0],[133,0,125,0],[134,0,126,0],[135,0,127,0],[136,0,128,0],[137,0,129,0],[138,0,130,0],[139,0,131,0],[140,0,132,0],[141,2,124,0],[141,11,124,0,"_unloadAllAsync"],[141,27,124,0],[142,4,124,0,"_unloadAllAsync"],[142,19,124,0],[142,26,124,0,"_asyncToGenerator"],[142,43,124,0],[142,44,124,0,"default"],[142,51,124,0],[142,53,113,7],[142,66,113,39],[143,6,114,4],[143,10,114,8],[143,11,114,9,"ExpoFontLoader"],[143,25,114,23],[143,26,114,23,"default"],[143,33,114,23],[143,34,114,24,"unloadAllAsync"],[143,48,114,38],[143,50,114,40],[144,8,115,8],[144,14,115,14],[144,18,115,18,"UnavailabilityError"],[144,34,115,37],[144,35,115,37,"UnavailabilityError"],[144,54,115,37],[144,55,115,38],[144,66,115,49],[144,68,115,51],[144,84,115,67],[144,85,115,68],[145,6,116,4],[146,6,117,4],[146,10,117,8,"Object"],[146,16,117,14],[146,17,117,15,"keys"],[146,21,117,19],[146,22,117,20,"loadPromises"],[146,29,117,32],[146,30,117,32,"loadPromises"],[146,42,117,32],[146,43,117,33],[146,44,117,34,"length"],[146,50,117,40],[146,52,117,42],[147,8,118,8],[147,14,118,14],[147,18,118,18,"CodedError"],[147,34,118,28],[147,35,118,28,"CodedError"],[147,45,118,28],[147,46,118,29],[147,58,118,41],[147,60,118,43],[147,112,118,95,"Object"],[147,118,118,101],[147,119,118,102,"keys"],[147,123,118,106],[147,124,118,107,"loadPromises"],[147,131,118,119],[147,132,118,119,"loadPromises"],[147,144,118,119],[147,145,118,120],[147,146,118,121,"join"],[147,150,118,125],[147,151,118,126],[147,155,118,130],[147,156,118,131],[147,158,118,133],[147,159,118,134],[148,6,119,4],[149,6,120,4],[149,10,120,4,"purgeCache"],[149,17,120,14],[149,18,120,14,"purgeCache"],[149,28,120,14],[149,30,120,15],[149,31,120,16],[150,6,121,4],[150,12,121,10,"ExpoFontLoader"],[150,26,121,24],[150,27,121,24,"default"],[150,34,121,24],[150,35,121,25,"unloadAllAsync"],[150,49,121,39],[150,50,121,40],[150,51,121,41],[151,4,122,0],[151,5,122,1],[152,4,122,1],[152,11,122,1,"_unloadAllAsync"],[152,26,122,1],[152,27,122,1,"apply"],[152,32,122,1],[152,39,122,1,"arguments"],[152,48,122,1],[153,2,122,1],[154,2,122,1],[154,11,133,22,"unloadAsync"],[154,22,133,33,"unloadAsync"],[154,23,133,33,"_x3"],[154,26,133,33],[154,28,133,33,"_x4"],[154,31,133,33],[155,4,133,33],[155,11,133,33,"_unloadAsync"],[155,23,133,33],[155,24,133,33,"apply"],[155,29,133,33],[155,36,133,33,"arguments"],[155,45,133,33],[156,2,133,33],[157,2,133,33],[157,11,133,33,"_unloadAsync"],[157,24,133,33],[158,4,133,33,"_unloadAsync"],[158,16,133,33],[158,23,133,33,"_asyncToGenerator"],[158,40,133,33],[158,41,133,33,"default"],[158,48,133,33],[158,50,133,7],[158,61,133,34,"fontFamilyOrFontMap"],[158,80,133,53],[158,82,133,55,"options"],[158,89,133,62],[158,91,133,64],[159,6,134,4],[159,10,134,8],[159,11,134,9,"ExpoFontLoader"],[159,25,134,23],[159,26,134,23,"default"],[159,33,134,23],[159,34,134,24,"unloadAsync"],[159,45,134,35],[159,47,134,37],[160,8,135,8],[160,14,135,14],[160,18,135,18,"UnavailabilityError"],[160,34,135,37],[160,35,135,37,"UnavailabilityError"],[160,54,135,37],[160,55,135,38],[160,66,135,49],[160,68,135,51],[160,81,135,64],[160,82,135,65],[161,6,136,4],[162,6,137,4],[162,10,137,8],[162,17,137,15,"fontFamilyOrFontMap"],[162,36,137,34],[162,41,137,39],[162,49,137,47],[162,51,137,49],[163,8,138,8],[163,12,138,12,"options"],[163,19,138,19],[163,21,138,21],[164,10,139,12],[164,16,139,18],[164,20,139,22,"CodedError"],[164,36,139,32],[164,37,139,32,"CodedError"],[164,47,139,32],[164,48,139,33],[164,62,139,47],[164,64,139,49],[164,119,139,104,"options"],[164,126,139,111],[164,234,139,219],[164,235,139,220],[165,8,140,8],[166,8,141,8],[166,12,141,14,"fontMap"],[166,19,141,21],[166,22,141,24,"fontFamilyOrFontMap"],[166,41,141,43],[167,8,142,8],[167,12,142,14,"names"],[167,17,142,19],[167,20,142,22,"Object"],[167,26,142,28],[167,27,142,29,"keys"],[167,31,142,33],[167,32,142,34,"fontMap"],[167,39,142,41],[167,40,142,42],[168,8,143,8],[168,14,143,14,"Promise"],[168,21,143,21],[168,22,143,22,"all"],[168,25,143,25],[168,26,143,26,"names"],[168,31,143,31],[168,32,143,32,"map"],[168,35,143,35],[168,36,143,37,"name"],[168,40,143,41],[168,44,143,46,"unloadFontInNamespaceAsync"],[168,70,143,72],[168,71,143,73,"name"],[168,75,143,77],[168,77,143,79,"fontMap"],[168,84,143,86],[168,85,143,87,"name"],[168,89,143,91],[168,90,143,92],[168,91,143,93],[168,92,143,94],[168,93,143,95],[169,8,144,8],[170,6,145,4],[171,6,146,4],[171,19,146,17,"unloadFontInNamespaceAsync"],[171,45,146,43],[171,46,146,44,"fontFamilyOrFontMap"],[171,65,146,63],[171,67,146,65,"options"],[171,74,146,72],[171,75,146,73],[172,4,147,0],[172,5,147,1],[173,4,147,1],[173,11,147,1,"_unloadAsync"],[173,23,147,1],[173,24,147,1,"apply"],[173,29,147,1],[173,36,147,1,"arguments"],[173,45,147,1],[174,2,147,1],[175,2,147,1],[175,11,148,15,"unloadFontInNamespaceAsync"],[175,37,148,41,"unloadFontInNamespaceAsync"],[175,38,148,41,"_x5"],[175,41,148,41],[175,43,148,41,"_x6"],[175,46,148,41],[176,4,148,41],[176,11,148,41,"_unloadFontInNamespaceAsync"],[176,38,148,41],[176,39,148,41,"apply"],[176,44,148,41],[176,51,148,41,"arguments"],[176,60,148,41],[177,2,148,41],[178,2,148,41],[178,11,148,41,"_unloadFontInNamespaceAsync"],[178,39,148,41],[179,4,148,41,"_unloadFontInNamespaceAsync"],[179,31,148,41],[179,38,148,41,"_asyncToGenerator"],[179,55,148,41],[179,56,148,41,"default"],[179,63,148,41],[179,65,148,0],[179,76,148,42,"fontFamily"],[179,86,148,52],[179,88,148,54,"options"],[179,95,148,61],[179,97,148,63],[180,6,149,4],[180,10,149,8],[180,11,149,9,"isLoaded"],[180,19,149,17],[180,20,149,18,"fontFamily"],[180,30,149,28],[180,31,149,29],[180,33,149,31],[181,8,150,8],[182,6,151,4],[182,7,151,5],[182,13,152,9],[183,8,153,8],[183,12,153,8,"purgeFontFamilyFromCache"],[183,19,153,32],[183,20,153,32,"purgeFontFamilyFromCache"],[183,44,153,32],[183,46,153,33,"fontFamily"],[183,56,153,43],[183,57,153,44],[184,6,154,4],[185,6,155,4],[186,6,156,4],[187,6,157,4],[188,6,158,4],[189,6,159,4],[189,10,159,8],[189,11,159,9,"fontFamily"],[189,21,159,19],[189,23,159,21],[190,8,160,8],[190,14,160,14],[190,18,160,18,"CodedError"],[190,34,160,28],[190,35,160,28,"CodedError"],[190,45,160,28],[190,46,160,29],[190,63,160,46],[190,65,160,48],[190,94,160,77],[190,95,160,78],[191,6,161,4],[192,6,162,4],[192,10,162,8],[192,11,162,9,"ExpoFontLoader"],[192,25,162,23],[192,26,162,23,"default"],[192,33,162,23],[192,34,162,24,"unloadAsync"],[192,45,162,35],[192,47,162,37],[193,8,163,8],[193,14,163,14],[193,18,163,18,"UnavailabilityError"],[193,34,163,37],[193,35,163,37,"UnavailabilityError"],[193,54,163,37],[193,55,163,38],[193,66,163,49],[193,68,163,51],[193,81,163,64],[193,82,163,65],[194,6,164,4],[195,6,165,4],[195,12,165,10,"ExpoFontLoader"],[195,26,165,24],[195,27,165,24,"default"],[195,34,165,24],[195,35,165,25,"unloadAsync"],[195,46,165,36],[195,47,165,37,"fontFamily"],[195,57,165,47],[195,59,165,49,"options"],[195,66,165,56],[195,67,165,57],[196,4,166,0],[196,5,166,1],[197,4,166,1],[197,11,166,1,"_unloadFontInNamespaceAsync"],[197,38,166,1],[197,39,166,1,"apply"],[197,44,166,1],[197,51,166,1,"arguments"],[197,60,166,1],[198,2,166,1],[199,0,166,1],[199,3]],"functionMap":{"names":["<global>","isLoaded","getLoadedFonts","isLoading","loadAsync","names.map$argument_0","Promise.all.then$argument_0","loadFontInNamespaceAsync","<anonymous>","unloadAllAsync","unloadAsync","unloadFontInNamespaceAsync"],"mappings":"AAA;OCa;CDQ;OEO;CFE;OGQ;CHE;OIgB;sBCY,iDD;qCCG,uDD,QE,SF;CJO;AOC;gCCiB;KDQ;CPE;OSM;CTS;OUW;oCLU,yDK;CVI;AWC;CXkB"},"hasCjsExports":false},"type":"js/module"}]}