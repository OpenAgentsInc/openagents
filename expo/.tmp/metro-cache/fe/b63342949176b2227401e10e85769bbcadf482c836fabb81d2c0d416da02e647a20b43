{"dependencies":[{"name":"@babel/runtime/helpers/objectWithoutProperties","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"fnQVLibs90KHiJ7y48fLgPWzDS0=","exportNames":["*"],"imports":1}},{"name":"@react-navigation/native","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":40,"column":17,"index":1637},"end":{"line":40,"column":52,"index":1672}}],"key":"uE+cRVNnMKkS9OYKR5fpRqPul5s=","exportNames":["*"],"imports":1}},{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":41,"column":47,"index":1721},"end":{"line":41,"column":78,"index":1752}}],"key":"14QBo/6I2jfYu7Ct29OWBvp5ENM=","exportNames":["*"],"imports":1}},{"name":"./findFocusedRoute","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":42,"column":27,"index":1782},"end":{"line":42,"column":56,"index":1811}}],"key":"JPe8xQMI59bnv97OB8syZ4AgEvA=","exportNames":["*"],"imports":1}},{"name":"./getStateFromPath-forks","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":43,"column":26,"index":1839},"end":{"line":43,"column":61,"index":1874}}],"key":"R0kZl7h5DI+/CZCR2+pJK8wn5iY=","exportNames":["*"],"imports":1}},{"name":"../constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":44,"column":20,"index":1897},"end":{"line":44,"column":43,"index":1920}}],"key":"zmjjtqoQxi2W71eIMIIaEi1mOpU=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _objectWithoutProperties = require(_dependencyMap[0]).default;\n  var _excluded = [\"path\"];\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function () {\n    var ownKeys = function (o) {\n      ownKeys = Object.getOwnPropertyNames || function (o) {\n        var ar = [];\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n        return ar;\n      };\n      return ownKeys(o);\n    };\n    return function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n      __setModuleDefault(result, mod);\n      return result;\n    };\n  }();\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getStateFromPath = getStateFromPath;\n  var native_1 = require(_dependencyMap[1]);\n  var escape_string_regexp_1 = __importDefault(require(_dependencyMap[2]));\n  var findFocusedRoute_1 = require(_dependencyMap[3]);\n  var expo = __importStar(require(_dependencyMap[4]));\n  var constants_1 = require(_dependencyMap[5]);\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    var segments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var _getConfigResources = getConfigResources(options,\n      // START FORK\n      segments\n      // END FORK\n      ),\n      initialRoutes = _getConfigResources.initialRoutes,\n      configs = _getConfigResources.configs,\n      configWithRegexes = _getConfigResources.configWithRegexes;\n    var screens = options?.screens;\n    // START FORK\n    var expoPath = expo.getUrlWithReactNavigationConcessions(path);\n    // END FORK\n    // START FORK\n    var remaining = expo.cleanPath(expoPath.nonstandardPathname);\n    // let remaining = path\n    //   .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    //   .replace(/^\\//, '') // Remove extra leading slash\n    //   .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n    // // Make sure there is a trailing slash\n    // remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    // END FORK\n    var prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n    if (prefix) {\n      // Make sure there is a trailing slash\n      var normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n      // If the path doesn't start with the prefix, it's not a match\n      if (!remaining.startsWith(normalizedPrefix)) {\n        return undefined;\n      }\n      // Remove the prefix from the path\n      remaining = remaining.replace(normalizedPrefix, '');\n    }\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      var _routes = remaining.split('/').filter(Boolean).map(segment => {\n        var name = decodeURIComponent(segment);\n        return {\n          name\n        };\n      });\n      if (_routes.length) {\n        return createNestedStateObject(expoPath, _routes, initialRoutes, [], expoPath.url.hash);\n      }\n      return undefined;\n    }\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      // START FORK\n      var match = expo.matchForEmptyPath(configWithRegexes);\n      // const match = configs.find(\n      //   (config) =>\n      //     config.path === '' &&\n      //     config.routeNames.every(\n      //       // Make sure that none of the parent configs have a non-empty path defined\n      //       (name) => !configs.find((c) => c.screen === name)?.path\n      //     )\n      // );\n      // END FORK\n      if (match) {\n        return createNestedStateObject(expoPath, match.routeNames.map(name => ({\n          name\n        })), initialRoutes, configs, expoPath.url.hash);\n      }\n      return undefined;\n    }\n    var result;\n    var current;\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configWithRegexes),\n      routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(expoPath, routes, initialRoutes, configs, expoPath.url.hash);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n  /**\n   * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n   */\n  var cachedConfigResources = [undefined, prepareConfigResources()];\n  function getConfigResources(options,\n  // START FORK\n  previousSegments\n  // END FORK\n  ) {\n    // START FORK - We need to disable this caching as our configs can change based upon the current state\n    // if (cachedConfigResources[0] !== options) {\n    cachedConfigResources = [options, prepareConfigResources(options, previousSegments)];\n    // }\n    // END FORK FORK\n    return cachedConfigResources[1];\n  }\n  function prepareConfigResources(options, previousSegments) {\n    if (options) {\n      (0, native_1.validatePathConfig)(options);\n    }\n    var initialRoutes = getInitialRoutes(options);\n    var configs = getNormalizedConfigs(initialRoutes, options?.screens, previousSegments);\n    checkForDuplicatedConfigs(configs);\n    var configWithRegexes = getConfigsWithRegexes(configs);\n    return {\n      initialRoutes,\n      configs,\n      configWithRegexes\n    };\n  }\n  function getInitialRoutes(options) {\n    var initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    return initialRoutes;\n  }\n  function getNormalizedConfigs(initialRoutes) {\n    var screens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var\n    // START FORK\n    previousSegments\n    // END FORK\n    = arguments.length > 2 ? arguments[2] : undefined;\n    // Create a normalized configs array which will be easier to use\n    return [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes, []))).map(expo.appendIsInitial(initialRoutes)).sort(expo.getRouteConfigSorter(previousSegments));\n    // .sort((a, b) => {\n    //   // Sort config so that:\n    //   // - the most exhaustive ones are always at the beginning\n    //   // - patterns with wildcard are always at the end\n    //   // If 2 patterns are same, move the one with less route names up\n    //   // This is an error state, so it's only useful for consistent error messages\n    //   if (a.pattern === b.pattern) {\n    //     return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    //   }\n    //   // If one of the patterns starts with the other, it's more exhaustive\n    //   // So move it up\n    //   if (a.pattern.startsWith(b.pattern)) {\n    //     return -1;\n    //   }\n    //   if (b.pattern.startsWith(a.pattern)) {\n    //     return 1;\n    //   }\n    //   const aParts = a.pattern.split('/');\n    //   const bParts = b.pattern.split('/');\n    //   for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n    //     // if b is longer, b get higher priority\n    //     if (aParts[i] == null) {\n    //       return 1;\n    //     }\n    //     // if a is longer, a get higher priority\n    //     if (bParts[i] == null) {\n    //       return -1;\n    //     }\n    //     const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n    //     const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n    //     // if both are wildcard we compare next component\n    //     if (aWildCard && bWildCard) {\n    //       continue;\n    //     }\n    //     // if only a is wild card, b get higher priority\n    //     if (aWildCard) {\n    //       return 1;\n    //     }\n    //     // if only b is wild card, a get higher priority\n    //     if (bWildCard) {\n    //       return -1;\n    //     }\n    //   }\n    //   return bParts.length - aParts.length;\n    // });\n  }\n  function checkForDuplicatedConfigs(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      if (acc[config.pattern]) {\n        var a = acc[config.pattern].routeNames;\n        var b = config.routeNames;\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        var intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, {\n        [config.pattern]: config\n      });\n    }, {});\n  }\n  function getConfigsWithRegexes(configs) {\n    return configs.map(c => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      // START FORK\n      // regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n      regex: expo.configRegExp(c)\n      // END FORK\n    }));\n  }\n  var joinPaths = function () {\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n    return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  };\n  var matchAgainstConfigs = (remaining, configs) => {\n    var routes;\n    var remainingPath = remaining;\n    // START FORK\n    var allParams = Object.create(null);\n    // END FORK\n    // Go through all configs, and see if the next path segment matches our regex\n    var _loop = function (config) {\n        if (!config.regex) {\n          return 0; // continue\n        }\n        var match = remainingPath.match(config.regex);\n        // If our regex matches, we need to extract params from the path\n        if (match) {\n          var matchResult = config.pattern?.split('/').reduce((acc, p, index) => {\n            if (!expo.isDynamicPart(p)) {\n              return acc;\n            }\n            acc.pos += 1;\n            // START FORK\n            var decodedParamSegment = expo.safelyDecodeURIComponent(\n            // const decodedParamSegment = decodeURIComponent(\n            // The param segments appear every second item starting from 2 in the regex match result\n            match[(acc.pos + 1) * 2]\n            // Remove trailing slash\n            .replace(/\\/$/, ''));\n            // END FORK\n            Object.assign(acc.matchedParams, {\n              [p]: Object.assign(acc.matchedParams[p] || {}, {\n                [index]: decodedParamSegment\n              })\n            });\n            return acc;\n          }, {\n            pos: -1,\n            matchedParams: {}\n          });\n          var matchedParams = matchResult.matchedParams || {};\n          routes = config.routeNames.map(name => {\n            var routeConfig = configs.find(c => {\n              // Check matching name AND pattern in case same screen is used at different levels in config\n              return c.screen === name && config.pattern.startsWith(c.pattern);\n            });\n            // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n            var normalizedPath = routeConfig?.path.split('/').filter(Boolean).join('/');\n            // Get the number of segments in the initial pattern\n            var numInitialSegments = routeConfig?.pattern\n            // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n            .replace(new RegExp(`${(0, escape_string_regexp_1.default)(normalizedPath)}$`), '')?.split('/').length;\n            var params = normalizedPath?.split('/').reduce((acc, p, index) => {\n              if (!expo.isDynamicPart(p)) {\n                return acc;\n              }\n              // Get the real index of the path parameter in the matched path\n              // by offsetting by the number of segments in the initial pattern\n              var offset = numInitialSegments ? numInitialSegments - 1 : 0;\n              // START FORK\n              // const value = matchedParams[p]?.[index + offset];\n              var value = expo.getParamValue(p, matchedParams[p]?.[index + offset]);\n              // END FORK\n              if (value) {\n                // START FORK\n                // const key = p.replace(/^:/, '').replace(/\\?$/, '');\n                var key = expo.replacePart(p);\n                // END FORK\n                acc[key] = routeConfig?.parse?.[key] ? routeConfig.parse[key](value) : value;\n              }\n              return acc;\n            }, {});\n            if (params && Object.keys(params).length) {\n              Object.assign(allParams, params);\n              return {\n                name,\n                params\n              };\n            }\n            return {\n              name\n            };\n          });\n          remainingPath = remainingPath.replace(match[1], '');\n          return 1; // break\n        }\n      },\n      _ret;\n    for (var config of configs) {\n      _ret = _loop(config);\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n    // START FORK\n    expo.populateParams(routes, allParams);\n    // END FORK\n    return {\n      routes,\n      remainingPath\n    };\n  };\n  var createNormalizedConfigs = function (screen, routeConfig) {\n    var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var initials = arguments.length > 3 ? arguments[3] : undefined;\n    var parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n    var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    // @ts-expect-error: TODO(@kitten): This is entirely untyped. The index access just flags this, but we're not typing the config properly here\n    var config = routeConfig[screen];\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      configs.push(createConfigItem(screen, routeNames, pattern, config));\n    } else if (typeof config === 'object') {\n      var _pattern;\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n        _pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n        if (screen !== constants_1.INTERNAL_SLOT_NAME) {\n          configs.push(createConfigItem(screen, routeNames, _pattern, config.path, config.parse, config));\n        }\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          var result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], _pattern ?? parentPattern);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  var createConfigItem = function (screen, routeNames, pattern, path) {\n    var parse = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n    var config = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern = pattern.split('/').filter(Boolean).join('/');\n    // START FORK\n    var regex = pattern ? expo.routePatternToRegex(pattern) : undefined;\n    // const regex = pattern\n    //   ? new RegExp(\n    //       `^(${pattern\n    //         .split('/')\n    //         .map((it) => {\n    //           if (it.startsWith(':')) {\n    //             return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    //           }\n    //           return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n    //         })\n    //         .join('')})`\n    //     )\n    //   : undefined;\n    // END FORK\n    return {\n      screen,\n      regex,\n      pattern,\n      path,\n      // The routeNames array is mutated, so copy it to keep the current state\n      routeNames: [...routeNames],\n      parse,\n      // START FORK\n      ...expo.createConfig(screen, pattern, routeNames, config)\n      // END FORK\n    };\n  };\n  var findParseConfigForRoute = (routeName, flatConfig) => {\n    for (var config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n  // Try to find an initial route connected with the one passed\n  var findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (var config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        var sameParents = true;\n        for (var i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  var createStateObject = (initialRoute, route, isEmpty) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute,\n            params: route.params\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute,\n            params: route.params\n          }, {\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      } else {\n        return {\n          routes: [{\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      }\n    }\n  };\n  var createNestedStateObject = (_ref, routes, initialRoutes, flatConfig, hash) => {\n    var path = _ref.path,\n      expoURL = _objectWithoutProperties(_ref, _excluded);\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    var state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      var nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, findFocusedRoute_1.findFocusedRoute)(state);\n    // START FORK\n    route.path = expoURL.pathWithoutGroups;\n    // route.path = path;\n    // END FORK\n    // START FORK\n    // const params = parseQueryParams(\n    var params = expo.parseQueryParams(path, route, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined, hash);\n    // END FORK\n    // START FORK\n    // expo.handleUrlParams(route, params, hash);\n    if (params) {\n      route.params = {\n        ...route.params,\n        ...params\n      };\n    }\n    // END FORK\n    return state;\n  };\n  // START FORK\n  // const parseQueryParams = (path: string, parseConfig?: Record<string, (value: string) => any>) => {\n  //   const query = path.split('?')[1];\n  //   const params = queryString.parse(query);\n  //   if (parseConfig) {\n  //     Object.keys(params).forEach((name) => {\n  //       if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n  //         params[name] = parseConfig[name](params[name] as string);\n  //       }\n  //     });\n  //   }\n  //   return Object.keys(params).length ? params : undefined;\n  // };\n  // END FORK\n});","lineCount":597,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_objectWithoutProperties"],[4,30,1,13],[4,33,1,13,"require"],[4,40,1,13],[4,41,1,13,"_dependencyMap"],[4,55,1,13],[4,60,1,13,"default"],[4,67,1,13],[5,2,1,13],[5,6,1,13,"_excluded"],[5,15,1,13],[6,2,2,0],[6,6,2,4,"__createBinding"],[6,21,2,19],[6,24,2,23],[6,28,2,27],[6,32,2,31],[6,36,2,35],[6,37,2,36,"__createBinding"],[6,52,2,51],[6,57,2,57,"Object"],[6,63,2,63],[6,64,2,64,"create"],[6,70,2,70],[6,73,2,74],[6,83,2,83,"o"],[6,84,2,84],[6,86,2,86,"m"],[6,87,2,87],[6,89,2,89,"k"],[6,90,2,90],[6,92,2,92,"k2"],[6,94,2,94],[6,96,2,96],[7,4,3,4],[7,8,3,8,"k2"],[7,10,3,10],[7,15,3,15,"undefined"],[7,24,3,24],[7,26,3,26,"k2"],[7,28,3,28],[7,31,3,31,"k"],[7,32,3,32],[8,4,4,4],[8,8,4,8,"desc"],[8,12,4,12],[8,15,4,15,"Object"],[8,21,4,21],[8,22,4,22,"getOwnPropertyDescriptor"],[8,46,4,46],[8,47,4,47,"m"],[8,48,4,48],[8,50,4,50,"k"],[8,51,4,51],[8,52,4,52],[9,4,5,4],[9,8,5,8],[9,9,5,9,"desc"],[9,13,5,13],[9,18,5,18],[9,23,5,23],[9,27,5,27,"desc"],[9,31,5,31],[9,34,5,34],[9,35,5,35,"m"],[9,36,5,36],[9,37,5,37,"__esModule"],[9,47,5,47],[9,50,5,50,"desc"],[9,54,5,54],[9,55,5,55,"writable"],[9,63,5,63],[9,67,5,67,"desc"],[9,71,5,71],[9,72,5,72,"configurable"],[9,84,5,84],[9,85,5,85],[9,87,5,87],[10,6,6,6,"desc"],[10,10,6,10],[10,13,6,13],[11,8,6,15,"enumerable"],[11,18,6,25],[11,20,6,27],[11,24,6,31],[12,8,6,33,"get"],[12,11,6,36],[12,13,6,38],[12,22,6,38,"get"],[12,23,6,38],[12,25,6,49],[13,10,6,51],[13,17,6,58,"m"],[13,18,6,59],[13,19,6,60,"k"],[13,20,6,61],[13,21,6,62],[14,8,6,64],[15,6,6,66],[15,7,6,67],[16,4,7,4],[17,4,8,4,"Object"],[17,10,8,10],[17,11,8,11,"defineProperty"],[17,25,8,25],[17,26,8,26,"o"],[17,27,8,27],[17,29,8,29,"k2"],[17,31,8,31],[17,33,8,33,"desc"],[17,37,8,37],[17,38,8,38],[18,2,9,0],[18,3,9,1],[18,6,9,6],[18,16,9,15,"o"],[18,17,9,16],[18,19,9,18,"m"],[18,20,9,19],[18,22,9,21,"k"],[18,23,9,22],[18,25,9,24,"k2"],[18,27,9,26],[18,29,9,28],[19,4,10,4],[19,8,10,8,"k2"],[19,10,10,10],[19,15,10,15,"undefined"],[19,24,10,24],[19,26,10,26,"k2"],[19,28,10,28],[19,31,10,31,"k"],[19,32,10,32],[20,4,11,4,"o"],[20,5,11,5],[20,6,11,6,"k2"],[20,8,11,8],[20,9,11,9],[20,12,11,12,"m"],[20,13,11,13],[20,14,11,14,"k"],[20,15,11,15],[20,16,11,16],[21,2,12,0],[21,3,12,2],[21,4,12,3],[22,2,13,0],[22,6,13,4,"__setModuleDefault"],[22,24,13,22],[22,27,13,26],[22,31,13,30],[22,35,13,34],[22,39,13,38],[22,40,13,39,"__setModuleDefault"],[22,58,13,57],[22,63,13,63,"Object"],[22,69,13,69],[22,70,13,70,"create"],[22,76,13,76],[22,79,13,80],[22,89,13,89,"o"],[22,90,13,90],[22,92,13,92,"v"],[22,93,13,93],[22,95,13,95],[23,4,14,4,"Object"],[23,10,14,10],[23,11,14,11,"defineProperty"],[23,25,14,25],[23,26,14,26,"o"],[23,27,14,27],[23,29,14,29],[23,38,14,38],[23,40,14,40],[24,6,14,42,"enumerable"],[24,16,14,52],[24,18,14,54],[24,22,14,58],[25,6,14,60,"value"],[25,11,14,65],[25,13,14,67,"v"],[26,4,14,69],[26,5,14,70],[26,6,14,71],[27,2,15,0],[27,3,15,1],[27,6,15,5],[27,16,15,14,"o"],[27,17,15,15],[27,19,15,17,"v"],[27,20,15,18],[27,22,15,20],[28,4,16,4,"o"],[28,5,16,5],[28,6,16,6],[28,15,16,15],[28,16,16,16],[28,19,16,19,"v"],[28,20,16,20],[29,2,17,0],[29,3,17,1],[29,4,17,2],[30,2,18,0],[30,6,18,4,"__importStar"],[30,18,18,16],[30,21,18,20],[30,25,18,24],[30,29,18,28],[30,33,18,32],[30,34,18,33,"__importStar"],[30,46,18,45],[30,50,18,51],[30,62,18,63],[31,4,19,4],[31,8,19,8,"ownKeys"],[31,15,19,15],[31,18,19,18],[31,27,19,18,"ownKeys"],[31,28,19,27,"o"],[31,29,19,28],[31,31,19,30],[32,6,20,8,"ownKeys"],[32,13,20,15],[32,16,20,18,"Object"],[32,22,20,24],[32,23,20,25,"getOwnPropertyNames"],[32,42,20,44],[32,46,20,48],[32,56,20,58,"o"],[32,57,20,59],[32,59,20,61],[33,8,21,12],[33,12,21,16,"ar"],[33,14,21,18],[33,17,21,21],[33,19,21,23],[34,8,22,12],[34,13,22,17],[34,17,22,21,"k"],[34,18,22,22],[34,22,22,26,"o"],[34,23,22,27],[34,25,22,29],[34,29,22,33,"Object"],[34,35,22,39],[34,36,22,40,"prototype"],[34,45,22,49],[34,46,22,50,"hasOwnProperty"],[34,60,22,64],[34,61,22,65,"call"],[34,65,22,69],[34,66,22,70,"o"],[34,67,22,71],[34,69,22,73,"k"],[34,70,22,74],[34,71,22,75],[34,73,22,77,"ar"],[34,75,22,79],[34,76,22,80,"ar"],[34,78,22,82],[34,79,22,83,"length"],[34,85,22,89],[34,86,22,90],[34,89,22,93,"k"],[34,90,22,94],[35,8,23,12],[35,15,23,19,"ar"],[35,17,23,21],[36,6,24,8],[36,7,24,9],[37,6,25,8],[37,13,25,15,"ownKeys"],[37,20,25,22],[37,21,25,23,"o"],[37,22,25,24],[37,23,25,25],[38,4,26,4],[38,5,26,5],[39,4,27,4],[39,11,27,11],[39,21,27,21,"mod"],[39,24,27,24],[39,26,27,26],[40,6,28,8],[40,10,28,12,"mod"],[40,13,28,15],[40,17,28,19,"mod"],[40,20,28,22],[40,21,28,23,"__esModule"],[40,31,28,33],[40,33,28,35],[40,40,28,42,"mod"],[40,43,28,45],[41,6,29,8],[41,10,29,12,"result"],[41,16,29,18],[41,19,29,21],[41,20,29,22],[41,21,29,23],[42,6,30,8],[42,10,30,12,"mod"],[42,13,30,15],[42,17,30,19],[42,21,30,23],[42,23,30,25],[42,28,30,30],[42,32,30,34,"k"],[42,33,30,35],[42,36,30,38,"ownKeys"],[42,43,30,45],[42,44,30,46,"mod"],[42,47,30,49],[42,48,30,50],[42,50,30,52,"i"],[42,51,30,53],[42,54,30,56],[42,55,30,57],[42,57,30,59,"i"],[42,58,30,60],[42,61,30,63,"k"],[42,62,30,64],[42,63,30,65,"length"],[42,69,30,71],[42,71,30,73,"i"],[42,72,30,74],[42,74,30,76],[42,76,30,78],[42,80,30,82,"k"],[42,81,30,83],[42,82,30,84,"i"],[42,83,30,85],[42,84,30,86],[42,89,30,91],[42,98,30,100],[42,100,30,102,"__createBinding"],[42,115,30,117],[42,116,30,118,"result"],[42,122,30,124],[42,124,30,126,"mod"],[42,127,30,129],[42,129,30,131,"k"],[42,130,30,132],[42,131,30,133,"i"],[42,132,30,134],[42,133,30,135],[42,134,30,136],[43,6,31,8,"__setModuleDefault"],[43,24,31,26],[43,25,31,27,"result"],[43,31,31,33],[43,33,31,35,"mod"],[43,36,31,38],[43,37,31,39],[44,6,32,8],[44,13,32,15,"result"],[44,19,32,21],[45,4,33,4],[45,5,33,5],[46,2,34,0],[46,3,34,1],[46,4,34,3],[46,5,34,4],[47,2,35,0],[47,6,35,4,"__importDefault"],[47,21,35,19],[47,24,35,23],[47,28,35,27],[47,32,35,31],[47,36,35,35],[47,37,35,36,"__importDefault"],[47,52,35,51],[47,56,35,56],[47,66,35,66,"mod"],[47,69,35,69],[47,71,35,71],[48,4,36,4],[48,11,36,12,"mod"],[48,14,36,15],[48,18,36,19,"mod"],[48,21,36,22],[48,22,36,23,"__esModule"],[48,32,36,33],[48,35,36,37,"mod"],[48,38,36,40],[48,41,36,43],[49,6,36,45],[49,15,36,54],[49,17,36,56,"mod"],[50,4,36,60],[50,5,36,61],[51,2,37,0],[51,3,37,1],[52,2,38,0,"Object"],[52,8,38,6],[52,9,38,7,"defineProperty"],[52,23,38,21],[52,24,38,22,"exports"],[52,31,38,29],[52,33,38,31],[52,45,38,43],[52,47,38,45],[53,4,38,47,"value"],[53,9,38,52],[53,11,38,54],[54,2,38,59],[54,3,38,60],[54,4,38,61],[55,2,39,0,"exports"],[55,9,39,7],[55,10,39,8,"getStateFromPath"],[55,26,39,24],[55,29,39,27,"getStateFromPath"],[55,45,39,43],[56,2,40,0],[56,6,40,6,"native_1"],[56,14,40,14],[56,17,40,17,"require"],[56,24,40,24],[56,25,40,24,"_dependencyMap"],[56,39,40,24],[56,42,40,51],[56,43,40,52],[57,2,41,0],[57,6,41,6,"escape_string_regexp_1"],[57,28,41,28],[57,31,41,31,"__importDefault"],[57,46,41,46],[57,47,41,47,"require"],[57,54,41,54],[57,55,41,54,"_dependencyMap"],[57,69,41,54],[57,72,41,77],[57,73,41,78],[57,74,41,79],[58,2,42,0],[58,6,42,6,"findFocusedRoute_1"],[58,24,42,24],[58,27,42,27,"require"],[58,34,42,34],[58,35,42,34,"_dependencyMap"],[58,49,42,34],[58,52,42,55],[58,53,42,56],[59,2,43,0],[59,6,43,6,"expo"],[59,10,43,10],[59,13,43,13,"__importStar"],[59,25,43,25],[59,26,43,26,"require"],[59,33,43,33],[59,34,43,33,"_dependencyMap"],[59,48,43,33],[59,51,43,60],[59,52,43,61],[59,53,43,62],[60,2,44,0],[60,6,44,6,"constants_1"],[60,17,44,17],[60,20,44,20,"require"],[60,27,44,27],[60,28,44,27,"_dependencyMap"],[60,42,44,27],[60,45,44,42],[60,46,44,43],[61,2,45,0],[62,0,46,0],[63,0,47,0],[64,0,48,0],[65,0,49,0],[66,0,50,0],[67,0,51,0],[68,0,52,0],[69,0,53,0],[70,0,54,0],[71,0,55,0],[72,0,56,0],[73,0,57,0],[74,0,58,0],[75,0,59,0],[76,0,60,0],[77,0,61,0],[78,0,62,0],[79,0,63,0],[80,0,64,0],[81,0,65,0],[82,2,66,0],[82,11,66,9,"getStateFromPath"],[82,27,66,25,"getStateFromPath"],[82,28,66,26,"path"],[82,32,66,30],[82,34,66,32,"options"],[82,41,66,39],[82,43,70,2],[83,4,70,2],[83,8,68,0,"segments"],[83,16,68,8],[83,19,68,8,"arguments"],[83,28,68,8],[83,29,68,8,"length"],[83,35,68,8],[83,43,68,8,"arguments"],[83,52,68,8],[83,60,68,8,"undefined"],[83,69,68,8],[83,72,68,8,"arguments"],[83,81,68,8],[83,87,68,11],[83,89,68,13],[84,4,71,4],[84,8,71,4,"_getConfigResources"],[84,27,71,4],[84,30,71,58,"getConfigResources"],[84,48,71,76],[84,49,71,77,"options"],[84,56,71,84],[85,6,72,4],[86,6,73,4,"segments"],[87,6,74,4],[88,6,75,4],[88,7,75,5],[89,6,71,12,"initialRoutes"],[89,19,71,25],[89,22,71,25,"_getConfigResources"],[89,41,71,25],[89,42,71,12,"initialRoutes"],[89,55,71,25],[90,6,71,27,"configs"],[90,13,71,34],[90,16,71,34,"_getConfigResources"],[90,35,71,34],[90,36,71,27,"configs"],[90,43,71,34],[91,6,71,36,"configWithRegexes"],[91,23,71,53],[91,26,71,53,"_getConfigResources"],[91,45,71,53],[91,46,71,36,"configWithRegexes"],[91,63,71,53],[92,4,76,4],[92,8,76,10,"screens"],[92,15,76,17],[92,18,76,20,"options"],[92,25,76,27],[92,27,76,29,"screens"],[92,34,76,36],[93,4,77,4],[94,4,78,4],[94,8,78,10,"expoPath"],[94,16,78,18],[94,19,78,21,"expo"],[94,23,78,25],[94,24,78,26,"getUrlWithReactNavigationConcessions"],[94,60,78,62],[94,61,78,63,"path"],[94,65,78,67],[94,66,78,68],[95,4,79,4],[96,4,80,4],[97,4,81,4],[97,8,81,8,"remaining"],[97,17,81,17],[97,20,81,20,"expo"],[97,24,81,24],[97,25,81,25,"cleanPath"],[97,34,81,34],[97,35,81,35,"expoPath"],[97,43,81,43],[97,44,81,44,"nonstandardPathname"],[97,63,81,63],[97,64,81,64],[98,4,82,4],[99,4,83,4],[100,4,84,4],[101,4,85,4],[102,4,86,4],[103,4,87,4],[104,4,88,4],[105,4,89,4],[105,8,89,10,"prefix"],[105,14,89,16],[105,17,89,19,"options"],[105,24,89,26],[105,26,89,28,"path"],[105,30,89,32],[105,32,89,34,"replace"],[105,39,89,41],[105,40,89,42],[105,45,89,47],[105,47,89,49],[105,49,89,51],[105,50,89,52],[105,51,89,53],[105,52,89,54],[106,4,90,4],[106,8,90,8,"prefix"],[106,14,90,14],[106,16,90,16],[107,6,91,8],[108,6,92,8],[108,10,92,14,"normalizedPrefix"],[108,26,92,30],[108,29,92,33,"prefix"],[108,35,92,39],[108,36,92,40,"endsWith"],[108,44,92,48],[108,45,92,49],[108,48,92,52],[108,49,92,53],[108,52,92,56,"prefix"],[108,58,92,62],[108,61,92,65],[108,64,92,68,"prefix"],[108,70,92,74],[108,73,92,77],[109,6,93,8],[110,6,94,8],[110,10,94,12],[110,11,94,13,"remaining"],[110,20,94,22],[110,21,94,23,"startsWith"],[110,31,94,33],[110,32,94,34,"normalizedPrefix"],[110,48,94,50],[110,49,94,51],[110,51,94,53],[111,8,95,12],[111,15,95,19,"undefined"],[111,24,95,28],[112,6,96,8],[113,6,97,8],[114,6,98,8,"remaining"],[114,15,98,17],[114,18,98,20,"remaining"],[114,27,98,29],[114,28,98,30,"replace"],[114,35,98,37],[114,36,98,38,"normalizedPrefix"],[114,52,98,54],[114,54,98,56],[114,56,98,58],[114,57,98,59],[115,4,99,4],[116,4,100,4],[116,8,100,8,"screens"],[116,15,100,15],[116,20,100,20,"undefined"],[116,29,100,29],[116,31,100,31],[117,6,101,8],[118,6,102,8],[118,10,102,14,"routes"],[118,17,102,20],[118,20,102,23,"remaining"],[118,29,102,32],[118,30,103,13,"split"],[118,35,103,18],[118,36,103,19],[118,39,103,22],[118,40,103,23],[118,41,104,13,"filter"],[118,47,104,19],[118,48,104,20,"Boolean"],[118,55,104,27],[118,56,104,28],[118,57,105,13,"map"],[118,60,105,16],[118,61,105,18,"segment"],[118,68,105,25],[118,72,105,30],[119,8,106,12],[119,12,106,18,"name"],[119,16,106,22],[119,19,106,25,"decodeURIComponent"],[119,37,106,43],[119,38,106,44,"segment"],[119,45,106,51],[119,46,106,52],[120,8,107,12],[120,15,107,19],[121,10,107,21,"name"],[122,8,107,26],[122,9,107,27],[123,6,108,8],[123,7,108,9],[123,8,108,10],[124,6,109,8],[124,10,109,12,"routes"],[124,17,109,18],[124,18,109,19,"length"],[124,24,109,25],[124,26,109,27],[125,8,110,12],[125,15,110,19,"createNestedStateObject"],[125,38,110,42],[125,39,110,43,"expoPath"],[125,47,110,51],[125,49,110,53,"routes"],[125,56,110,59],[125,58,110,61,"initialRoutes"],[125,71,110,74],[125,73,110,76],[125,75,110,78],[125,77,110,80,"expoPath"],[125,85,110,88],[125,86,110,89,"url"],[125,89,110,92],[125,90,110,93,"hash"],[125,94,110,97],[125,95,110,98],[126,6,111,8],[127,6,112,8],[127,13,112,15,"undefined"],[127,22,112,24],[128,4,113,4],[129,4,114,4],[129,8,114,8,"remaining"],[129,17,114,17],[129,22,114,22],[129,25,114,25],[129,27,114,27],[130,6,115,8],[131,6,116,8],[132,6,117,8],[133,6,118,8],[133,10,118,14,"match"],[133,15,118,19],[133,18,118,22,"expo"],[133,22,118,26],[133,23,118,27,"matchForEmptyPath"],[133,40,118,44],[133,41,118,45,"configWithRegexes"],[133,58,118,62],[133,59,118,63],[134,6,119,8],[135,6,120,8],[136,6,121,8],[137,6,122,8],[138,6,123,8],[139,6,124,8],[140,6,125,8],[141,6,126,8],[142,6,127,8],[143,6,128,8],[143,10,128,12,"match"],[143,15,128,17],[143,17,128,19],[144,8,129,12],[144,15,129,19,"createNestedStateObject"],[144,38,129,42],[144,39,129,43,"expoPath"],[144,47,129,51],[144,49,129,53,"match"],[144,54,129,58],[144,55,129,59,"routeNames"],[144,65,129,69],[144,66,129,70,"map"],[144,69,129,73],[144,70,129,75,"name"],[144,74,129,79],[144,79,129,85],[145,10,129,87,"name"],[146,8,129,92],[146,9,129,93],[146,10,129,94],[146,11,129,95],[146,13,129,97,"initialRoutes"],[146,26,129,110],[146,28,129,112,"configs"],[146,35,129,119],[146,37,129,121,"expoPath"],[146,45,129,129],[146,46,129,130,"url"],[146,49,129,133],[146,50,129,134,"hash"],[146,54,129,138],[146,55,129,139],[147,6,130,8],[148,6,131,8],[148,13,131,15,"undefined"],[148,22,131,24],[149,4,132,4],[150,4,133,4],[150,8,133,8,"result"],[150,14,133,14],[151,4,134,4],[151,8,134,8,"current"],[151,15,134,15],[152,4,135,4],[153,4,136,4],[154,4,137,4],[154,8,137,4,"_matchAgainstConfigs"],[154,28,137,4],[154,31,137,38,"matchAgainstConfigs"],[154,50,137,57],[154,51,137,58,"remaining"],[154,60,137,67],[154,62,137,69,"configWithRegexes"],[154,79,137,86],[154,80,137,87],[155,6,137,12,"routes"],[155,12,137,18],[155,15,137,18,"_matchAgainstConfigs"],[155,35,137,18],[155,36,137,12,"routes"],[155,42,137,18],[156,6,137,20,"remainingPath"],[156,19,137,33],[156,22,137,33,"_matchAgainstConfigs"],[156,42,137,33],[156,43,137,20,"remainingPath"],[156,56,137,33],[157,4,138,4],[157,8,138,8,"routes"],[157,14,138,14],[157,19,138,19,"undefined"],[157,28,138,28],[157,30,138,30],[158,6,139,8],[159,6,140,8,"current"],[159,13,140,15],[159,16,140,18,"createNestedStateObject"],[159,39,140,41],[159,40,140,42,"expoPath"],[159,48,140,50],[159,50,140,52,"routes"],[159,56,140,58],[159,58,140,60,"initialRoutes"],[159,71,140,73],[159,73,140,75,"configs"],[159,80,140,82],[159,82,140,84,"expoPath"],[159,90,140,92],[159,91,140,93,"url"],[159,94,140,96],[159,95,140,97,"hash"],[159,99,140,101],[159,100,140,102],[160,6,141,8,"remaining"],[160,15,141,17],[160,18,141,20,"remainingPath"],[160,31,141,33],[161,6,142,8,"result"],[161,12,142,14],[161,15,142,17,"current"],[161,22,142,24],[162,4,143,4],[163,4,144,4],[163,8,144,8,"current"],[163,15,144,15],[163,19,144,19],[163,23,144,23],[163,27,144,27,"result"],[163,33,144,33],[163,37,144,37],[163,41,144,41],[163,43,144,43],[164,6,145,8],[164,13,145,15,"undefined"],[164,22,145,24],[165,4,146,4],[166,4,147,4],[166,11,147,11,"result"],[166,17,147,17],[167,2,148,0],[168,2,149,0],[169,0,150,0],[170,0,151,0],[171,2,152,0],[171,6,152,4,"cachedConfigResources"],[171,27,152,25],[171,30,152,28],[171,31,153,4,"undefined"],[171,40,153,13],[171,42,154,4,"prepareConfigResources"],[171,64,154,26],[171,65,154,27],[171,66,154,28],[171,67,155,1],[172,2,156,0],[172,11,156,9,"getConfigResources"],[172,29,156,27,"getConfigResources"],[172,30,156,28,"options"],[172,37,156,35],[173,2,157,0],[174,2,158,0,"previousSegments"],[175,2,159,0],[176,2,159,0],[176,4,160,2],[177,4,161,4],[178,4,162,4],[179,4,163,4,"cachedConfigResources"],[179,25,163,25],[179,28,163,28],[179,29,163,29,"options"],[179,36,163,36],[179,38,163,38,"prepareConfigResources"],[179,60,163,60],[179,61,163,61,"options"],[179,68,163,68],[179,70,163,70,"previousSegments"],[179,86,163,86],[179,87,163,87],[179,88,163,88],[180,4,164,4],[181,4,165,4],[182,4,166,4],[182,11,166,11,"cachedConfigResources"],[182,32,166,32],[182,33,166,33],[182,34,166,34],[182,35,166,35],[183,2,167,0],[184,2,168,0],[184,11,168,9,"prepareConfigResources"],[184,33,168,31,"prepareConfigResources"],[184,34,168,32,"options"],[184,41,168,39],[184,43,168,41,"previousSegments"],[184,59,168,57],[184,61,168,59],[185,4,169,4],[185,8,169,8,"options"],[185,15,169,15],[185,17,169,17],[186,6,170,8],[186,7,170,9],[186,8,170,10],[186,10,170,12,"native_1"],[186,18,170,20],[186,19,170,21,"validatePathConfig"],[186,37,170,39],[186,39,170,41,"options"],[186,46,170,48],[186,47,170,49],[187,4,171,4],[188,4,172,4],[188,8,172,10,"initialRoutes"],[188,21,172,23],[188,24,172,26,"getInitialRoutes"],[188,40,172,42],[188,41,172,43,"options"],[188,48,172,50],[188,49,172,51],[189,4,173,4],[189,8,173,10,"configs"],[189,15,173,17],[189,18,173,20,"getNormalizedConfigs"],[189,38,173,40],[189,39,173,41,"initialRoutes"],[189,52,173,54],[189,54,173,56,"options"],[189,61,173,63],[189,63,173,65,"screens"],[189,70,173,72],[189,72,173,74,"previousSegments"],[189,88,173,90],[189,89,173,91],[190,4,174,4,"checkForDuplicatedConfigs"],[190,29,174,29],[190,30,174,30,"configs"],[190,37,174,37],[190,38,174,38],[191,4,175,4],[191,8,175,10,"configWithRegexes"],[191,25,175,27],[191,28,175,30,"getConfigsWithRegexes"],[191,49,175,51],[191,50,175,52,"configs"],[191,57,175,59],[191,58,175,60],[192,4,176,4],[192,11,176,11],[193,6,177,8,"initialRoutes"],[193,19,177,21],[194,6,178,8,"configs"],[194,13,178,15],[195,6,179,8,"configWithRegexes"],[196,4,180,4],[196,5,180,5],[197,2,181,0],[198,2,182,0],[198,11,182,9,"getInitialRoutes"],[198,27,182,25,"getInitialRoutes"],[198,28,182,26,"options"],[198,35,182,33],[198,37,182,35],[199,4,183,4],[199,8,183,10,"initialRoutes"],[199,21,183,23],[199,24,183,26],[199,26,183,28],[200,4,184,4],[200,8,184,8,"options"],[200,15,184,15],[200,17,184,17,"initialRouteName"],[200,33,184,33],[200,35,184,35],[201,6,185,8,"initialRoutes"],[201,19,185,21],[201,20,185,22,"push"],[201,24,185,26],[201,25,185,27],[202,8,186,12,"initialRouteName"],[202,24,186,28],[202,26,186,30,"options"],[202,33,186,37],[202,34,186,38,"initialRouteName"],[202,50,186,54],[203,8,187,12,"parentScreens"],[203,21,187,25],[203,23,187,27],[204,6,188,8],[204,7,188,9],[204,8,188,10],[205,4,189,4],[206,4,190,4],[206,11,190,11,"initialRoutes"],[206,24,190,24],[207,2,191,0],[208,2,192,0],[208,11,192,9,"getNormalizedConfigs"],[208,31,192,29,"getNormalizedConfigs"],[208,32,192,30,"initialRoutes"],[208,45,192,43],[208,47,196,2],[209,4,196,2],[209,8,192,45,"screens"],[209,15,192,52],[209,18,192,52,"arguments"],[209,27,192,52],[209,28,192,52,"length"],[209,34,192,52],[209,42,192,52,"arguments"],[209,51,192,52],[209,59,192,52,"undefined"],[209,68,192,52],[209,71,192,52,"arguments"],[209,80,192,52],[209,86,192,55],[209,87,192,56],[209,88,192,57],[210,4,192,57],[211,4,193,0],[212,4,194,0,"previousSegments"],[213,4,195,0],[214,4,195,0],[214,6,195,0,"arguments"],[214,15,195,0],[214,16,195,0,"length"],[214,22,195,0],[214,29,195,0,"arguments"],[214,38,195,0],[214,44,195,0,"undefined"],[214,53,195,0],[215,4,197,4],[216,4,198,4],[216,11,198,11],[216,13,198,13],[216,14,199,9,"concat"],[216,20,199,15],[216,21,199,16],[216,24,199,19,"Object"],[216,30,199,25],[216,31,199,26,"keys"],[216,35,199,30],[216,36,199,31,"screens"],[216,43,199,38],[216,44,199,39],[216,45,199,40,"map"],[216,48,199,43],[216,49,199,45,"key"],[216,52,199,48],[216,56,199,53,"createNormalizedConfigs"],[216,79,199,76],[216,80,199,77,"key"],[216,83,199,80],[216,85,199,82,"screens"],[216,92,199,89],[216,94,199,91],[216,96,199,93],[216,98,199,95,"initialRoutes"],[216,111,199,108],[216,113,199,110],[216,115,199,112],[216,116,199,113],[216,117,199,114],[216,118,199,115],[216,119,200,9,"map"],[216,122,200,12],[216,123,200,13,"expo"],[216,127,200,17],[216,128,200,18,"appendIsInitial"],[216,143,200,33],[216,144,200,34,"initialRoutes"],[216,157,200,47],[216,158,200,48],[216,159,200,49],[216,160,201,9,"sort"],[216,164,201,13],[216,165,201,14,"expo"],[216,169,201,18],[216,170,201,19,"getRouteConfigSorter"],[216,190,201,39],[216,191,201,40,"previousSegments"],[216,207,201,56],[216,208,201,57],[216,209,201,58],[217,4,202,4],[218,4,203,4],[219,4,204,4],[220,4,205,4],[221,4,206,4],[222,4,207,4],[223,4,208,4],[224,4,209,4],[225,4,210,4],[226,4,211,4],[227,4,212,4],[228,4,213,4],[229,4,214,4],[230,4,215,4],[231,4,216,4],[232,4,217,4],[233,4,218,4],[234,4,219,4],[235,4,220,4],[236,4,221,4],[237,4,222,4],[238,4,223,4],[239,4,224,4],[240,4,225,4],[241,4,226,4],[242,4,227,4],[243,4,228,4],[244,4,229,4],[245,4,230,4],[246,4,231,4],[247,4,232,4],[248,4,233,4],[249,4,234,4],[250,4,235,4],[251,4,236,4],[252,4,237,4],[253,4,238,4],[254,4,239,4],[255,4,240,4],[256,4,241,4],[257,4,242,4],[258,4,243,4],[259,4,244,4],[260,4,245,4],[261,4,246,4],[262,2,247,0],[263,2,248,0],[263,11,248,9,"checkForDuplicatedConfigs"],[263,36,248,34,"checkForDuplicatedConfigs"],[263,37,248,35,"configs"],[263,44,248,42],[263,46,248,44],[264,4,249,4],[265,4,250,4,"configs"],[265,11,250,11],[265,12,250,12,"reduce"],[265,18,250,18],[265,19,250,19],[265,20,250,20,"acc"],[265,23,250,23],[265,25,250,25,"config"],[265,31,250,31],[265,36,250,36],[266,6,251,8],[266,10,251,12,"acc"],[266,13,251,15],[266,14,251,16,"config"],[266,20,251,22],[266,21,251,23,"pattern"],[266,28,251,30],[266,29,251,31],[266,31,251,33],[267,8,252,12],[267,12,252,18,"a"],[267,13,252,19],[267,16,252,22,"acc"],[267,19,252,25],[267,20,252,26,"config"],[267,26,252,32],[267,27,252,33,"pattern"],[267,34,252,40],[267,35,252,41],[267,36,252,42,"routeNames"],[267,46,252,52],[268,8,253,12],[268,12,253,18,"b"],[268,13,253,19],[268,16,253,22,"config"],[268,22,253,28],[268,23,253,29,"routeNames"],[268,33,253,39],[269,8,254,12],[270,8,255,12],[271,8,256,12],[271,12,256,18,"intersects"],[271,22,256,28],[271,25,256,31,"a"],[271,26,256,32],[271,27,256,33,"length"],[271,33,256,39],[271,36,256,42,"b"],[271,37,256,43],[271,38,256,44,"length"],[271,44,256,50],[271,47,256,53,"b"],[271,48,256,54],[271,49,256,55,"every"],[271,54,256,60],[271,55,256,61],[271,56,256,62,"it"],[271,58,256,64],[271,60,256,66,"i"],[271,61,256,67],[271,66,256,72,"a"],[271,67,256,73],[271,68,256,74,"i"],[271,69,256,75],[271,70,256,76],[271,75,256,81,"it"],[271,77,256,83],[271,78,256,84],[271,81,256,87,"a"],[271,82,256,88],[271,83,256,89,"every"],[271,88,256,94],[271,89,256,95],[271,90,256,96,"it"],[271,92,256,98],[271,94,256,100,"i"],[271,95,256,101],[271,100,256,106,"b"],[271,101,256,107],[271,102,256,108,"i"],[271,103,256,109],[271,104,256,110],[271,109,256,115,"it"],[271,111,256,117],[271,112,256,118],[272,8,257,12],[272,12,257,16],[272,13,257,17,"intersects"],[272,23,257,27],[272,25,257,29],[273,10,258,16],[273,16,258,22],[273,20,258,26,"Error"],[273,25,258,31],[273,26,258,32],[273,91,258,97,"config"],[273,97,258,103],[273,98,258,104,"pattern"],[273,105,258,111],[273,128,258,134,"a"],[273,129,258,135],[273,130,258,136,"join"],[273,134,258,140],[273,135,258,141],[273,140,258,146],[273,141,258,147],[273,151,258,157,"b"],[273,152,258,158],[273,153,258,159,"join"],[273,157,258,163],[273,158,258,164],[273,163,258,169],[273,164,258,170],[273,236,258,242],[273,237,258,243],[274,8,259,12],[275,6,260,8],[276,6,261,8],[276,13,261,15,"Object"],[276,19,261,21],[276,20,261,22,"assign"],[276,26,261,28],[276,27,261,29,"acc"],[276,30,261,32],[276,32,261,34],[277,8,262,12],[277,9,262,13,"config"],[277,15,262,19],[277,16,262,20,"pattern"],[277,23,262,27],[277,26,262,30,"config"],[278,6,263,8],[278,7,263,9],[278,8,263,10],[279,4,264,4],[279,5,264,5],[279,7,264,7],[279,8,264,8],[279,9,264,9],[279,10,264,10],[280,2,265,0],[281,2,266,0],[281,11,266,9,"getConfigsWithRegexes"],[281,32,266,30,"getConfigsWithRegexes"],[281,33,266,31,"configs"],[281,40,266,38],[281,42,266,40],[282,4,267,4],[282,11,267,11,"configs"],[282,18,267,18],[282,19,267,19,"map"],[282,22,267,22],[282,23,267,24,"c"],[282,24,267,25],[282,29,267,31],[283,6,268,8],[283,9,268,11,"c"],[283,10,268,12],[284,6,269,8],[285,6,270,8],[286,6,271,8],[287,6,272,8,"regex"],[287,11,272,13],[287,13,272,15,"expo"],[287,17,272,19],[287,18,272,20,"configRegExp"],[287,30,272,32],[287,31,272,33,"c"],[287,32,272,34],[288,6,273,8],[289,4,274,4],[289,5,274,5],[289,6,274,6],[289,7,274,7],[290,2,275,0],[291,2,276,0],[291,6,276,6,"joinPaths"],[291,15,276,15],[291,18,276,18],[291,27,276,18,"joinPaths"],[291,28,276,18],[292,4,276,18],[292,13,276,18,"_len"],[292,17,276,18],[292,20,276,18,"arguments"],[292,29,276,18],[292,30,276,18,"length"],[292,36,276,18],[292,38,276,22,"paths"],[292,43,276,27],[292,50,276,27,"Array"],[292,55,276,27],[292,56,276,27,"_len"],[292,60,276,27],[292,63,276,27,"_key"],[292,67,276,27],[292,73,276,27,"_key"],[292,77,276,27],[292,80,276,27,"_len"],[292,84,276,27],[292,86,276,27,"_key"],[292,90,276,27],[293,6,276,22,"paths"],[293,11,276,27],[293,12,276,27,"_key"],[293,16,276,27],[293,20,276,27,"arguments"],[293,29,276,27],[293,30,276,27,"_key"],[293,34,276,27],[294,4,276,27],[295,4,276,27],[295,11,276,32],[295,13,276,34],[295,14,277,5,"concat"],[295,20,277,11],[295,21,277,12],[295,24,277,15,"paths"],[295,29,277,20],[295,30,277,21,"map"],[295,33,277,24],[295,34,277,26,"p"],[295,35,277,27],[295,39,277,32,"p"],[295,40,277,33],[295,41,277,34,"split"],[295,46,277,39],[295,47,277,40],[295,50,277,43],[295,51,277,44],[295,52,277,45],[295,53,277,46],[295,54,278,5,"filter"],[295,60,278,11],[295,61,278,12,"Boolean"],[295,68,278,19],[295,69,278,20],[295,70,279,5,"join"],[295,74,279,9],[295,75,279,10],[295,78,279,13],[295,79,279,14],[296,2,279,14],[297,2,280,0],[297,6,280,6,"matchAgainstConfigs"],[297,25,280,25],[297,28,280,28,"matchAgainstConfigs"],[297,29,280,29,"remaining"],[297,38,280,38],[297,40,280,40,"configs"],[297,47,280,47],[297,52,280,52],[298,4,281,4],[298,8,281,8,"routes"],[298,14,281,14],[299,4,282,4],[299,8,282,8,"remainingPath"],[299,21,282,21],[299,24,282,24,"remaining"],[299,33,282,33],[300,4,283,4],[301,4,284,4],[301,8,284,10,"allParams"],[301,17,284,19],[301,20,284,22,"Object"],[301,26,284,28],[301,27,284,29,"create"],[301,33,284,35],[301,34,284,36],[301,38,284,40],[301,39,284,41],[302,4,285,4],[303,4,286,4],[304,4,286,4],[304,8,286,4,"_loop"],[304,13,286,4],[304,25,286,4,"_loop"],[304,26,286,4,"config"],[304,32,286,4],[304,34,287,34],[305,8,288,8],[305,12,288,12],[305,13,288,13,"config"],[305,19,288,19],[305,20,288,20,"regex"],[305,25,288,25],[305,27,288,27],[306,10,288,27],[307,8,290,8],[308,8,291,8],[308,12,291,14,"match"],[308,17,291,19],[308,20,291,22,"remainingPath"],[308,33,291,35],[308,34,291,36,"match"],[308,39,291,41],[308,40,291,42,"config"],[308,46,291,48],[308,47,291,49,"regex"],[308,52,291,54],[308,53,291,55],[309,8,292,8],[310,8,293,8],[310,12,293,12,"match"],[310,17,293,17],[310,19,293,19],[311,10,294,12],[311,14,294,18,"matchResult"],[311,25,294,29],[311,28,294,32,"config"],[311,34,294,38],[311,35,294,39,"pattern"],[311,42,294,46],[311,44,294,48,"split"],[311,49,294,53],[311,50,294,54],[311,53,294,57],[311,54,294,58],[311,55,294,59,"reduce"],[311,61,294,65],[311,62,294,66],[311,63,294,67,"acc"],[311,66,294,70],[311,68,294,72,"p"],[311,69,294,73],[311,71,294,75,"index"],[311,76,294,80],[311,81,294,85],[312,12,295,16],[312,16,295,20],[312,17,295,21,"expo"],[312,21,295,25],[312,22,295,26,"isDynamicPart"],[312,35,295,39],[312,36,295,40,"p"],[312,37,295,41],[312,38,295,42],[312,40,295,44],[313,14,296,20],[313,21,296,27,"acc"],[313,24,296,30],[314,12,297,16],[315,12,298,16,"acc"],[315,15,298,19],[315,16,298,20,"pos"],[315,19,298,23],[315,23,298,27],[315,24,298,28],[316,12,299,16],[317,12,300,16],[317,16,300,22,"decodedParamSegment"],[317,35,300,41],[317,38,300,44,"expo"],[317,42,300,48],[317,43,300,49,"safelyDecodeURIComponent"],[317,67,300,73],[318,12,301,16],[319,12,302,16],[320,12,303,16,"match"],[320,17,303,21],[320,18,303,22],[320,19,303,23,"acc"],[320,22,303,26],[320,23,303,27,"pos"],[320,26,303,30],[320,29,303,33],[320,30,303,34],[320,34,303,38],[320,35,303,39],[321,12,304,20],[322,12,304,20],[322,13,305,21,"replace"],[322,20,305,28],[322,21,305,29],[322,26,305,34],[322,28,305,36],[322,30,305,38],[322,31,305,39],[322,32,305,40],[323,12,306,16],[324,12,307,16,"Object"],[324,18,307,22],[324,19,307,23,"assign"],[324,25,307,29],[324,26,307,30,"acc"],[324,29,307,33],[324,30,307,34,"matchedParams"],[324,43,307,47],[324,45,307,49],[325,14,308,20],[325,15,308,21,"p"],[325,16,308,22],[325,19,308,25,"Object"],[325,25,308,31],[325,26,308,32,"assign"],[325,32,308,38],[325,33,308,39,"acc"],[325,36,308,42],[325,37,308,43,"matchedParams"],[325,50,308,56],[325,51,308,57,"p"],[325,52,308,58],[325,53,308,59],[325,57,308,63],[325,58,308,64],[325,59,308,65],[325,61,308,67],[326,16,309,24],[326,17,309,25,"index"],[326,22,309,30],[326,25,309,33,"decodedParamSegment"],[327,14,310,20],[327,15,310,21],[328,12,311,16],[328,13,311,17],[328,14,311,18],[329,12,312,16],[329,19,312,23,"acc"],[329,22,312,26],[330,10,313,12],[330,11,313,13],[330,13,313,15],[331,12,313,17,"pos"],[331,15,313,20],[331,19,313,24],[332,12,313,26,"matchedParams"],[332,25,313,39],[332,27,313,41],[332,28,313,42],[333,10,313,44],[333,11,313,45],[333,12,313,46],[334,10,314,12],[334,14,314,18,"matchedParams"],[334,27,314,31],[334,30,314,34,"matchResult"],[334,41,314,45],[334,42,314,46,"matchedParams"],[334,55,314,59],[334,59,314,63],[334,60,314,64],[334,61,314,65],[335,10,315,12,"routes"],[335,16,315,18],[335,19,315,21,"config"],[335,25,315,27],[335,26,315,28,"routeNames"],[335,36,315,38],[335,37,315,39,"map"],[335,40,315,42],[335,41,315,44,"name"],[335,45,315,48],[335,49,315,53],[336,12,316,16],[336,16,316,22,"routeConfig"],[336,27,316,33],[336,30,316,36,"configs"],[336,37,316,43],[336,38,316,44,"find"],[336,42,316,48],[336,43,316,50,"c"],[336,44,316,51],[336,48,316,56],[337,14,317,20],[338,14,318,20],[338,21,318,27,"c"],[338,22,318,28],[338,23,318,29,"screen"],[338,29,318,35],[338,34,318,40,"name"],[338,38,318,44],[338,42,318,48,"config"],[338,48,318,54],[338,49,318,55,"pattern"],[338,56,318,62],[338,57,318,63,"startsWith"],[338,67,318,73],[338,68,318,74,"c"],[338,69,318,75],[338,70,318,76,"pattern"],[338,77,318,83],[338,78,318,84],[339,12,319,16],[339,13,319,17],[339,14,319,18],[340,12,320,16],[341,12,321,16],[341,16,321,22,"normalizedPath"],[341,30,321,36],[341,33,321,39,"routeConfig"],[341,44,321,50],[341,46,321,52,"path"],[341,50,321,56],[341,51,321,57,"split"],[341,56,321,62],[341,57,321,63],[341,60,321,66],[341,61,321,67],[341,62,321,68,"filter"],[341,68,321,74],[341,69,321,75,"Boolean"],[341,76,321,82],[341,77,321,83],[341,78,321,84,"join"],[341,82,321,88],[341,83,321,89],[341,86,321,92],[341,87,321,93],[342,12,322,16],[343,12,323,16],[343,16,323,22,"numInitialSegments"],[343,34,323,40],[343,37,323,43,"routeConfig"],[343,48,323,54],[343,50,323,56,"pattern"],[344,12,324,20],[345,12,324,20],[345,13,325,21,"replace"],[345,20,325,28],[345,21,325,29],[345,25,325,33,"RegExp"],[345,31,325,39],[345,32,325,40],[345,35,325,43],[345,36,325,44],[345,37,325,45],[345,39,325,47,"escape_string_regexp_1"],[345,61,325,69],[345,62,325,70,"default"],[345,69,325,77],[345,71,325,79,"normalizedPath"],[345,85,325,93],[345,86,325,94],[345,89,325,97],[345,90,325,98],[345,92,325,100],[345,94,325,102],[345,95,325,103],[345,97,326,22,"split"],[345,102,326,27],[345,103,326,28],[345,106,326,31],[345,107,326,32],[345,108,326,33,"length"],[345,114,326,39],[346,12,327,16],[346,16,327,22,"params"],[346,22,327,28],[346,25,327,31,"normalizedPath"],[346,39,327,45],[346,41,328,22,"split"],[346,46,328,27],[346,47,328,28],[346,50,328,31],[346,51,328,32],[346,52,329,21,"reduce"],[346,58,329,27],[346,59,329,28],[346,60,329,29,"acc"],[346,63,329,32],[346,65,329,34,"p"],[346,66,329,35],[346,68,329,37,"index"],[346,73,329,42],[346,78,329,47],[347,14,330,20],[347,18,330,24],[347,19,330,25,"expo"],[347,23,330,29],[347,24,330,30,"isDynamicPart"],[347,37,330,43],[347,38,330,44,"p"],[347,39,330,45],[347,40,330,46],[347,42,330,48],[348,16,331,24],[348,23,331,31,"acc"],[348,26,331,34],[349,14,332,20],[350,14,333,20],[351,14,334,20],[352,14,335,20],[352,18,335,26,"offset"],[352,24,335,32],[352,27,335,35,"numInitialSegments"],[352,45,335,53],[352,48,335,56,"numInitialSegments"],[352,66,335,74],[352,69,335,77],[352,70,335,78],[352,73,335,81],[352,74,335,82],[353,14,336,20],[354,14,337,20],[355,14,338,20],[355,18,338,26,"value"],[355,23,338,31],[355,26,338,34,"expo"],[355,30,338,38],[355,31,338,39,"getParamValue"],[355,44,338,52],[355,45,338,53,"p"],[355,46,338,54],[355,48,338,56,"matchedParams"],[355,61,338,69],[355,62,338,70,"p"],[355,63,338,71],[355,64,338,72],[355,67,338,75,"index"],[355,72,338,80],[355,75,338,83,"offset"],[355,81,338,89],[355,82,338,90],[355,83,338,91],[356,14,339,20],[357,14,340,20],[357,18,340,24,"value"],[357,23,340,29],[357,25,340,31],[358,16,341,24],[359,16,342,24],[360,16,343,24],[360,20,343,30,"key"],[360,23,343,33],[360,26,343,36,"expo"],[360,30,343,40],[360,31,343,41,"replacePart"],[360,42,343,52],[360,43,343,53,"p"],[360,44,343,54],[360,45,343,55],[361,16,344,24],[362,16,345,24,"acc"],[362,19,345,27],[362,20,345,28,"key"],[362,23,345,31],[362,24,345,32],[362,27,345,35,"routeConfig"],[362,38,345,46],[362,40,345,48,"parse"],[362,45,345,53],[362,48,345,56,"key"],[362,51,345,59],[362,52,345,60],[362,55,345,63,"routeConfig"],[362,66,345,74],[362,67,345,75,"parse"],[362,72,345,80],[362,73,345,81,"key"],[362,76,345,84],[362,77,345,85],[362,78,345,86,"value"],[362,83,345,91],[362,84,345,92],[362,87,345,95,"value"],[362,92,345,100],[363,14,346,20],[364,14,347,20],[364,21,347,27,"acc"],[364,24,347,30],[365,12,348,16],[365,13,348,17],[365,15,348,19],[365,16,348,20],[365,17,348,21],[365,18,348,22],[366,12,349,16],[366,16,349,20,"params"],[366,22,349,26],[366,26,349,30,"Object"],[366,32,349,36],[366,33,349,37,"keys"],[366,37,349,41],[366,38,349,42,"params"],[366,44,349,48],[366,45,349,49],[366,46,349,50,"length"],[366,52,349,56],[366,54,349,58],[367,14,350,20,"Object"],[367,20,350,26],[367,21,350,27,"assign"],[367,27,350,33],[367,28,350,34,"allParams"],[367,37,350,43],[367,39,350,45,"params"],[367,45,350,51],[367,46,350,52],[368,14,351,20],[368,21,351,27],[369,16,351,29,"name"],[369,20,351,33],[370,16,351,35,"params"],[371,14,351,42],[371,15,351,43],[372,12,352,16],[373,12,353,16],[373,19,353,23],[374,14,353,25,"name"],[375,12,353,30],[375,13,353,31],[376,10,354,12],[376,11,354,13],[376,12,354,14],[377,10,355,12,"remainingPath"],[377,23,355,25],[377,26,355,28,"remainingPath"],[377,39,355,41],[377,40,355,42,"replace"],[377,47,355,49],[377,48,355,50,"match"],[377,53,355,55],[377,54,355,56],[377,55,355,57],[377,56,355,58],[377,58,355,60],[377,60,355,62],[377,61,355,63],[378,10,355,64],[379,8,357,8],[380,6,358,4],[380,7,358,5],[381,6,358,5,"_ret"],[381,10,358,5],[382,4,287,4],[382,9,287,9],[382,13,287,15,"config"],[382,19,287,21],[382,23,287,25,"configs"],[382,30,287,32],[383,6,287,32,"_ret"],[383,10,287,32],[383,13,287,32,"_loop"],[383,18,287,32],[383,19,287,32,"config"],[383,25,287,32],[384,6,287,32],[384,10,287,32,"_ret"],[384,14,287,32],[384,22,289,12],[385,6,289,21],[385,10,289,21,"_ret"],[385,14,289,21],[385,22,356,12],[386,4,356,18],[387,4,359,4],[388,4,360,4,"expo"],[388,8,360,8],[388,9,360,9,"populateParams"],[388,23,360,23],[388,24,360,24,"routes"],[388,30,360,30],[388,32,360,32,"allParams"],[388,41,360,41],[388,42,360,42],[389,4,361,4],[390,4,362,4],[390,11,362,11],[391,6,362,13,"routes"],[391,12,362,19],[392,6,362,21,"remainingPath"],[393,4,362,35],[393,5,362,36],[394,2,363,0],[394,3,363,1],[395,2,364,0],[395,6,364,6,"createNormalizedConfigs"],[395,29,364,29],[395,32,364,32],[395,41,364,32,"createNormalizedConfigs"],[395,42,364,33,"screen"],[395,48,364,39],[395,50,364,41,"routeConfig"],[395,61,364,52],[395,63,364,114],[396,4,364,114],[396,8,364,54,"routeNames"],[396,18,364,64],[396,21,364,64,"arguments"],[396,30,364,64],[396,31,364,64,"length"],[396,37,364,64],[396,45,364,64,"arguments"],[396,54,364,64],[396,62,364,64,"undefined"],[396,71,364,64],[396,74,364,64,"arguments"],[396,83,364,64],[396,89,364,67],[396,91,364,69],[397,4,364,69],[397,8,364,71,"initials"],[397,16,364,79],[397,19,364,79,"arguments"],[397,28,364,79],[397,29,364,79,"length"],[397,35,364,79],[397,42,364,79,"arguments"],[397,51,364,79],[397,57,364,79,"undefined"],[397,66,364,79],[398,4,364,79],[398,8,364,81,"parentScreens"],[398,21,364,94],[398,24,364,94,"arguments"],[398,33,364,94],[398,34,364,94,"length"],[398,40,364,94],[398,47,364,94,"arguments"],[398,56,364,94],[398,62,364,94,"undefined"],[398,71,364,94],[399,4,364,94],[399,8,364,96,"parentPattern"],[399,21,364,109],[399,24,364,109,"arguments"],[399,33,364,109],[399,34,364,109,"length"],[399,40,364,109],[399,47,364,109,"arguments"],[399,56,364,109],[399,62,364,109,"undefined"],[399,71,364,109],[400,4,365,4],[400,8,365,10,"configs"],[400,15,365,17],[400,18,365,20],[400,20,365,22],[401,4,366,4,"routeNames"],[401,14,366,14],[401,15,366,15,"push"],[401,19,366,19],[401,20,366,20,"screen"],[401,26,366,26],[401,27,366,27],[402,4,367,4,"parentScreens"],[402,17,367,17],[402,18,367,18,"push"],[402,22,367,22],[402,23,367,23,"screen"],[402,29,367,29],[402,30,367,30],[403,4,368,4],[404,4,369,4],[404,8,369,10,"config"],[404,14,369,16],[404,17,369,19,"routeConfig"],[404,28,369,30],[404,29,369,31,"screen"],[404,35,369,37],[404,36,369,38],[405,4,370,4],[405,8,370,8],[405,15,370,15,"config"],[405,21,370,21],[405,26,370,26],[405,34,370,34],[405,36,370,36],[406,6,371,8],[407,6,372,8],[407,10,372,14,"pattern"],[407,17,372,21],[407,20,372,24,"parentPattern"],[407,33,372,37],[407,36,372,40,"joinPaths"],[407,45,372,49],[407,46,372,50,"parentPattern"],[407,59,372,63],[407,61,372,65,"config"],[407,67,372,71],[407,68,372,72],[407,71,372,75,"config"],[407,77,372,81],[408,6,373,8,"configs"],[408,13,373,15],[408,14,373,16,"push"],[408,18,373,20],[408,19,373,21,"createConfigItem"],[408,35,373,37],[408,36,373,38,"screen"],[408,42,373,44],[408,44,373,46,"routeNames"],[408,54,373,56],[408,56,373,58,"pattern"],[408,63,373,65],[408,65,373,67,"config"],[408,71,373,73],[408,72,373,74],[408,73,373,75],[409,4,374,4],[409,5,374,5],[409,11,375,9],[409,15,375,13],[409,22,375,20,"config"],[409,28,375,26],[409,33,375,31],[409,41,375,39],[409,43,375,41],[410,6,376,8],[410,10,376,12,"pattern"],[410,18,376,19],[411,6,377,8],[412,6,378,8],[413,6,379,8],[414,6,380,8],[414,10,380,12],[414,17,380,19,"config"],[414,23,380,25],[414,24,380,26,"path"],[414,28,380,30],[414,33,380,35],[414,41,380,43],[414,43,380,45],[415,8,381,12],[415,12,381,16,"config"],[415,18,381,22],[415,19,381,23,"exact"],[415,24,381,28],[415,28,381,32,"config"],[415,34,381,38],[415,35,381,39,"path"],[415,39,381,43],[415,44,381,48,"undefined"],[415,53,381,57],[415,55,381,59],[416,10,382,16],[416,16,382,22],[416,20,382,26,"Error"],[416,25,382,31],[416,26,382,32],[416,176,382,182],[416,177,382,183],[417,8,383,12],[418,8,384,12,"pattern"],[418,16,384,19],[418,19,385,16,"config"],[418,25,385,22],[418,26,385,23,"exact"],[418,31,385,28],[418,36,385,33],[418,40,385,37],[418,43,386,22,"joinPaths"],[418,52,386,31],[418,53,386,32,"parentPattern"],[418,66,386,45],[418,70,386,49],[418,72,386,51],[418,74,386,53,"config"],[418,80,386,59],[418,81,386,60,"path"],[418,85,386,64],[418,89,386,68],[418,91,386,70],[418,92,386,71],[418,95,387,22,"config"],[418,101,387,28],[418,102,387,29,"path"],[418,106,387,33],[418,110,387,37],[418,112,387,39],[419,8,388,12],[419,12,388,16,"screen"],[419,18,388,22],[419,23,388,27,"constants_1"],[419,34,388,38],[419,35,388,39,"INTERNAL_SLOT_NAME"],[419,53,388,57],[419,55,388,59],[420,10,389,16,"configs"],[420,17,389,23],[420,18,389,24,"push"],[420,22,389,28],[420,23,389,29,"createConfigItem"],[420,39,389,45],[420,40,389,46,"screen"],[420,46,389,52],[420,48,389,54,"routeNames"],[420,58,389,64],[420,60,389,66,"pattern"],[420,68,389,73],[420,70,389,75,"config"],[420,76,389,81],[420,77,389,82,"path"],[420,81,389,86],[420,83,389,88,"config"],[420,89,389,94],[420,90,389,95,"parse"],[420,95,389,100],[420,97,389,102,"config"],[420,103,389,108],[420,104,389,109],[420,105,389,110],[421,8,390,12],[422,6,391,8],[423,6,392,8],[423,10,392,12,"config"],[423,16,392,18],[423,17,392,19,"screens"],[423,24,392,26],[423,26,392,28],[424,8,393,12],[425,8,394,12],[425,12,394,16,"config"],[425,18,394,22],[425,19,394,23,"initialRouteName"],[425,35,394,39],[425,37,394,41],[426,10,395,16,"initials"],[426,18,395,24],[426,19,395,25,"push"],[426,23,395,29],[426,24,395,30],[427,12,396,20,"initialRouteName"],[427,28,396,36],[427,30,396,38,"config"],[427,36,396,44],[427,37,396,45,"initialRouteName"],[427,53,396,61],[428,12,397,20,"parentScreens"],[429,10,398,16],[429,11,398,17],[429,12,398,18],[430,8,399,12],[431,8,400,12,"Object"],[431,14,400,18],[431,15,400,19,"keys"],[431,19,400,23],[431,20,400,24,"config"],[431,26,400,30],[431,27,400,31,"screens"],[431,34,400,38],[431,35,400,39],[431,36,400,40,"forEach"],[431,43,400,47],[431,44,400,49,"nestedConfig"],[431,56,400,61],[431,60,400,66],[432,10,401,16],[432,14,401,22,"result"],[432,20,401,28],[432,23,401,31,"createNormalizedConfigs"],[432,46,401,54],[432,47,401,55,"nestedConfig"],[432,59,401,67],[432,61,401,69,"config"],[432,67,401,75],[432,68,401,76,"screens"],[432,75,401,83],[432,77,401,85,"routeNames"],[432,87,401,95],[432,89,401,97,"initials"],[432,97,401,105],[432,99,401,107],[432,100,401,108],[432,103,401,111,"parentScreens"],[432,116,401,124],[432,117,401,125],[432,119,401,127,"pattern"],[432,127,401,134],[432,131,401,138,"parentPattern"],[432,144,401,151],[432,145,401,152],[433,10,402,16,"configs"],[433,17,402,23],[433,18,402,24,"push"],[433,22,402,28],[433,23,402,29],[433,26,402,32,"result"],[433,32,402,38],[433,33,402,39],[434,8,403,12],[434,9,403,13],[434,10,403,14],[435,6,404,8],[436,4,405,4],[437,4,406,4,"routeNames"],[437,14,406,14],[437,15,406,15,"pop"],[437,18,406,18],[437,19,406,19],[437,20,406,20],[438,4,407,4],[438,11,407,11,"configs"],[438,18,407,18],[439,2,408,0],[439,3,408,1],[440,2,409,0],[440,6,409,6,"createConfigItem"],[440,22,409,22],[440,25,409,25],[440,34,409,25,"createConfigItem"],[440,35,409,26,"screen"],[440,41,409,32],[440,43,409,34,"routeNames"],[440,53,409,44],[440,55,409,46,"pattern"],[440,62,409,53],[440,64,409,55,"path"],[440,68,409,59],[440,70,409,96],[441,4,409,96],[441,8,409,61,"parse"],[441,13,409,66],[441,16,409,66,"arguments"],[441,25,409,66],[441,26,409,66,"length"],[441,32,409,66],[441,40,409,66,"arguments"],[441,49,409,66],[441,57,409,66,"undefined"],[441,66,409,66],[441,69,409,66,"arguments"],[441,78,409,66],[441,84,409,69,"undefined"],[441,93,409,78],[442,4,409,78],[442,8,409,80,"config"],[442,14,409,86],[442,17,409,86,"arguments"],[442,26,409,86],[442,27,409,86,"length"],[442,33,409,86],[442,41,409,86,"arguments"],[442,50,409,86],[442,58,409,86,"undefined"],[442,67,409,86],[442,70,409,86,"arguments"],[442,79,409,86],[442,85,409,89],[442,86,409,90],[442,87,409,91],[443,4,410,4],[444,4,411,4,"pattern"],[444,11,411,11],[444,14,411,14,"pattern"],[444,21,411,21],[444,22,411,22,"split"],[444,27,411,27],[444,28,411,28],[444,31,411,31],[444,32,411,32],[444,33,411,33,"filter"],[444,39,411,39],[444,40,411,40,"Boolean"],[444,47,411,47],[444,48,411,48],[444,49,411,49,"join"],[444,53,411,53],[444,54,411,54],[444,57,411,57],[444,58,411,58],[445,4,412,4],[446,4,413,4],[446,8,413,10,"regex"],[446,13,413,15],[446,16,413,18,"pattern"],[446,23,413,25],[446,26,413,28,"expo"],[446,30,413,32],[446,31,413,33,"routePatternToRegex"],[446,50,413,52],[446,51,413,53,"pattern"],[446,58,413,60],[446,59,413,61],[446,62,413,64,"undefined"],[446,71,413,73],[447,4,414,4],[448,4,415,4],[449,4,416,4],[450,4,417,4],[451,4,418,4],[452,4,419,4],[453,4,420,4],[454,4,421,4],[455,4,422,4],[456,4,423,4],[457,4,424,4],[458,4,425,4],[459,4,426,4],[460,4,427,4],[461,4,428,4],[461,11,428,11],[462,6,429,8,"screen"],[462,12,429,14],[463,6,430,8,"regex"],[463,11,430,13],[464,6,431,8,"pattern"],[464,13,431,15],[465,6,432,8,"path"],[465,10,432,12],[466,6,433,8],[467,6,434,8,"routeNames"],[467,16,434,18],[467,18,434,20],[467,19,434,21],[467,22,434,24,"routeNames"],[467,32,434,34],[467,33,434,35],[468,6,435,8,"parse"],[468,11,435,13],[469,6,436,8],[470,6,437,8],[470,9,437,11,"expo"],[470,13,437,15],[470,14,437,16,"createConfig"],[470,26,437,28],[470,27,437,29,"screen"],[470,33,437,35],[470,35,437,37,"pattern"],[470,42,437,44],[470,44,437,46,"routeNames"],[470,54,437,56],[470,56,437,58,"config"],[470,62,437,64],[471,6,438,8],[472,4,439,4],[472,5,439,5],[473,2,440,0],[473,3,440,1],[474,2,441,0],[474,6,441,6,"findParseConfigForRoute"],[474,29,441,29],[474,32,441,32,"findParseConfigForRoute"],[474,33,441,33,"routeName"],[474,42,441,42],[474,44,441,44,"flatConfig"],[474,54,441,54],[474,59,441,59],[475,4,442,4],[475,9,442,9],[475,13,442,15,"config"],[475,19,442,21],[475,23,442,25,"flatConfig"],[475,33,442,35],[475,35,442,37],[476,6,443,8],[476,10,443,12,"routeName"],[476,19,443,21],[476,24,443,26,"config"],[476,30,443,32],[476,31,443,33,"routeNames"],[476,41,443,43],[476,42,443,44,"config"],[476,48,443,50],[476,49,443,51,"routeNames"],[476,59,443,61],[476,60,443,62,"length"],[476,66,443,68],[476,69,443,71],[476,70,443,72],[476,71,443,73],[476,73,443,75],[477,8,444,12],[477,15,444,19,"config"],[477,21,444,25],[477,22,444,26,"parse"],[477,27,444,31],[478,6,445,8],[479,4,446,4],[480,4,447,4],[480,11,447,11,"undefined"],[480,20,447,20],[481,2,448,0],[481,3,448,1],[482,2,449,0],[483,2,450,0],[483,6,450,6,"findInitialRoute"],[483,22,450,22],[483,25,450,25,"findInitialRoute"],[483,26,450,26,"routeName"],[483,35,450,35],[483,37,450,37,"parentScreens"],[483,50,450,50],[483,52,450,52,"initialRoutes"],[483,65,450,65],[483,70,450,70],[484,4,451,4],[484,9,451,9],[484,13,451,15,"config"],[484,19,451,21],[484,23,451,25,"initialRoutes"],[484,36,451,38],[484,38,451,40],[485,6,452,8],[485,10,452,12,"parentScreens"],[485,23,452,25],[485,24,452,26,"length"],[485,30,452,32],[485,35,452,37,"config"],[485,41,452,43],[485,42,452,44,"parentScreens"],[485,55,452,57],[485,56,452,58,"length"],[485,62,452,64],[485,64,452,66],[486,8,453,12],[486,12,453,16,"sameParents"],[486,23,453,27],[486,26,453,30],[486,30,453,34],[487,8,454,12],[487,13,454,17],[487,17,454,21,"i"],[487,18,454,22],[487,21,454,25],[487,22,454,26],[487,24,454,28,"i"],[487,25,454,29],[487,28,454,32,"parentScreens"],[487,41,454,45],[487,42,454,46,"length"],[487,48,454,52],[487,50,454,54,"i"],[487,51,454,55],[487,53,454,57],[487,55,454,59],[488,10,455,16],[488,14,455,20,"parentScreens"],[488,27,455,33],[488,28,455,34,"i"],[488,29,455,35],[488,30,455,36],[488,31,455,37,"localeCompare"],[488,44,455,50],[488,45,455,51,"config"],[488,51,455,57],[488,52,455,58,"parentScreens"],[488,65,455,71],[488,66,455,72,"i"],[488,67,455,73],[488,68,455,74],[488,69,455,75],[488,74,455,80],[488,75,455,81],[488,77,455,83],[489,12,456,20,"sameParents"],[489,23,456,31],[489,26,456,34],[489,31,456,39],[490,12,457,20],[491,10,458,16],[492,8,459,12],[493,8,460,12],[493,12,460,16,"sameParents"],[493,23,460,27],[493,25,460,29],[494,10,461,16],[494,17,461,23,"routeName"],[494,26,461,32],[494,31,461,37,"config"],[494,37,461,43],[494,38,461,44,"initialRouteName"],[494,54,461,60],[494,57,461,63,"config"],[494,63,461,69],[494,64,461,70,"initialRouteName"],[494,80,461,86],[494,83,461,89,"undefined"],[494,92,461,98],[495,8,462,12],[496,6,463,8],[497,4,464,4],[498,4,465,4],[498,11,465,11,"undefined"],[498,20,465,20],[499,2,466,0],[499,3,466,1],[500,2,467,0],[501,2,468,0],[502,2,469,0],[502,6,469,6,"createStateObject"],[502,23,469,23],[502,26,469,26,"createStateObject"],[502,27,469,27,"initialRoute"],[502,39,469,39],[502,41,469,41,"route"],[502,46,469,46],[502,48,469,48,"isEmpty"],[502,55,469,55],[502,60,469,60],[503,4,470,4],[503,8,470,8,"isEmpty"],[503,15,470,15],[503,17,470,17],[504,6,471,8],[504,10,471,12,"initialRoute"],[504,22,471,24],[504,24,471,26],[505,8,472,12],[505,15,472,19],[506,10,473,16,"index"],[506,15,473,21],[506,17,473,23],[506,18,473,24],[507,10,474,16,"routes"],[507,16,474,22],[507,18,474,24],[507,19,474,25],[508,12,474,27,"name"],[508,16,474,31],[508,18,474,33,"initialRoute"],[508,30,474,45],[509,12,474,47,"params"],[509,18,474,53],[509,20,474,55,"route"],[509,25,474,60],[509,26,474,61,"params"],[510,10,474,68],[510,11,474,69],[510,13,474,71,"route"],[510,18,474,76],[511,8,475,12],[511,9,475,13],[512,6,476,8],[512,7,476,9],[512,13,477,13],[513,8,478,12],[513,15,478,19],[514,10,479,16,"routes"],[514,16,479,22],[514,18,479,24],[514,19,479,25,"route"],[514,24,479,30],[515,8,480,12],[515,9,480,13],[516,6,481,8],[517,4,482,4],[517,5,482,5],[517,11,483,9],[518,6,484,8],[518,10,484,12,"initialRoute"],[518,22,484,24],[518,24,484,26],[519,8,485,12],[519,15,485,19],[520,10,486,16,"index"],[520,15,486,21],[520,17,486,23],[520,18,486,24],[521,10,487,16,"routes"],[521,16,487,22],[521,18,487,24],[521,19,488,20],[522,12,488,22,"name"],[522,16,488,26],[522,18,488,28,"initialRoute"],[522,30,488,40],[523,12,488,42,"params"],[523,18,488,48],[523,20,488,50,"route"],[523,25,488,55],[523,26,488,56,"params"],[524,10,488,63],[524,11,488,64],[524,13,489,20],[525,12,489,22],[525,15,489,25,"route"],[525,20,489,30],[526,12,489,32,"state"],[526,17,489,37],[526,19,489,39],[527,14,489,41,"routes"],[527,20,489,47],[527,22,489,49],[528,12,489,52],[529,10,489,54],[529,11,489,55],[530,8,491,12],[530,9,491,13],[531,6,492,8],[531,7,492,9],[531,13,493,13],[532,8,494,12],[532,15,494,19],[533,10,495,16,"routes"],[533,16,495,22],[533,18,495,24],[533,19,495,25],[534,12,495,27],[534,15,495,30,"route"],[534,20,495,35],[535,12,495,37,"state"],[535,17,495,42],[535,19,495,44],[536,14,495,46,"routes"],[536,20,495,52],[536,22,495,54],[537,12,495,57],[538,10,495,59],[538,11,495,60],[539,8,496,12],[539,9,496,13],[540,6,497,8],[541,4,498,4],[542,2,499,0],[542,3,499,1],[543,2,500,0],[543,6,500,6,"createNestedStateObject"],[543,29,500,29],[543,32,500,32,"createNestedStateObject"],[543,33,500,32,"_ref"],[543,37,500,32],[543,39,500,55,"routes"],[543,45,500,61],[543,47,500,63,"initialRoutes"],[543,60,500,76],[543,62,500,78,"flatConfig"],[543,72,500,88],[543,74,500,90,"hash"],[543,78,500,94],[543,83,500,99],[544,4,500,99],[544,8,500,35,"path"],[544,12,500,39],[544,15,500,39,"_ref"],[544,19,500,39],[544,20,500,35,"path"],[544,24,500,39],[545,6,500,44,"expoURL"],[545,13,500,51],[545,16,500,51,"_objectWithoutProperties"],[545,40,500,51],[545,41,500,51,"_ref"],[545,45,500,51],[545,47,500,51,"_excluded"],[545,56,500,51],[546,4,501,4],[546,8,501,8,"route"],[546,13,501,13],[546,16,501,16,"routes"],[546,22,501,22],[546,23,501,23,"shift"],[546,28,501,28],[546,29,501,29],[546,30,501,30],[547,4,502,4],[547,8,502,10,"parentScreens"],[547,21,502,23],[547,24,502,26],[547,26,502,28],[548,4,503,4],[548,8,503,8,"initialRoute"],[548,20,503,20],[548,23,503,23,"findInitialRoute"],[548,39,503,39],[548,40,503,40,"route"],[548,45,503,45],[548,46,503,46,"name"],[548,50,503,50],[548,52,503,52,"parentScreens"],[548,65,503,65],[548,67,503,67,"initialRoutes"],[548,80,503,80],[548,81,503,81],[549,4,504,4,"parentScreens"],[549,17,504,17],[549,18,504,18,"push"],[549,22,504,22],[549,23,504,23,"route"],[549,28,504,28],[549,29,504,29,"name"],[549,33,504,33],[549,34,504,34],[550,4,505,4],[550,8,505,10,"state"],[550,13,505,15],[550,16,505,18,"createStateObject"],[550,33,505,35],[550,34,505,36,"initialRoute"],[550,46,505,48],[550,48,505,50,"route"],[550,53,505,55],[550,55,505,57,"routes"],[550,61,505,63],[550,62,505,64,"length"],[550,68,505,70],[550,73,505,75],[550,74,505,76],[550,75,505,77],[551,4,506,4],[551,8,506,8,"routes"],[551,14,506,14],[551,15,506,15,"length"],[551,21,506,21],[551,24,506,24],[551,25,506,25],[551,27,506,27],[552,6,507,8],[552,10,507,12,"nestedState"],[552,21,507,23],[552,24,507,26,"state"],[552,29,507,31],[553,6,508,8],[553,13,508,16,"route"],[553,18,508,21],[553,21,508,24,"routes"],[553,27,508,30],[553,28,508,31,"shift"],[553,33,508,36],[553,34,508,37],[553,35,508,38],[553,37,508,41],[554,8,509,12,"initialRoute"],[554,20,509,24],[554,23,509,27,"findInitialRoute"],[554,39,509,43],[554,40,509,44,"route"],[554,45,509,49],[554,46,509,50,"name"],[554,50,509,54],[554,52,509,56,"parentScreens"],[554,65,509,69],[554,67,509,71,"initialRoutes"],[554,80,509,84],[554,81,509,85],[555,8,510,12],[555,12,510,18,"nestedStateIndex"],[555,28,510,34],[555,31,510,37,"nestedState"],[555,42,510,48],[555,43,510,49,"index"],[555,48,510,54],[555,52,510,58,"nestedState"],[555,63,510,69],[555,64,510,70,"routes"],[555,70,510,76],[555,71,510,77,"length"],[555,77,510,83],[555,80,510,86],[555,81,510,87],[556,8,511,12,"nestedState"],[556,19,511,23],[556,20,511,24,"routes"],[556,26,511,30],[556,27,511,31,"nestedStateIndex"],[556,43,511,47],[556,44,511,48],[556,45,511,49,"state"],[556,50,511,54],[556,53,511,57,"createStateObject"],[556,70,511,74],[556,71,511,75,"initialRoute"],[556,83,511,87],[556,85,511,89,"route"],[556,90,511,94],[556,92,511,96,"routes"],[556,98,511,102],[556,99,511,103,"length"],[556,105,511,109],[556,110,511,114],[556,111,511,115],[556,112,511,116],[557,8,512,12],[557,12,512,16,"routes"],[557,18,512,22],[557,19,512,23,"length"],[557,25,512,29],[557,28,512,32],[557,29,512,33],[557,31,512,35],[558,10,513,16,"nestedState"],[558,21,513,27],[558,24,513,30,"nestedState"],[558,35,513,41],[558,36,513,42,"routes"],[558,42,513,48],[558,43,513,49,"nestedStateIndex"],[558,59,513,65],[558,60,513,66],[558,61,513,67,"state"],[558,66,513,72],[559,8,514,12],[560,8,515,12,"parentScreens"],[560,21,515,25],[560,22,515,26,"push"],[560,26,515,30],[560,27,515,31,"route"],[560,32,515,36],[560,33,515,37,"name"],[560,37,515,41],[560,38,515,42],[561,6,516,8],[562,4,517,4],[563,4,518,4,"route"],[563,9,518,9],[563,12,518,12],[563,13,518,13],[563,14,518,14],[563,16,518,16,"findFocusedRoute_1"],[563,34,518,34],[563,35,518,35,"findFocusedRoute"],[563,51,518,51],[563,53,518,53,"state"],[563,58,518,58],[563,59,518,59],[564,4,519,4],[565,4,520,4,"route"],[565,9,520,9],[565,10,520,10,"path"],[565,14,520,14],[565,17,520,17,"expoURL"],[565,24,520,24],[565,25,520,25,"pathWithoutGroups"],[565,42,520,42],[566,4,521,4],[567,4,522,4],[568,4,523,4],[569,4,524,4],[570,4,525,4],[570,8,525,10,"params"],[570,14,525,16],[570,17,525,19,"expo"],[570,21,525,23],[570,22,525,24,"parseQueryParams"],[570,38,525,40],[570,39,525,41,"path"],[570,43,525,45],[570,45,525,47,"route"],[570,50,525,52],[570,52,525,54,"flatConfig"],[570,62,525,64],[570,65,525,67,"findParseConfigForRoute"],[570,88,525,90],[570,89,525,91,"route"],[570,94,525,96],[570,95,525,97,"name"],[570,99,525,101],[570,101,525,103,"flatConfig"],[570,111,525,113],[570,112,525,114],[570,115,525,117,"undefined"],[570,124,525,126],[570,126,525,128,"hash"],[570,130,525,132],[570,131,525,133],[571,4,526,4],[572,4,527,4],[573,4,528,4],[574,4,529,4],[574,8,529,8,"params"],[574,14,529,14],[574,16,529,16],[575,6,530,8,"route"],[575,11,530,13],[575,12,530,14,"params"],[575,18,530,20],[575,21,530,23],[576,8,530,25],[576,11,530,28,"route"],[576,16,530,33],[576,17,530,34,"params"],[576,23,530,40],[577,8,530,42],[577,11,530,45,"params"],[578,6,530,52],[578,7,530,53],[579,4,531,4],[580,4,532,4],[581,4,533,4],[581,11,533,11,"state"],[581,16,533,16],[582,2,534,0],[582,3,534,1],[583,2,535,0],[584,2,536,0],[585,2,537,0],[586,2,538,0],[587,2,539,0],[588,2,540,0],[589,2,541,0],[590,2,542,0],[591,2,543,0],[592,2,544,0],[593,2,545,0],[594,2,546,0],[595,2,547,0],[596,2,548,0],[597,0,548,0],[597,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","ownKeys","getStateFromPath","remaining.split.filter.map$argument_0","match.routeNames.map$argument_0","getConfigResources","prepareConfigResources","getInitialRoutes","getNormalizedConfigs","Object.keys.map$argument_0","checkForDuplicatedConfigs","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","getConfigsWithRegexes","configs.map$argument_0","joinPaths","paths.map$argument_0","matchAgainstConfigs","config.pattern.split.reduce$argument_0","config.routeNames.map$argument_0","configs.find$argument_0","normalizedPath.split.reduce$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;mDCC;kBEC;gDFC;SEI;KFE;CDQ;wDCC;CDE;AI6B;iBCuC;SDG;0EEqB,oBF;CJmB;AOQ;CPW;AQC;CRa;ASC;CTS;AUC;4CCO,qED;CVgD;AYC;mBCE;6DCM,sBD,YE,sBF;KDQ;CZC;AgBC;uBCC;MDO;ChBC;kBkBC;yBCC,mBD;clBE;4BoBC;kECc;aDmB;2CEE;iDCC;iBDG;4BEU;iBFmB;aFM;CpBS;gCyBC;gDCoC;aDG;CzBK;yB2BC;C3B+B;gC4BC;C5BO;yB6BE;C7BgB;0B8BG;C9B8B;gC+BC;C/BkC"},"hasCjsExports":true},"type":"js/module"}]}