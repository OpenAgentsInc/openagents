{
  "version": 3,
  "sources": ["../../../src/cli/deployments.ts"],
  "sourcesContent": ["import { Command } from \"@commander-js/extra-typings\";\nimport { oneoffContext, Context } from \"../bundler/context.js\";\nimport { logMessage } from \"../bundler/log.js\";\nimport {\n  getDeploymentSelection,\n  DeploymentSelection,\n} from \"./lib/deploymentSelection.js\";\nimport { fetchTeamAndProject } from \"./lib/api.js\";\n\n// This is a debugging command: it's output is not stable, don't write scripts\n// that depend on its output.\n\n// TODO: for the deployments command to list all deployments in a project\n// we need a stable endpoint for listing projects (check) and a way to\n// get a project ID in all cases to use it. We have an endpoint that lists\n// deployments by team/project slug today but it's not in use and we'll\n// be able to deprecate it if we avoid using it.\n\nexport const deployments = new Command(\"deployments\")\n  .description(\"List deployments associated with a project\")\n  .allowExcessArguments(false)\n  .action(async () => {\n    const ctx = await oneoffContext({\n      url: undefined,\n      adminKey: undefined,\n      envFile: undefined,\n    });\n\n    const deploymentSelection = await getDeploymentSelection(ctx, {\n      url: undefined,\n      adminKey: undefined,\n      envFile: undefined,\n    });\n\n    await displayCurrentDeploymentInfo(ctx, deploymentSelection);\n  });\n\nasync function displayCurrentDeploymentInfo(\n  ctx: Context,\n  selection: DeploymentSelection,\n) {\n  logMessage(\"Currently configured deployment:\");\n\n  switch (selection.kind) {\n    case \"existingDeployment\": {\n      const { deploymentToActOn } = selection;\n      logMessage(`  URL: ${deploymentToActOn.url}`);\n\n      if (deploymentToActOn.deploymentFields) {\n        const fields = deploymentToActOn.deploymentFields;\n        logMessage(\n          `  Deployment: ${fields.deploymentName} (${fields.deploymentType})`,\n        );\n        logMessage(`  Team: ${fields.teamSlug}`);\n        logMessage(`  Project: ${fields.projectSlug}`);\n      } else {\n        logMessage(`  Type: ${deploymentToActOn.source}`);\n      }\n      break;\n    }\n    case \"deploymentWithinProject\": {\n      const { targetProject } = selection;\n      if (targetProject.kind === \"teamAndProjectSlugs\") {\n        logMessage(`  Team: ${targetProject.teamSlug}`);\n        logMessage(`  Project: ${targetProject.projectSlug}`);\n      } else if (targetProject.kind === \"deploymentName\") {\n        const slugs = await fetchTeamAndProject(\n          ctx,\n          targetProject.deploymentName,\n        );\n        logMessage(`  Team: ${slugs.team}`);\n        logMessage(`  Project: ${slugs.project}`);\n        logMessage(`  Deployment: ${targetProject.deploymentName}`);\n        if (targetProject.deploymentType) {\n          logMessage(`  Type: ${targetProject.deploymentType}`);\n        }\n      } else {\n        logMessage(`  Project deploy key configured`);\n      }\n      break;\n    }\n    case \"preview\": {\n      logMessage(`  Preview deployment (deploy key configured)`);\n      break;\n    }\n    case \"anonymous\": {\n      if (selection.deploymentName) {\n        logMessage(`  Anonymous deployment: ${selection.deploymentName}`);\n      } else {\n        logMessage(`  Anonymous development (no deployment selected)`);\n      }\n      break;\n    }\n    case \"chooseProject\": {\n      logMessage(`  No project configured - will prompt interactively`);\n      break;\n    }\n    default: {\n      logMessage(`  Unknown deployment configuration`);\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAwB;AACxB,qBAAuC;AACvC,iBAA2B;AAC3B,iCAGO;AACP,iBAAoC;AAW7B,MAAM,cAAc,IAAI,6BAAQ,aAAa,EACjD,YAAY,4CAA4C,EACxD,qBAAqB,KAAK,EAC1B,OAAO,YAAY;AAClB,QAAM,MAAM,UAAM,8BAAc;AAAA,IAC9B,KAAK;AAAA,IACL,UAAU;AAAA,IACV,SAAS;AAAA,EACX,CAAC;AAED,QAAM,sBAAsB,UAAM,mDAAuB,KAAK;AAAA,IAC5D,KAAK;AAAA,IACL,UAAU;AAAA,IACV,SAAS;AAAA,EACX,CAAC;AAED,QAAM,6BAA6B,KAAK,mBAAmB;AAC7D,CAAC;AAEH,eAAe,6BACb,KACA,WACA;AACA,6BAAW,kCAAkC;AAE7C,UAAQ,UAAU,MAAM;AAAA,IACtB,KAAK,sBAAsB;AACzB,YAAM,EAAE,kBAAkB,IAAI;AAC9B,iCAAW,UAAU,kBAAkB,GAAG,EAAE;AAE5C,UAAI,kBAAkB,kBAAkB;AACtC,cAAM,SAAS,kBAAkB;AACjC;AAAA,UACE,iBAAiB,OAAO,cAAc,KAAK,OAAO,cAAc;AAAA,QAClE;AACA,mCAAW,WAAW,OAAO,QAAQ,EAAE;AACvC,mCAAW,cAAc,OAAO,WAAW,EAAE;AAAA,MAC/C,OAAO;AACL,mCAAW,WAAW,kBAAkB,MAAM,EAAE;AAAA,MAClD;AACA;AAAA,IACF;AAAA,IACA,KAAK,2BAA2B;AAC9B,YAAM,EAAE,cAAc,IAAI;AAC1B,UAAI,cAAc,SAAS,uBAAuB;AAChD,mCAAW,WAAW,cAAc,QAAQ,EAAE;AAC9C,mCAAW,cAAc,cAAc,WAAW,EAAE;AAAA,MACtD,WAAW,cAAc,SAAS,kBAAkB;AAClD,cAAM,QAAQ,UAAM;AAAA,UAClB;AAAA,UACA,cAAc;AAAA,QAChB;AACA,mCAAW,WAAW,MAAM,IAAI,EAAE;AAClC,mCAAW,cAAc,MAAM,OAAO,EAAE;AACxC,mCAAW,iBAAiB,cAAc,cAAc,EAAE;AAC1D,YAAI,cAAc,gBAAgB;AAChC,qCAAW,WAAW,cAAc,cAAc,EAAE;AAAA,QACtD;AAAA,MACF,OAAO;AACL,mCAAW,iCAAiC;AAAA,MAC9C;AACA;AAAA,IACF;AAAA,IACA,KAAK,WAAW;AACd,iCAAW,8CAA8C;AACzD;AAAA,IACF;AAAA,IACA,KAAK,aAAa;AAChB,UAAI,UAAU,gBAAgB;AAC5B,mCAAW,2BAA2B,UAAU,cAAc,EAAE;AAAA,MAClE,OAAO;AACL,mCAAW,kDAAkD;AAAA,MAC/D;AACA;AAAA,IACF;AAAA,IACA,KAAK,iBAAiB;AACpB,iCAAW,qDAAqD;AAChE;AAAA,IACF;AAAA,IACA,SAAS;AACP,iCAAW,oCAAoC;AAAA,IACjD;AAAA,EACF;AACF;",
  "names": []
}
