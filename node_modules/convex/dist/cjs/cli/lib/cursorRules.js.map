{
  "version": 3,
  "sources": ["../../../../src/cli/lib/cursorRules.ts"],
  "sourcesContent": ["import * as Sentry from \"@sentry/node\";\nimport { downloadLatestCursorRules } from \"./versionApi.js\";\nimport path from \"path\";\nimport { hashSha256 } from \"./utils/hash.js\";\nimport chalk from \"chalk\";\n// In the CLI, we usually want to use the filesystem functions from `Context`\n// so that we can detect file changes when watching. However, in this case\n// we don\u2019t need to watch the file, and we want to perform filesystem operations\n// asynchronously since this is done concurrently with the `dev` command.\n// eslint-disable-next-line no-restricted-imports\nimport { promises as fs } from \"fs\";\nimport { logMessage } from \"../../bundler/log.js\";\n\n/**\n * If the Cursor rules exist and are out of date, update them.\n */\nexport async function autoUpdateCursorRules(expectedRulesHash: string | null) {\n  if (expectedRulesHash === null) {\n    return;\n  }\n\n  const currentRulesHash = await getCurrentRulesHash();\n  if (currentRulesHash === null) {\n    return;\n  }\n\n  if (currentRulesHash !== expectedRulesHash) {\n    const rules = await downloadLatestCursorRules();\n    if (rules === null) {\n      return;\n    }\n\n    try {\n      const rulesPath = getRulesPath();\n      await fs.writeFile(rulesPath, rules, \"utf8\");\n      logMessage(\n        `${chalk.green(`\u2714`)} Automatically updated the Convex Cursor rules to the latest version.`,\n      );\n    } catch (error) {\n      Sentry.captureException(error);\n    }\n  }\n}\n\nasync function getCurrentRulesHash(): Promise<string | null> {\n  const rulesPath = getRulesPath();\n\n  let content;\n  try {\n    content = await fs.readFile(rulesPath, \"utf8\");\n  } catch {\n    // Ignore errors if we can\u2019t read the rules file, if the file doesn\u2019t exist we don\u2019t do anything\n    return null;\n  }\n\n  return hashSha256(content);\n}\n\nfunction getRulesPath(): string {\n  return path.join(process.cwd(), \".cursor\", \"rules\", \"convex_rules.mdc\");\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAwB;AACxB,wBAA0C;AAC1C,kBAAiB;AACjB,kBAA2B;AAC3B,mBAAkB;AAMlB,gBAA+B;AAC/B,iBAA2B;AAK3B,eAAsB,sBAAsB,mBAAkC;AAC5E,MAAI,sBAAsB,MAAM;AAC9B;AAAA,EACF;AAEA,QAAM,mBAAmB,MAAM,oBAAoB;AACnD,MAAI,qBAAqB,MAAM;AAC7B;AAAA,EACF;AAEA,MAAI,qBAAqB,mBAAmB;AAC1C,UAAM,QAAQ,UAAM,6CAA0B;AAC9C,QAAI,UAAU,MAAM;AAClB;AAAA,IACF;AAEA,QAAI;AACF,YAAM,YAAY,aAAa;AAC/B,YAAM,UAAAA,SAAG,UAAU,WAAW,OAAO,MAAM;AAC3C;AAAA,QACE,GAAG,aAAAC,QAAM,MAAM,QAAG,CAAC;AAAA,MACrB;AAAA,IACF,SAAS,OAAO;AACd,aAAO,iBAAiB,KAAK;AAAA,IAC/B;AAAA,EACF;AACF;AAEA,eAAe,sBAA8C;AAC3D,QAAM,YAAY,aAAa;AAE/B,MAAI;AACJ,MAAI;AACF,cAAU,MAAM,UAAAD,SAAG,SAAS,WAAW,MAAM;AAAA,EAC/C,QAAQ;AAEN,WAAO;AAAA,EACT;AAEA,aAAO,wBAAW,OAAO;AAC3B;AAEA,SAAS,eAAuB;AAC9B,SAAO,YAAAE,QAAK,KAAK,QAAQ,IAAI,GAAG,WAAW,SAAS,kBAAkB;AACxE;",
  "names": ["fs", "chalk", "path"]
}
