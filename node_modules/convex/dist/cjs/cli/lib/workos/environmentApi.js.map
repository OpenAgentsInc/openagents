{
  "version": 3,
  "sources": ["../../../../../src/cli/lib/workos/environmentApi.ts"],
  "sourcesContent": ["import { Context } from \"../../../bundler/context.js\";\n\nexport interface RedirectUriResponse {\n  object: \"redirect_uri\";\n  id: string;\n  uri: string;\n  default: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CorsOriginResponse {\n  object: \"cors_origin\";\n  id: string;\n  origin: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport async function createRedirectURI(\n  ctx: Context,\n  apiKey: string,\n  uri: string,\n): Promise<{ modified: boolean }> {\n  const response = await fetch(\n    \"https://api.workos.com/user_management/redirect_uris\",\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify({ uri }),\n    },\n  );\n\n  if (!response.ok) {\n    if (response.status === 422) {\n      const errorText = await response.text();\n      if (errorText.includes(\"already exists\")) {\n        // This redirect URI already exists.\n        return { modified: false };\n      }\n    }\n\n    const errorText = await response.text();\n    return await ctx.crash({\n      exitCode: 1,\n      errorType: \"fatal\",\n      printedMessage: `Failed to create redirect URI: ${response.status} ${errorText}`,\n    });\n  }\n  return { modified: true };\n}\n\nexport async function createCORSOrigin(\n  ctx: Context,\n  apiKey: string,\n  origin: string,\n): Promise<{ modified: boolean }> {\n  const response = await fetch(\n    \"https://api.workos.com/user_management/cors_origins\",\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify({ origin }),\n    },\n  );\n\n  if (!response.ok) {\n    if (response.status === 409) {\n      const errorText = await response.text();\n      if (\n        errorText.includes(\"duplicate_cors_origin\") ||\n        errorText.includes(\"already exists\")\n      ) {\n        // This CORS origin already exists.\n        return { modified: false };\n      }\n    }\n\n    const errorText = await response.text();\n    return await ctx.crash({\n      exitCode: 1,\n      errorType: \"fatal\",\n      printedMessage: `Failed to create CORS origin: ${response.status} ${errorText}`,\n    });\n  }\n  return { modified: true };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA,eAAsB,kBACpB,KACA,QACA,KACgC;AAChC,QAAM,WAAW,MAAM;AAAA,IACrB;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,eAAe,UAAU,MAAM;AAAA,MACjC;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,IAAI,CAAC;AAAA,IAC9B;AAAA,EACF;AAEA,MAAI,CAAC,SAAS,IAAI;AAChB,QAAI,SAAS,WAAW,KAAK;AAC3B,YAAMA,aAAY,MAAM,SAAS,KAAK;AACtC,UAAIA,WAAU,SAAS,gBAAgB,GAAG;AAExC,eAAO,EAAE,UAAU,MAAM;AAAA,MAC3B;AAAA,IACF;AAEA,UAAM,YAAY,MAAM,SAAS,KAAK;AACtC,WAAO,MAAM,IAAI,MAAM;AAAA,MACrB,UAAU;AAAA,MACV,WAAW;AAAA,MACX,gBAAgB,kCAAkC,SAAS,MAAM,IAAI,SAAS;AAAA,IAChF,CAAC;AAAA,EACH;AACA,SAAO,EAAE,UAAU,KAAK;AAC1B;AAEA,eAAsB,iBACpB,KACA,QACA,QACgC;AAChC,QAAM,WAAW,MAAM;AAAA,IACrB;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,eAAe,UAAU,MAAM;AAAA,MACjC;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,OAAO,CAAC;AAAA,IACjC;AAAA,EACF;AAEA,MAAI,CAAC,SAAS,IAAI;AAChB,QAAI,SAAS,WAAW,KAAK;AAC3B,YAAMA,aAAY,MAAM,SAAS,KAAK;AACtC,UACEA,WAAU,SAAS,uBAAuB,KAC1CA,WAAU,SAAS,gBAAgB,GACnC;AAEA,eAAO,EAAE,UAAU,MAAM;AAAA,MAC3B;AAAA,IACF;AAEA,UAAM,YAAY,MAAM,SAAS,KAAK;AACtC,WAAO,MAAM,IAAI,MAAM;AAAA,MACrB,UAAU;AAAA,MACV,WAAW;AAAA,MACX,gBAAgB,iCAAiC,SAAS,MAAM,IAAI,SAAS;AAAA,IAC/E,CAAC;AAAA,EACH;AACA,SAAO,EAAE,UAAU,KAAK;AAC1B;",
  "names": ["errorText"]
}
