{
  "version": 3,
  "sources": ["../../../../../src/cli/lib/workos/platformApi.ts"],
  "sourcesContent": ["import { Context } from \"../../../bundler/context.js\";\nimport {\n  bigBrainAPI,\n  bigBrainAPIMaybeThrows,\n  ErrorData,\n  logAndHandleFetchError,\n  ThrowingFetchError,\n} from \"../utils/utils.js\";\n\n/**\n * Verified emails for a user that aren't known to be an admin email for\n * another WorkOS integration.\n */\nexport async function getCandidateEmailsForWorkIntegration(\n  ctx: Context,\n): Promise<{\n  availableEmails: string[];\n}> {\n  return bigBrainAPI<{ availableEmails: string[] }>({\n    ctx,\n    method: \"GET\",\n    url: \"workos/available_workos_team_emails\",\n  });\n}\n\nexport async function getDeploymentCanProvisionWorkOSEnvironments(\n  ctx: Context,\n  deploymentName: string,\n): Promise<{\n  teamId: number;\n  hasAssociatedWorkosTeam: boolean;\n  disabled?: boolean;\n}> {\n  return bigBrainAPI({\n    ctx,\n    method: \"POST\",\n    url: \"workos/has_associated_workos_team\",\n    data: { deploymentName },\n  });\n}\n\nexport async function createEnvironmentAndAPIKey(\n  ctx: Context,\n  deploymentName: string,\n): Promise<\n  | {\n      success: true;\n      data: {\n        environmentId: string;\n        environmentName: string;\n        clientId: string;\n        apiKey: string;\n        newlyProvisioned: boolean;\n      };\n    }\n  | {\n      success: false;\n      error: \"team_not_provisioned\";\n      message: string;\n    }\n> {\n  try {\n    const data = await bigBrainAPI({\n      ctx,\n      method: \"POST\",\n      url: \"workos/get_or_provision_workos_environment\",\n      data: { deploymentName },\n    });\n    return {\n      success: true,\n      data,\n    };\n  } catch (error: any) {\n    if (error?.message?.includes(\"WorkOSTeamNotProvisioned\")) {\n      return {\n        success: false,\n        error: \"team_not_provisioned\",\n        message: error.message,\n      };\n    }\n\n    return await ctx.crash({\n      exitCode: 1,\n      errorType: \"fatal\",\n      printedMessage: `Error provisioning WorkOS environment: ${error}`,\n    });\n  }\n}\n\nexport async function createAssociatedWorkosTeam(\n  ctx: Context,\n  teamId: number,\n  email: string,\n): Promise<\n  | {\n      result: \"success\";\n      workosTeamId: string;\n      workosTeamName: string;\n    }\n  | {\n      result: \"emailAlreadyUsed\";\n      message: string;\n    }\n> {\n  try {\n    const result = await bigBrainAPIMaybeThrows({\n      ctx,\n      method: \"POST\",\n      url: \"workos/provision_associated_workos_team\",\n      data: JSON.stringify({ teamId, email }),\n    });\n    return result;\n  } catch (error) {\n    const data: ErrorData | undefined =\n      error instanceof ThrowingFetchError ? error.serverErrorData : undefined;\n    if (data?.code === \"WorkosAccountAlreadyExistsWithThisEmail\") {\n      return {\n        result: \"emailAlreadyUsed\",\n        message:\n          data?.message || \"WorkOS account with this email already exists\",\n      };\n    }\n    return await logAndHandleFetchError(ctx, error);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAMO;AAMP,eAAsB,qCACpB,KAGC;AACD,aAAO,0BAA2C;AAAA,IAChD;AAAA,IACA,QAAQ;AAAA,IACR,KAAK;AAAA,EACP,CAAC;AACH;AAEA,eAAsB,4CACpB,KACA,gBAKC;AACD,aAAO,0BAAY;AAAA,IACjB;AAAA,IACA,QAAQ;AAAA,IACR,KAAK;AAAA,IACL,MAAM,EAAE,eAAe;AAAA,EACzB,CAAC;AACH;AAEA,eAAsB,2BACpB,KACA,gBAiBA;AACA,MAAI;AACF,UAAM,OAAO,UAAM,0BAAY;AAAA,MAC7B;AAAA,MACA,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM,EAAE,eAAe;AAAA,IACzB,CAAC;AACD,WAAO;AAAA,MACL,SAAS;AAAA,MACT;AAAA,IACF;AAAA,EACF,SAAS,OAAY;AACnB,QAAI,OAAO,SAAS,SAAS,0BAA0B,GAAG;AACxD,aAAO;AAAA,QACL,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS,MAAM;AAAA,MACjB;AAAA,IACF;AAEA,WAAO,MAAM,IAAI,MAAM;AAAA,MACrB,UAAU;AAAA,MACV,WAAW;AAAA,MACX,gBAAgB,0CAA0C,KAAK;AAAA,IACjE,CAAC;AAAA,EACH;AACF;AAEA,eAAsB,2BACpB,KACA,QACA,OAWA;AACA,MAAI;AACF,UAAM,SAAS,UAAM,qCAAuB;AAAA,MAC1C;AAAA,MACA,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM,KAAK,UAAU,EAAE,QAAQ,MAAM,CAAC;AAAA,IACxC,CAAC;AACD,WAAO;AAAA,EACT,SAAS,OAAO;AACd,UAAM,OACJ,iBAAiB,kCAAqB,MAAM,kBAAkB;AAChE,QAAI,MAAM,SAAS,2CAA2C;AAC5D,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,SACE,MAAM,WAAW;AAAA,MACrB;AAAA,IACF;AACA,WAAO,UAAM,qCAAuB,KAAK,KAAK;AAAA,EAChD;AACF;",
  "names": []
}
