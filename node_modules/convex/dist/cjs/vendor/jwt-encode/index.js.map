{
  "version": 3,
  "sources": ["../../../../src/vendor/jwt-encode/index.ts"],
  "sourcesContent": ["import crypto from \"crypto\";\n\n/**\n * Default options for JWT signature\n */\nconst defaultHeader = { alg: \"HS256\", typ: \"JWT\" } as const;\n\n/**\n * Return a base64 URL\n *\n * @param {string} data - some data to be base64 encoded\n * @return {string} A base64url encoded string\n */\nfunction base64url(data: string): string {\n  return Buffer.from(data, \"utf8\")\n    .toString(\"base64\")\n    .replace(/=+$/, \"\")\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\");\n}\n\n/**\n * Create a very basic JWT signature\n *\n * @param {Object} data - the data object you want to have signed\n * @param {string} secret - secret to use to sign token with\n * @param {Object} options - JWT header options\n * @return {string} JSON Web Token that has been signed\n */\nfunction sign(\n  data: Record<string, any>,\n  secret: string,\n  options: Record<string, any> = {},\n): string {\n  const header = Object.assign(defaultHeader, options);\n  // Original code had && here instead of ||, that doesn't make sense to me\n  if (header.alg !== \"HS256\" || header.typ !== \"JWT\") {\n    throw new Error(\n      \"jwt-encode only support the HS256 algorithm and the JWT type of hash\",\n    );\n  }\n\n  const encodedHeader = encode(header);\n  const encodedData = encode(data);\n\n  let signature = `${encodedHeader}.${encodedData}`;\n  signature = crypto\n    .createHmac(\"sha256\", secret)\n    .update(signature)\n    .digest(\"base64\")\n    .replace(/=+$/, \"\")\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\");\n\n  return `${encodedHeader}.${encodedData}.${signature}`;\n}\n\n/**\n *  Safely base64url encode a JS Object in a way that is UTF-8 safe\n *\n *  @param {Object} data - Javascript object payload to be encoded\n *  @return {string} utf-8 safe base64url encoded payload\n */\nfunction encode(data: Record<string, any>): string {\n  return base64url(JSON.stringify(data));\n}\n\nexport { sign as jwtEncode };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAmB;AAKnB,MAAM,gBAAgB,EAAE,KAAK,SAAS,KAAK,MAAM;AAQjD,SAAS,UAAU,MAAsB;AACvC,SAAO,OAAO,KAAK,MAAM,MAAM,EAC5B,SAAS,QAAQ,EACjB,QAAQ,OAAO,EAAE,EACjB,QAAQ,OAAO,GAAG,EAClB,QAAQ,OAAO,GAAG;AACvB;AAUA,SAAS,KACP,MACA,QACA,UAA+B,CAAC,GACxB;AACR,QAAM,SAAS,OAAO,OAAO,eAAe,OAAO;AAEnD,MAAI,OAAO,QAAQ,WAAW,OAAO,QAAQ,OAAO;AAClD,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,QAAM,gBAAgB,OAAO,MAAM;AACnC,QAAM,cAAc,OAAO,IAAI;AAE/B,MAAI,YAAY,GAAG,aAAa,IAAI,WAAW;AAC/C,cAAY,cAAAA,QACT,WAAW,UAAU,MAAM,EAC3B,OAAO,SAAS,EAChB,OAAO,QAAQ,EACf,QAAQ,OAAO,EAAE,EACjB,QAAQ,OAAO,GAAG,EAClB,QAAQ,OAAO,GAAG;AAErB,SAAO,GAAG,aAAa,IAAI,WAAW,IAAI,SAAS;AACrD;AAQA,SAAS,OAAO,MAAmC;AACjD,SAAO,UAAU,KAAK,UAAU,IAAI,CAAC;AACvC;",
  "names": ["crypto"]
}
