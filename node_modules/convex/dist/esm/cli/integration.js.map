{
  "version": 3,
  "sources": ["../../../src/cli/integration.ts"],
  "sourcesContent": ["/**\n * Debugging commands for the WorkOS integration; these are unstable, undocumented, and will change or disappear as the WorkOS integration evolves.\n **/\nimport { Command } from \"@commander-js/extra-typings\";\nimport { Context, oneoffContext } from \"../bundler/context.js\";\nimport chalk from \"chalk\";\nimport {\n  DeploymentSelectionOptions,\n  deploymentSelectionWithinProjectFromOptions,\n  getTeamAndProjectSlugForDeployment,\n  loadSelectedDeploymentCredentials,\n} from \"./lib/api.js\";\nimport { actionDescription } from \"./lib/command.js\";\nimport { ensureHasConvexDependency } from \"./lib/utils/utils.js\";\nimport { getDeploymentSelection } from \"./lib/deploymentSelection.js\";\nimport { ensureWorkosEnvironmentProvisioned } from \"./lib/workos/workos.js\";\nimport {\n  getCandidateEmailsForWorkIntegration,\n  getDeploymentCanProvisionWorkOSEnvironments,\n} from \"./lib/workos/platformApi.js\";\nimport { logMessage } from \"../bundler/log.js\";\n\nasync function selectEnvDeployment(\n  options: DeploymentSelectionOptions,\n): Promise<{\n  ctx: Context;\n  deployment: {\n    deploymentUrl: string;\n    deploymentName: string;\n    adminKey: string;\n    deploymentNotice: string;\n  };\n}> {\n  const ctx = await oneoffContext(options);\n  const deploymentSelection = await getDeploymentSelection(ctx, options);\n  const selectionWithinProject =\n    deploymentSelectionWithinProjectFromOptions(options);\n  const {\n    adminKey,\n    url: deploymentUrl,\n    deploymentFields,\n  } = await loadSelectedDeploymentCredentials(\n    ctx,\n    deploymentSelection,\n    selectionWithinProject,\n  );\n  const deploymentNotice =\n    deploymentFields !== null\n      ? ` (on ${chalk.bold(deploymentFields.deploymentType)} deployment ${chalk.bold(deploymentFields.deploymentName)})`\n      : \"\";\n  return {\n    ctx,\n    deployment: {\n      deploymentName: deploymentFields!.deploymentName,\n      deploymentUrl,\n      adminKey,\n      deploymentNotice,\n    },\n  };\n}\n\nconst workosTeamStatus = new Command(\"status\")\n  .summary(\"Status of associated WorkOS team\")\n  .action(async (_options, cmd) => {\n    const options = cmd.optsWithGlobals();\n    const { ctx, deployment } = await selectEnvDeployment(options);\n\n    const { hasAssociatedWorkosTeam } =\n      await getDeploymentCanProvisionWorkOSEnvironments(\n        ctx,\n        deployment.deploymentName,\n      );\n\n    const info = await getTeamAndProjectSlugForDeployment(ctx, {\n      deploymentName: deployment.deploymentName,\n    });\n\n    const { availableEmails } = await getCandidateEmailsForWorkIntegration(ctx);\n\n    if (!hasAssociatedWorkosTeam) {\n      logMessage(\n        `Convex team ${info?.teamSlug} does not have an associated WorkOS team.`,\n      );\n      logMessage(\n        `Verified emails that mighe be able to add one: ${availableEmails.join(\" \")}`,\n      );\n      return;\n    }\n\n    logMessage(`Convex team ${info?.teamSlug} has an associated WorkOS team.`);\n  });\n\nconst workosProvisionEnvironment = new Command(\"provision-environment\")\n  .summary(\"Provision a WorkOS environment\")\n  .description(\n    \"Create or get the WorkOS environment and API key for this deployment\",\n  )\n  .configureHelp({ showGlobalOptions: true })\n  .allowExcessArguments(false)\n  .addDeploymentSelectionOptions(\n    actionDescription(\"Provision WorkOS environment for\"),\n  )\n  .action(async (_options, cmd) => {\n    const options = cmd.optsWithGlobals();\n    const { ctx, deployment } = await selectEnvDeployment(options);\n    await ensureHasConvexDependency(\n      ctx,\n      \"integration workos provision-environment\",\n    );\n\n    try {\n      await ensureWorkosEnvironmentProvisioned(\n        ctx,\n        deployment.deploymentName,\n        deployment,\n        {\n          offerToAssociateWorkOSTeam: true,\n          autoProvisionIfWorkOSTeamAssociated: true,\n          autoConfigureAuthkitConfig: true,\n        },\n      );\n    } catch (error) {\n      await ctx.crash({\n        exitCode: 1,\n        errorType: \"fatal\",\n        errForSentry: error,\n        printedMessage: `Failed to provision WorkOS environment: ${String(error)}`,\n      });\n    }\n  });\nconst workos = new Command(\"workos\")\n  .summary(\"WorkOS integration commands\")\n  .description(\"Manage WorkOS team provisioning and environment setup\")\n  .addCommand(workosProvisionEnvironment)\n  .addCommand(workosTeamStatus);\n\nexport const integration = new Command(\"integration\")\n  .summary(\"Integration commands\")\n  .description(\"Commands for managing third-party integrations\")\n  .addCommand(workos);\n"],
  "mappings": ";AAGA,SAAS,eAAe;AACxB,SAAkB,qBAAqB;AACvC,OAAO,WAAW;AAClB;AAAA,EAEE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,yBAAyB;AAClC,SAAS,iCAAiC;AAC1C,SAAS,8BAA8B;AACvC,SAAS,0CAA0C;AACnD;AAAA,EACE;AAAA,EACA;AAAA,OACK;AACP,SAAS,kBAAkB;AAE3B,eAAe,oBACb,SASC;AACD,QAAM,MAAM,MAAM,cAAc,OAAO;AACvC,QAAM,sBAAsB,MAAM,uBAAuB,KAAK,OAAO;AACrE,QAAM,yBACJ,4CAA4C,OAAO;AACrD,QAAM;AAAA,IACJ;AAAA,IACA,KAAK;AAAA,IACL;AAAA,EACF,IAAI,MAAM;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,QAAM,mBACJ,qBAAqB,OACjB,QAAQ,MAAM,KAAK,iBAAiB,cAAc,CAAC,eAAe,MAAM,KAAK,iBAAiB,cAAc,CAAC,MAC7G;AACN,SAAO;AAAA,IACL;AAAA,IACA,YAAY;AAAA,MACV,gBAAgB,iBAAkB;AAAA,MAClC;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEA,MAAM,mBAAmB,IAAI,QAAQ,QAAQ,EAC1C,QAAQ,kCAAkC,EAC1C,OAAO,OAAO,UAAU,QAAQ;AAC/B,QAAM,UAAU,IAAI,gBAAgB;AACpC,QAAM,EAAE,KAAK,WAAW,IAAI,MAAM,oBAAoB,OAAO;AAE7D,QAAM,EAAE,wBAAwB,IAC9B,MAAM;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,EACb;AAEF,QAAM,OAAO,MAAM,mCAAmC,KAAK;AAAA,IACzD,gBAAgB,WAAW;AAAA,EAC7B,CAAC;AAED,QAAM,EAAE,gBAAgB,IAAI,MAAM,qCAAqC,GAAG;AAE1E,MAAI,CAAC,yBAAyB;AAC5B;AAAA,MACE,eAAe,MAAM,QAAQ;AAAA,IAC/B;AACA;AAAA,MACE,kDAAkD,gBAAgB,KAAK,GAAG,CAAC;AAAA,IAC7E;AACA;AAAA,EACF;AAEA,aAAW,eAAe,MAAM,QAAQ,iCAAiC;AAC3E,CAAC;AAEH,MAAM,6BAA6B,IAAI,QAAQ,uBAAuB,EACnE,QAAQ,gCAAgC,EACxC;AAAA,EACC;AACF,EACC,cAAc,EAAE,mBAAmB,KAAK,CAAC,EACzC,qBAAqB,KAAK,EAC1B;AAAA,EACC,kBAAkB,kCAAkC;AACtD,EACC,OAAO,OAAO,UAAU,QAAQ;AAC/B,QAAM,UAAU,IAAI,gBAAgB;AACpC,QAAM,EAAE,KAAK,WAAW,IAAI,MAAM,oBAAoB,OAAO;AAC7D,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF;AAEA,MAAI;AACF,UAAM;AAAA,MACJ;AAAA,MACA,WAAW;AAAA,MACX;AAAA,MACA;AAAA,QACE,4BAA4B;AAAA,QAC5B,qCAAqC;AAAA,QACrC,4BAA4B;AAAA,MAC9B;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AACd,UAAM,IAAI,MAAM;AAAA,MACd,UAAU;AAAA,MACV,WAAW;AAAA,MACX,cAAc;AAAA,MACd,gBAAgB,2CAA2C,OAAO,KAAK,CAAC;AAAA,IAC1E,CAAC;AAAA,EACH;AACF,CAAC;AACH,MAAM,SAAS,IAAI,QAAQ,QAAQ,EAChC,QAAQ,6BAA6B,EACrC,YAAY,uDAAuD,EACnE,WAAW,0BAA0B,EACrC,WAAW,gBAAgB;AAEvB,aAAM,cAAc,IAAI,QAAQ,aAAa,EACjD,QAAQ,sBAAsB,EAC9B,YAAY,gDAAgD,EAC5D,WAAW,MAAM;",
  "names": []
}
