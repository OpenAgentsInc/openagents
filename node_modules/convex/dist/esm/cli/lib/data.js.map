{
  "version": 3,
  "sources": ["../../../../src/cli/lib/data.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport { Context } from \"../../bundler/context.js\";\nimport { logError, logOutput, logWarning } from \"../../bundler/log.js\";\nimport { Base64 } from \"../../values/index.js\";\nimport { Value } from \"../../values/value.js\";\nimport { runSystemPaginatedQuery } from \"./run.js\";\n\nexport async function dataInDeployment(\n  ctx: Context,\n  options: {\n    deploymentUrl: string;\n    adminKey: string;\n    deploymentNotice: string;\n    tableName?: string | undefined;\n    limit: number;\n    order: \"asc\" | \"desc\";\n    component?: string | undefined;\n    format?:\n      | \"json\"\n      | \"jsonArray\"\n      | \"jsonLines\"\n      | \"jsonl\"\n      | \"pretty\"\n      | undefined;\n  },\n) {\n  if (options.tableName !== undefined) {\n    await listDocuments(\n      ctx,\n      options.deploymentUrl,\n      options.adminKey,\n      options.tableName,\n      {\n        limit: options.limit,\n        order: options.order as \"asc\" | \"desc\",\n        componentPath: options.component ?? \"\",\n        format: options.format,\n      },\n    );\n  } else {\n    await listTables(\n      ctx,\n      options.deploymentUrl,\n      options.adminKey,\n      options.deploymentNotice,\n      options.component ?? \"\",\n    );\n  }\n}\n\nasync function listTables(\n  ctx: Context,\n  deploymentUrl: string,\n  adminKey: string,\n  deploymentNotice: string,\n  componentPath: string,\n) {\n  const tables = (await runSystemPaginatedQuery(ctx, {\n    deploymentUrl,\n    adminKey,\n    functionName: \"_system/cli/tables\",\n    componentPath,\n    args: {},\n  })) as { name: string }[];\n  if (tables.length === 0) {\n    logError(`There are no tables in the ${deploymentNotice}database.`);\n    return;\n  }\n  const tableNames = tables.map((table) => table.name);\n  tableNames.sort();\n  logOutput(tableNames.join(\"\\n\"));\n}\n\nasync function listDocuments(\n  ctx: Context,\n  deploymentUrl: string,\n  adminKey: string,\n  tableName: string,\n  options: {\n    limit: number;\n    order: \"asc\" | \"desc\";\n    componentPath: string;\n    format?:\n      | \"json\"\n      | \"jsonArray\"\n      | \"jsonLines\"\n      | \"jsonl\"\n      | \"pretty\"\n      | undefined;\n  },\n) {\n  const data = (await runSystemPaginatedQuery(ctx, {\n    deploymentUrl,\n    adminKey,\n    functionName: \"_system/cli/tableData\",\n    componentPath: options.componentPath,\n    args: {\n      table: tableName,\n      order: options.order ?? \"desc\",\n    },\n    limit: options.limit + 1,\n  })) as Record<string, Value>[];\n\n  if (data.length === 0) {\n    logError(\"There are no documents in this table.\");\n    return;\n  }\n\n  if (options.format === \"json\" || options.format === \"jsonArray\") {\n    logOutput(\n      \"[\\n\" + data.slice(0, options.limit).map(stringify).join(\",\\n\") + \"\\n]\",\n    );\n  } else if (options.format === \"jsonLines\" || options.format === \"jsonl\") {\n    logOutput(\n      data\n        .slice(0, options.limit)\n        .map((document) => stringify(document))\n        .join(\"\\n\"),\n    );\n  } else {\n    logDocumentsTable(\n      ctx,\n      data.slice(0, options.limit).map((document) => {\n        const printed: Record<string, string> = {};\n        for (const key in document) {\n          printed[key] = stringify(document[key]);\n        }\n        return printed;\n      }),\n    );\n    if (data.length > options.limit) {\n      logWarning(\n        chalk.yellow(\n          `Showing the ${options.limit} ${\n            options.order === \"desc\" ? \"most recently\" : \"oldest\"\n          } created document${\n            options.limit > 1 ? \"s\" : \"\"\n          }. Use the --limit option to see more.`,\n        ),\n      );\n    }\n  }\n}\n\nfunction logDocumentsTable(_ctx: Context, rows: Record<string, string>[]) {\n  const columnsToWidths: Record<string, number> = {};\n  for (const row of rows) {\n    for (const column in row) {\n      const value = row[column];\n      columnsToWidths[column] = Math.max(\n        value.length,\n        columnsToWidths[column] ?? 0,\n      );\n    }\n  }\n  const unsortedFields = Object.keys(columnsToWidths);\n  unsortedFields.sort();\n  const fields = Array.from(\n    new Set([\"_id\", \"_creationTime\", ...unsortedFields]),\n  );\n  const columnWidths = fields.map((field) => columnsToWidths[field]);\n  const lineLimit = process.stdout.isTTY ? process.stdout.columns : undefined;\n\n  let didTruncate = false;\n\n  function limitLine(line: string, limit: number | undefined) {\n    if (limit === undefined) {\n      return line;\n    }\n    const limitWithBufferForUnicode = limit - 10;\n    if (line.length > limitWithBufferForUnicode) {\n      didTruncate = true;\n    }\n    return line.slice(0, limitWithBufferForUnicode);\n  }\n\n  logOutput(\n    limitLine(\n      fields.map((field, i) => field.padEnd(columnWidths[i])).join(\" | \"),\n      lineLimit,\n    ),\n  );\n  logOutput(\n    limitLine(\n      columnWidths.map((width) => \"-\".repeat(width)).join(\"-|-\"),\n      lineLimit,\n    ),\n  );\n  for (const row of rows) {\n    logOutput(\n      limitLine(\n        fields\n          .map((field, i) => (row[field] ?? \"\").padEnd(columnWidths[i]))\n          .join(\" | \"),\n        lineLimit,\n      ),\n    );\n  }\n  if (didTruncate) {\n    logWarning(\n      chalk.yellow(\n        \"Lines were truncated to fit the terminal width. Pipe the command to see \" +\n          \"the full output, such as:\\n  `npx convex data tableName | less -S`\",\n      ),\n    );\n  }\n}\n\nfunction stringify(value: Value): string {\n  if (value === null) {\n    return \"null\";\n  }\n  if (typeof value === \"bigint\") {\n    return `${value.toString()}n`;\n  }\n  if (typeof value === \"number\") {\n    return value.toString();\n  }\n  if (typeof value === \"boolean\") {\n    return value.toString();\n  }\n  if (typeof value === \"string\") {\n    return JSON.stringify(value);\n  }\n  if (value instanceof ArrayBuffer) {\n    const base64Encoded = Base64.fromByteArray(new Uint8Array(value));\n    return `Bytes(\"${base64Encoded}\")`;\n  }\n  if (value instanceof Array) {\n    return `[${value.map(stringify).join(\", \")}]`;\n  }\n  const pairs = Object.entries(value)\n    .map(([k, v]) => `\"${k}\": ${stringify(v!)}`)\n    .join(\", \");\n  return `{ ${pairs} }`;\n}\n"],
  "mappings": "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",
  "names": []
}
