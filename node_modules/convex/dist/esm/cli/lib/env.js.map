{
  "version": 3,
  "sources": ["../../../../src/cli/lib/env.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport { Context } from \"../../bundler/context.js\";\nimport {\n  logFailure,\n  logFinishedStep,\n  logMessage,\n  logOutput,\n} from \"../../bundler/log.js\";\nimport { runSystemQuery } from \"./run.js\";\nimport { deploymentFetch, logAndHandleFetchError } from \"./utils/utils.js\";\nimport { readFromStdin } from \"./utils/stdin.js\";\n\nexport async function envSetInDeployment(\n  ctx: Context,\n  deployment: {\n    deploymentUrl: string;\n    adminKey: string;\n    deploymentNotice: string;\n  },\n  rawName: string,\n  rawValue: string | undefined,\n  options?: {\n    secret?: boolean;\n  },\n) {\n  const [name, value] = await allowEqualsSyntax(ctx, rawName, rawValue);\n  await callUpdateEnvironmentVariables(ctx, deployment, [{ name, value }]);\n  const formatted = /\\s/.test(value) ? `\"${value}\"` : value;\n  if (options?.secret) {\n    logFinishedStep(\n      `Successfully set ${chalk.bold(name)} to ${chalk.bold(formatted)}${deployment.deploymentNotice}`,\n    );\n  } else {\n    logFinishedStep(`Successfully set ${chalk.bold(name)}`);\n  }\n}\n\nasync function allowEqualsSyntax(\n  ctx: Context,\n  name: string,\n  value: string | undefined,\n) {\n  if (value === undefined) {\n    if (/^[a-zA-Z][a-zA-Z0-9_]+=/.test(name)) {\n      return name.split(\"=\", 2);\n    } else if (!process.stdin.isTTY) {\n      // Read from stdin when piped input is available\n      try {\n        const stdinValue = await readFromStdin();\n        return [name, stdinValue];\n      } catch (error) {\n        return await ctx.crash({\n          exitCode: 1,\n          errorType: \"fatal\",\n          printedMessage: `error: failed to read from stdin: ${error instanceof Error ? error.message : String(error)}`,\n        });\n      }\n    } else {\n      return await ctx.crash({\n        exitCode: 1,\n        errorType: \"fatal\",\n        printedMessage: \"error: missing required argument 'value'\",\n      });\n    }\n  }\n  return [name, value];\n}\n\nexport async function envGetInDeploymentAction(\n  ctx: Context,\n  deployment: {\n    deploymentUrl: string;\n    adminKey: string;\n  },\n  name: string,\n) {\n  const envVar = await envGetInDeployment(ctx, deployment, name);\n  if (envVar === null) {\n    logFailure(`Environment variable \"${name}\" not found.`);\n    return;\n  }\n  logOutput(`${envVar}`);\n}\n\nexport async function envGetInDeployment(\n  ctx: Context,\n  deployment: {\n    deploymentUrl: string;\n    adminKey: string;\n  },\n  name: string,\n): Promise<string | null> {\n  const envVar = (await runSystemQuery(ctx, {\n    ...deployment,\n    functionName: \"_system/cli/queryEnvironmentVariables:get\",\n    componentPath: undefined,\n    args: { name },\n  })) as EnvVar | null;\n  return envVar === null ? null : envVar.value;\n}\n\nexport async function envRemoveInDeployment(\n  ctx: Context,\n  deployment: {\n    deploymentUrl: string;\n    adminKey: string;\n    deploymentNotice: string;\n  },\n  name: string,\n) {\n  await callUpdateEnvironmentVariables(ctx, deployment, [{ name }]);\n  logFinishedStep(\n    `Successfully unset ${chalk.bold(name)}${deployment.deploymentNotice}`,\n  );\n}\n\nexport async function envListInDeployment(\n  ctx: Context,\n  deployment: {\n    deploymentUrl: string;\n    adminKey: string;\n  },\n) {\n  const envs = (await runSystemQuery(ctx, {\n    ...deployment,\n    functionName: \"_system/cli/queryEnvironmentVariables\",\n    componentPath: undefined,\n    args: {},\n  })) as EnvVar[];\n  if (envs.length === 0) {\n    logMessage(\"No environment variables set.\");\n    return;\n  }\n  for (const { name, value } of envs) {\n    logOutput(`${name}=${value}`);\n  }\n}\n\nexport type EnvVarChange = {\n  name: string;\n  value?: string;\n};\n\nexport type EnvVar = {\n  name: string;\n  value: string;\n};\n\nexport async function callUpdateEnvironmentVariables(\n  ctx: Context,\n  deployment: {\n    deploymentUrl: string;\n    adminKey: string;\n    deploymentNotice: string;\n  },\n  changes: EnvVarChange[],\n) {\n  const fetch = deploymentFetch(ctx, deployment);\n  try {\n    await fetch(\"/api/update_environment_variables\", {\n      body: JSON.stringify({ changes }),\n      method: \"POST\",\n    });\n  } catch (e) {\n    return await logAndHandleFetchError(ctx, e);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
