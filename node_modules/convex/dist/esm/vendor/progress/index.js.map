{
  "version": 3,
  "sources": ["../../../../src/vendor/progress/index.ts"],
  "sourcesContent": ["/// <reference types=\"node\"/>\n/*!\n * node-progress\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * These are keys in the options object you can pass to the progress bar along with total as seen in the example above.\n */\nexport interface ProgressBarOptions {\n  /**\n   * Total number of ticks to complete.\n   */\n  total: number;\n\n  /**\n   * current completed index\n   */\n  curr?: number | undefined;\n\n  /**\n   * head character defaulting to complete character\n   */\n  head?: string | undefined;\n\n  /**\n   * The displayed width of the progress bar defaulting to total.\n   */\n  width?: number | undefined;\n\n  /**\n   * minimum time between updates in milliseconds defaulting to 16\n   */\n  renderThrottle?: number | undefined;\n\n  /**\n   * The output stream defaulting to stderr.\n   */\n  stream?: NodeJS.WritableStream | undefined;\n\n  /**\n   * Completion character defaulting to \"=\".\n   */\n  complete?: string | undefined;\n\n  /**\n   * Incomplete character defaulting to \"-\".\n   */\n  incomplete?: string | undefined;\n\n  /**\n   * Option to clear the bar on completion defaulting to false.\n   */\n  clear?: boolean | undefined;\n\n  /**\n   * Optional function to call when the progress bar completes.\n   */\n  callback?: Function | undefined;\n}\n\nexport interface ProgressBarInstance {\n  stream: NodeJS.WritableStream;\n  fmt: string;\n  curr: number;\n  total: number;\n  width: number;\n  clear: boolean;\n  chars: {\n    complete: string;\n    incomplete: string;\n    head: string;\n  };\n  renderThrottle: number;\n  lastRender: number;\n  callback: Function;\n  tokens: { [key: string]: any };\n  lastDraw: string;\n  complete: boolean;\n  start?: Date;\n\n  tick(tokens?: any): void;\n  tick(count?: number, tokens?: any): void;\n  render(tokens?: any, force?: boolean): void;\n  update(ratio: number, tokens?: any): void;\n  interrupt(message: string): void;\n  terminate(): void;\n}\n\ninterface ProgressBarConstructor {\n  new (format: string, total: number): ProgressBarInstance;\n  new (format: string, options: ProgressBarOptions): ProgressBarInstance;\n  prototype: ProgressBarInstance;\n}\n\n/**\n * Initialize a `ProgressBar` with the given `fmt` string and `options` or\n * `total`.\n *\n * Options:\n *\n *   - `curr` current completed index\n *   - `total` total number of ticks to complete\n *   - `width` the displayed width of the progress bar defaulting to total\n *   - `stream` the output stream defaulting to stderr\n *   - `head` head character defaulting to complete character\n *   - `complete` completion character defaulting to \"=\"\n *   - `incomplete` incomplete character defaulting to \"-\"\n *   - `renderThrottle` minimum time between updates in milliseconds defaulting to 16\n *   - `callback` optional function to call when the progress bar completes\n *   - `clear` will clear the progress bar upon termination\n *\n * Tokens:\n *\n *   - `:bar` the progress bar itself\n *   - `:current` current tick number\n *   - `:total` total ticks\n *   - `:elapsed` time elapsed in seconds\n *   - `:percent` completion percentage\n *   - `:eta` eta in seconds\n *   - `:rate` rate of ticks per second\n *\n * @param {string} fmt\n * @param {object|number} options or total\n * @api public\n */\nconst ProgressBar: ProgressBarConstructor = function (\n  this: ProgressBarInstance,\n  fmt: string,\n  options: ProgressBarOptions | number,\n) {\n  this.stream = (options as ProgressBarOptions).stream || process.stderr;\n\n  if (typeof options == \"number\") {\n    var total = options;\n    options = {} as ProgressBarOptions;\n    (options as ProgressBarOptions).total = total;\n  } else {\n    options = options || ({} as ProgressBarOptions);\n    if (\"string\" != typeof fmt) throw new Error(\"format required\");\n    if (\"number\" != typeof (options as ProgressBarOptions).total)\n      throw new Error(\"total required\");\n  }\n\n  this.fmt = fmt;\n  this.curr = (options as ProgressBarOptions).curr || 0;\n  this.total = (options as ProgressBarOptions).total;\n  this.width = (options as ProgressBarOptions).width || this.total;\n  this.clear = (options as ProgressBarOptions).clear || false;\n  this.chars = {\n    complete: (options as ProgressBarOptions).complete || \"=\",\n    incomplete: (options as ProgressBarOptions).incomplete || \"-\",\n    head:\n      (options as ProgressBarOptions).head ||\n      (options as ProgressBarOptions).complete ||\n      \"=\",\n  };\n  this.renderThrottle =\n    (options as ProgressBarOptions).renderThrottle !== 0\n      ? (options as ProgressBarOptions).renderThrottle || 16\n      : 0;\n  this.lastRender = -Infinity;\n  this.callback = (options as ProgressBarOptions).callback || function () {};\n  this.tokens = {};\n  this.lastDraw = \"\";\n  this.complete = false;\n} as any;\n\n/**\n * \"tick\" the progress bar with optional `len` and optional `tokens`.\n *\n * @param {number|object} len or tokens\n * @param {object} tokens\n * @api public\n */\nProgressBar.prototype.tick = function (\n  this: ProgressBarInstance,\n  len?: number | any,\n  tokens?: any,\n): void {\n  if (len !== 0) len = len || 1;\n\n  // swap tokens\n  if (\"object\" == typeof len) ((tokens = len), (len = 1));\n  if (tokens) this.tokens = tokens;\n\n  // start time for eta\n  if (0 == this.curr) this.start = new Date();\n\n  this.curr += len;\n\n  // try to render\n  this.render();\n\n  // progress complete\n  if (this.curr >= this.total) {\n    this.render(undefined, true);\n    this.complete = true;\n    this.terminate();\n    this.callback(this);\n    return;\n  }\n};\n\n/**\n * Method to render the progress bar with optional `tokens` to place in the\n * progress bar's `fmt` field.\n *\n * @param {object} tokens\n * @api public\n */\nProgressBar.prototype.render = function (\n  this: ProgressBarInstance,\n  tokens?: any,\n  force?: boolean,\n): void {\n  force = force !== undefined ? force : false;\n  if (tokens) this.tokens = tokens;\n\n  if (!(this.stream as any).isTTY) return;\n\n  var now = Date.now();\n  var delta = now - this.lastRender;\n  if (!force && delta < this.renderThrottle) {\n    return;\n  } else {\n    this.lastRender = now;\n  }\n\n  var ratio = this.curr / this.total;\n  ratio = Math.min(Math.max(ratio, 0), 1);\n\n  var percent = Math.floor(ratio * 100);\n  var incomplete: string, complete: string, completeLength: number;\n  var elapsed = this.start ? new Date().getTime() - this.start.getTime() : 0;\n  var eta = percent == 100 ? 0 : elapsed * (this.total / this.curr - 1);\n  var rate = this.curr / (elapsed / 1000);\n\n  /* populate the bar template with percentages and timestamps */\n  var str = this.fmt\n    .replace(\":current\", this.curr.toString())\n    .replace(\":total\", this.total.toString())\n    .replace(\":elapsed\", isNaN(elapsed) ? \"0.0\" : (elapsed / 1000).toFixed(1))\n    .replace(\n      \":eta\",\n      isNaN(eta) || !isFinite(eta) ? \"0.0\" : (eta / 1000).toFixed(1),\n    )\n    .replace(\":percent\", percent.toFixed(0) + \"%\")\n    .replace(\":rate\", Math.round(rate).toString());\n\n  /* compute the available space (non-zero) for the bar */\n  var availableSpace = Math.max(\n    0,\n    (this.stream as any).columns - str.replace(\":bar\", \"\").length,\n  );\n  if (availableSpace && process.platform === \"win32\") {\n    availableSpace = availableSpace - 1;\n  }\n\n  var width = Math.min(this.width, availableSpace);\n\n  /* TODO: the following assumes the user has one ':bar' token */\n  completeLength = Math.round(width * ratio);\n  complete = Array(Math.max(0, completeLength + 1)).join(this.chars.complete);\n  incomplete = Array(Math.max(0, width - completeLength + 1)).join(\n    this.chars.incomplete,\n  );\n\n  /* add head to the complete string */\n  if (completeLength > 0) complete = complete.slice(0, -1) + this.chars.head;\n\n  /* fill in the actual progress bar */\n  str = str.replace(\":bar\", complete + incomplete);\n\n  /* replace the extra tokens */\n  if (this.tokens)\n    for (var key in this.tokens) str = str.replace(\":\" + key, this.tokens[key]);\n\n  if (this.lastDraw !== str) {\n    (this.stream as any).cursorTo(0);\n    this.stream.write(str);\n    (this.stream as any).clearLine(1);\n    this.lastDraw = str;\n  }\n};\n\n/**\n * \"update\" the progress bar to represent an exact percentage.\n * The ratio (between 0 and 1) specified will be multiplied by `total` and\n * floored, representing the closest available \"tick.\" For example, if a\n * progress bar has a length of 3 and `update(0.5)` is called, the progress\n * will be set to 1.\n *\n * A ratio of 0.5 will attempt to set the progress to halfway.\n *\n * @param {number} ratio The ratio (between 0 and 1 inclusive) to set the\n *   overall completion to.\n * @api public\n */\nProgressBar.prototype.update = function (\n  this: ProgressBarInstance,\n  ratio: number,\n  tokens?: any,\n): void {\n  var goal = Math.floor(ratio * this.total);\n  var delta = goal - this.curr;\n\n  this.tick(delta, tokens);\n};\n\n/**\n * \"interrupt\" the progress bar and write a message above it.\n * @param {string} message The message to write.\n * @api public\n */\nProgressBar.prototype.interrupt = function (\n  this: ProgressBarInstance,\n  message: string,\n): void {\n  // clear the current line\n  (this.stream as any).clearLine();\n  // move the cursor to the start of the line\n  (this.stream as any).cursorTo(0);\n  // write the message text\n  this.stream.write(message);\n  // terminate the line after writing the message\n  this.stream.write(\"\\n\");\n  // re-display the progress bar with its lastDraw\n  this.stream.write(this.lastDraw);\n};\n\n/**\n * Terminates a progress bar.\n *\n * @api public\n */\nProgressBar.prototype.terminate = function (this: ProgressBarInstance): void {\n  if (this.clear) {\n    if ((this.stream as any).clearLine) {\n      (this.stream as any).clearLine();\n      (this.stream as any).cursorTo(0);\n    }\n  } else {\n    this.stream.write(\"\\n\");\n  }\n};\n\nexport default ProgressBar;\n"],
  "mappings": "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",
  "names": []
}
